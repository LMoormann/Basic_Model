controllable tube_1_boom_barrier_1_actuator_up_c_on;
controllable tube_1_boom_barrier_1_actuator_up_c_off;
controllable tube_1_boom_barrier_1_actuator_down_c_on;
controllable tube_1_boom_barrier_1_actuator_down_c_off;
controllable tube_1_boom_barrier_1_actuator_down_c_off_emergency;
uncontrollable tube_1_boom_barrier_1_sensor_open_u_on;
uncontrollable tube_1_boom_barrier_1_sensor_open_u_off;
uncontrollable tube_1_boom_barrier_1_sensor_closed_u_on;
uncontrollable tube_1_boom_barrier_1_sensor_closed_u_off;
uncontrollable tube_1_boom_barrier_1_obstacle_detection_u_on;
uncontrollable tube_1_boom_barrier_1_obstacle_detection_u_off;
controllable tube_1_boom_barrier_2_actuator_up_c_on;
controllable tube_1_boom_barrier_2_actuator_up_c_off;
controllable tube_1_boom_barrier_2_actuator_down_c_on;
controllable tube_1_boom_barrier_2_actuator_down_c_off;
controllable tube_1_boom_barrier_2_actuator_down_c_off_emergency;
uncontrollable tube_1_boom_barrier_2_sensor_open_u_on;
uncontrollable tube_1_boom_barrier_2_sensor_open_u_off;
uncontrollable tube_1_boom_barrier_2_sensor_closed_u_on;
uncontrollable tube_1_boom_barrier_2_sensor_closed_u_off;
uncontrollable tube_1_boom_barrier_2_obstacle_detection_u_on;
uncontrollable tube_1_boom_barrier_2_obstacle_detection_u_off;
controllable tube_1_traffic_light_1_mode_c_off;
controllable tube_1_traffic_light_1_mode_c_yellow;
controllable tube_1_traffic_light_1_mode_c_flashing;
controllable tube_1_traffic_light_1_mode_c_red;
uncontrollable tube_1_traffic_light_1_release_signal_u_on;
uncontrollable tube_1_traffic_light_1_release_signal_u_off;
controllable tube_1_traffic_light_1_timer_release_signal_c_on;
controllable tube_1_traffic_light_1_timer_release_signal_c_reset;
uncontrollable tube_1_traffic_light_1_timer_release_signal_u_timeout;
controllable tube_1_traffic_light_2_mode_c_off;
controllable tube_1_traffic_light_2_mode_c_yellow;
controllable tube_1_traffic_light_2_mode_c_flashing;
controllable tube_1_traffic_light_2_mode_c_red;
uncontrollable tube_1_traffic_light_2_release_signal_u_on;
uncontrollable tube_1_traffic_light_2_release_signal_u_off;
controllable tube_1_traffic_light_2_timer_release_signal_c_on;
controllable tube_1_traffic_light_2_timer_release_signal_c_reset;
uncontrollable tube_1_traffic_light_2_timer_release_signal_u_timeout;
controllable tube_1_traffic_light_3_mode_c_off;
controllable tube_1_traffic_light_3_mode_c_yellow;
controllable tube_1_traffic_light_3_mode_c_flashing;
controllable tube_1_traffic_light_3_mode_c_red;
uncontrollable tube_1_traffic_light_3_release_signal_u_on;
uncontrollable tube_1_traffic_light_3_release_signal_u_off;
controllable tube_1_traffic_light_3_timer_release_signal_c_on;
controllable tube_1_traffic_light_3_timer_release_signal_c_reset;
uncontrollable tube_1_traffic_light_3_timer_release_signal_u_timeout;
controllable tube_1_j32_mode_c_on;
controllable tube_1_j32_mode_c_off;
controllable tube_1_j32_timer_release_signal_c_on;
controllable tube_1_j32_timer_release_signal_c_reset;
uncontrollable tube_1_j32_timer_release_signal_u_timeout;
controllable tube_1_matrix_sign_traffic_light_c_on;
controllable tube_1_matrix_sign_traffic_light_c_off;
controllable tube_1_matrix_sign_free_c_on;
controllable tube_1_matrix_sign_free_c_off;
uncontrollable tube_1_SOS_u_on;
uncontrollable tube_1_SOS_u_off;
uncontrollable tube_1_emergency_cabinet_A_sensor_open_u_on;
uncontrollable tube_1_emergency_cabinet_A_sensor_open_u_off;
uncontrollable tube_1_emergency_cabinet_A_emergency_phone_u_on;
uncontrollable tube_1_emergency_cabinet_A_emergency_phone_u_off;
uncontrollable tube_1_emergency_cabinet_A_hand_extinguisher_u_on;
uncontrollable tube_1_emergency_cabinet_A_hand_extinguisher_u_off;
uncontrollable tube_1_emergency_cabinet_A_fire_hose_u_on;
uncontrollable tube_1_emergency_cabinet_A_fire_hose_u_off;
uncontrollable tube_1_emergency_cabinet_C_sensor_open_u_on;
uncontrollable tube_1_emergency_cabinet_C_sensor_open_u_off;
uncontrollable tube_1_emergency_cabinet_C_emergency_phone_u_on;
uncontrollable tube_1_emergency_cabinet_C_emergency_phone_u_off;
uncontrollable tube_1_emergency_cabinet_C_hand_extinguisher_u_on;
uncontrollable tube_1_emergency_cabinet_C_hand_extinguisher_u_off;
uncontrollable tube_1_smoke_detection_u_0;
uncontrollable tube_1_smoke_detection_u_1;
uncontrollable tube_1_smoke_detection_u_2;
uncontrollable tube_1_smoke_detection_u_3;
uncontrollable tube_1_smoke_detection_u_4;
uncontrollable tube_1_smoke_detection_u_5;
uncontrollable tube_1_smoke_detection_u_6;
uncontrollable tube_1_smoke_detection_u_7;
uncontrollable tube_1_smoke_detection_u_8;
controllable tube_1_ventilation_c_0;
controllable tube_1_ventilation_c_1;
controllable tube_1_ventilation_c_2;
controllable tube_1_ventilation_c_3;
controllable tube_1_ventilation_c_4;
controllable tube_1_ventilation_c_5;
controllable tube_1_ventilation_c_6;
controllable tube_1_ventilation_c_7;
controllable tube_1_ventilation_c_8;
controllable tube_1_ventilation_entrance_c_0;
controllable tube_1_ventilation_entrance_c_1;
controllable tube_1_ventilation_entrance_c_2;
controllable tube_1_ventilation_entrance_c_3;
controllable tube_1_ventilation_entrance_c_4;
controllable tube_1_ventilation_entrance_c_5;
controllable tube_1_ventilation_entrance_c_6;
controllable tube_1_ventilation_entrance_c_7;
controllable tube_1_ventilation_entrance_c_8;
controllable tube_1_ventilation_direction_c_along;
controllable tube_1_ventilation_direction_c_against;
uncontrollable tube_1_lightsensor_u_0;
uncontrollable tube_1_lightsensor_u_1;
uncontrollable tube_1_lightsensor_u_2;
uncontrollable tube_1_lightsensor_u_3;
uncontrollable tube_1_lightsensor_u_4;
uncontrollable tube_1_lightsensor_u_5;
uncontrollable tube_1_lightsensor_u_6;
uncontrollable tube_1_lightsensor_u_7;
uncontrollable tube_1_lightsensor_u_8;
controllable tube_1_lighting_c_0;
controllable tube_1_lighting_c_1;
controllable tube_1_lighting_c_2;
controllable tube_1_lighting_c_3;
controllable tube_1_lighting_c_4;
controllable tube_1_lighting_c_5;
controllable tube_1_lighting_c_6;
controllable tube_1_lighting_c_7;
controllable tube_1_lighting_c_8;
controllable tube_1_channel_c_1_off;
controllable tube_1_channel_c_2_off;
controllable tube_1_channel_c_3_off;
controllable tube_1_channel_c_4_off;
controllable tube_1_channel_c_5_off;
controllable tube_1_channel_c_6_off;
controllable tube_1_channel_c_1_on;
controllable tube_1_channel_c_2_on;
controllable tube_1_channel_c_3_on;
controllable tube_1_channel_c_4_on;
controllable tube_1_channel_c_5_on;
controllable tube_1_channel_c_6_on;
controllable tube_1_recorder_c_on;
controllable tube_1_recorder_c_off;
uncontrollable tube_1_escape_door_sensor_open_u_on;
uncontrollable tube_1_escape_door_sensor_open_u_off;
controllable tube_1_escape_door_sound_beacon_c_on;
controllable tube_1_escape_door_sound_beacon_c_off;
controllable tube_1_escape_door_contour_lighting_c_on;
controllable tube_1_escape_door_contour_lighting_c_off;
controllable tube_1_intercom_c_on;
controllable tube_1_intercom_c_off;
controllable tube_1_switch_timer_audio_c_on;
controllable tube_1_switch_timer_audio_c_off;
uncontrollable tube_1_switch_timer_audio_u_timeout;
controllable tube_1_mode_c_operational;
controllable tube_1_mode_c_emergency;
controllable tube_1_mode_c_recovery;
controllable tube_1_mode_c_support;
controllable tube_1_standby_c_on;
controllable tube_1_standby_c_off;
controllable tube_1_evacuation_c_on;
controllable tube_1_evacuation_c_off;
uncontrollable tube_1_button_operational_button_u_press;
controllable tube_1_button_operational_observer_c_done;
uncontrollable tube_1_button_evacuation_button_u_press;
controllable tube_1_button_evacuation_observer_c_done;
uncontrollable tube_1_button_recovery_button_u_press;
controllable tube_1_button_recovery_observer_c_done;
controllable tube_2_boom_barrier_1_actuator_up_c_on;
controllable tube_2_boom_barrier_1_actuator_up_c_off;
controllable tube_2_boom_barrier_1_actuator_down_c_on;
controllable tube_2_boom_barrier_1_actuator_down_c_off;
controllable tube_2_boom_barrier_1_actuator_down_c_off_emergency;
uncontrollable tube_2_boom_barrier_1_sensor_open_u_on;
uncontrollable tube_2_boom_barrier_1_sensor_open_u_off;
uncontrollable tube_2_boom_barrier_1_sensor_closed_u_on;
uncontrollable tube_2_boom_barrier_1_sensor_closed_u_off;
uncontrollable tube_2_boom_barrier_1_obstacle_detection_u_on;
uncontrollable tube_2_boom_barrier_1_obstacle_detection_u_off;
controllable tube_2_boom_barrier_2_actuator_up_c_on;
controllable tube_2_boom_barrier_2_actuator_up_c_off;
controllable tube_2_boom_barrier_2_actuator_down_c_on;
controllable tube_2_boom_barrier_2_actuator_down_c_off;
controllable tube_2_boom_barrier_2_actuator_down_c_off_emergency;
uncontrollable tube_2_boom_barrier_2_sensor_open_u_on;
uncontrollable tube_2_boom_barrier_2_sensor_open_u_off;
uncontrollable tube_2_boom_barrier_2_sensor_closed_u_on;
uncontrollable tube_2_boom_barrier_2_sensor_closed_u_off;
uncontrollable tube_2_boom_barrier_2_obstacle_detection_u_on;
uncontrollable tube_2_boom_barrier_2_obstacle_detection_u_off;
controllable tube_2_traffic_light_1_mode_c_off;
controllable tube_2_traffic_light_1_mode_c_yellow;
controllable tube_2_traffic_light_1_mode_c_flashing;
controllable tube_2_traffic_light_1_mode_c_red;
uncontrollable tube_2_traffic_light_1_release_signal_u_on;
uncontrollable tube_2_traffic_light_1_release_signal_u_off;
controllable tube_2_traffic_light_1_timer_release_signal_c_on;
controllable tube_2_traffic_light_1_timer_release_signal_c_reset;
uncontrollable tube_2_traffic_light_1_timer_release_signal_u_timeout;
controllable tube_2_traffic_light_2_mode_c_off;
controllable tube_2_traffic_light_2_mode_c_yellow;
controllable tube_2_traffic_light_2_mode_c_flashing;
controllable tube_2_traffic_light_2_mode_c_red;
uncontrollable tube_2_traffic_light_2_release_signal_u_on;
uncontrollable tube_2_traffic_light_2_release_signal_u_off;
controllable tube_2_traffic_light_2_timer_release_signal_c_on;
controllable tube_2_traffic_light_2_timer_release_signal_c_reset;
uncontrollable tube_2_traffic_light_2_timer_release_signal_u_timeout;
controllable tube_2_traffic_light_3_mode_c_off;
controllable tube_2_traffic_light_3_mode_c_yellow;
controllable tube_2_traffic_light_3_mode_c_flashing;
controllable tube_2_traffic_light_3_mode_c_red;
uncontrollable tube_2_traffic_light_3_release_signal_u_on;
uncontrollable tube_2_traffic_light_3_release_signal_u_off;
controllable tube_2_traffic_light_3_timer_release_signal_c_on;
controllable tube_2_traffic_light_3_timer_release_signal_c_reset;
uncontrollable tube_2_traffic_light_3_timer_release_signal_u_timeout;
controllable tube_2_j32_mode_c_on;
controllable tube_2_j32_mode_c_off;
controllable tube_2_j32_timer_release_signal_c_on;
controllable tube_2_j32_timer_release_signal_c_reset;
uncontrollable tube_2_j32_timer_release_signal_u_timeout;
controllable tube_2_matrix_sign_traffic_light_c_on;
controllable tube_2_matrix_sign_traffic_light_c_off;
controllable tube_2_matrix_sign_free_c_on;
controllable tube_2_matrix_sign_free_c_off;
uncontrollable tube_2_SOS_u_on;
uncontrollable tube_2_SOS_u_off;
uncontrollable tube_2_emergency_cabinet_A_sensor_open_u_on;
uncontrollable tube_2_emergency_cabinet_A_sensor_open_u_off;
uncontrollable tube_2_emergency_cabinet_A_emergency_phone_u_on;
uncontrollable tube_2_emergency_cabinet_A_emergency_phone_u_off;
uncontrollable tube_2_emergency_cabinet_A_hand_extinguisher_u_on;
uncontrollable tube_2_emergency_cabinet_A_hand_extinguisher_u_off;
uncontrollable tube_2_emergency_cabinet_A_fire_hose_u_on;
uncontrollable tube_2_emergency_cabinet_A_fire_hose_u_off;
uncontrollable tube_2_emergency_cabinet_C_sensor_open_u_on;
uncontrollable tube_2_emergency_cabinet_C_sensor_open_u_off;
uncontrollable tube_2_emergency_cabinet_C_emergency_phone_u_on;
uncontrollable tube_2_emergency_cabinet_C_emergency_phone_u_off;
uncontrollable tube_2_emergency_cabinet_C_hand_extinguisher_u_on;
uncontrollable tube_2_emergency_cabinet_C_hand_extinguisher_u_off;
uncontrollable tube_2_smoke_detection_u_0;
uncontrollable tube_2_smoke_detection_u_1;
uncontrollable tube_2_smoke_detection_u_2;
uncontrollable tube_2_smoke_detection_u_3;
uncontrollable tube_2_smoke_detection_u_4;
uncontrollable tube_2_smoke_detection_u_5;
uncontrollable tube_2_smoke_detection_u_6;
uncontrollable tube_2_smoke_detection_u_7;
uncontrollable tube_2_smoke_detection_u_8;
controllable tube_2_ventilation_c_0;
controllable tube_2_ventilation_c_1;
controllable tube_2_ventilation_c_2;
controllable tube_2_ventilation_c_3;
controllable tube_2_ventilation_c_4;
controllable tube_2_ventilation_c_5;
controllable tube_2_ventilation_c_6;
controllable tube_2_ventilation_c_7;
controllable tube_2_ventilation_c_8;
controllable tube_2_ventilation_entrance_c_0;
controllable tube_2_ventilation_entrance_c_1;
controllable tube_2_ventilation_entrance_c_2;
controllable tube_2_ventilation_entrance_c_3;
controllable tube_2_ventilation_entrance_c_4;
controllable tube_2_ventilation_entrance_c_5;
controllable tube_2_ventilation_entrance_c_6;
controllable tube_2_ventilation_entrance_c_7;
controllable tube_2_ventilation_entrance_c_8;
controllable tube_2_ventilation_direction_c_along;
controllable tube_2_ventilation_direction_c_against;
uncontrollable tube_2_lightsensor_u_0;
uncontrollable tube_2_lightsensor_u_1;
uncontrollable tube_2_lightsensor_u_2;
uncontrollable tube_2_lightsensor_u_3;
uncontrollable tube_2_lightsensor_u_4;
uncontrollable tube_2_lightsensor_u_5;
uncontrollable tube_2_lightsensor_u_6;
uncontrollable tube_2_lightsensor_u_7;
uncontrollable tube_2_lightsensor_u_8;
controllable tube_2_lighting_c_0;
controllable tube_2_lighting_c_1;
controllable tube_2_lighting_c_2;
controllable tube_2_lighting_c_3;
controllable tube_2_lighting_c_4;
controllable tube_2_lighting_c_5;
controllable tube_2_lighting_c_6;
controllable tube_2_lighting_c_7;
controllable tube_2_lighting_c_8;
controllable tube_2_channel_c_1_off;
controllable tube_2_channel_c_2_off;
controllable tube_2_channel_c_3_off;
controllable tube_2_channel_c_4_off;
controllable tube_2_channel_c_5_off;
controllable tube_2_channel_c_6_off;
controllable tube_2_channel_c_1_on;
controllable tube_2_channel_c_2_on;
controllable tube_2_channel_c_3_on;
controllable tube_2_channel_c_4_on;
controllable tube_2_channel_c_5_on;
controllable tube_2_channel_c_6_on;
controllable tube_2_recorder_c_on;
controllable tube_2_recorder_c_off;
uncontrollable tube_2_escape_door_sensor_open_u_on;
uncontrollable tube_2_escape_door_sensor_open_u_off;
controllable tube_2_escape_door_sound_beacon_c_on;
controllable tube_2_escape_door_sound_beacon_c_off;
controllable tube_2_escape_door_contour_lighting_c_on;
controllable tube_2_escape_door_contour_lighting_c_off;
controllable tube_2_intercom_c_on;
controllable tube_2_intercom_c_off;
controllable tube_2_switch_timer_audio_c_on;
controllable tube_2_switch_timer_audio_c_off;
uncontrollable tube_2_switch_timer_audio_u_timeout;
controllable tube_2_mode_c_operational;
controllable tube_2_mode_c_emergency;
controllable tube_2_mode_c_recovery;
controllable tube_2_mode_c_support;
controllable tube_2_standby_c_on;
controllable tube_2_standby_c_off;
controllable tube_2_evacuation_c_on;
controllable tube_2_evacuation_c_off;
uncontrollable tube_2_button_operational_button_u_press;
controllable tube_2_button_operational_observer_c_done;
uncontrollable tube_2_button_evacuation_button_u_press;
controllable tube_2_button_evacuation_observer_c_done;
uncontrollable tube_2_button_recovery_button_u_press;
controllable tube_2_button_recovery_observer_c_done;
controllable middle_tunnel_channel_pressure_c_off;
controllable middle_tunnel_channel_pressure_c_left;
controllable middle_tunnel_channel_pressure_c_right;
controllable middle_tunnel_channel_lighting_c_on;
controllable middle_tunnel_channel_lighting_c_off;
controllable middle_tunnel_channel_dynamic_escaperoute_indication_c_off;
controllable middle_tunnel_channel_dynamic_escaperoute_indication_c_upward;
controllable middle_tunnel_channel_dynamic_escaperoute_indication_c_downward;
controllable middle_tunnel_channel_intercom_c_on;
controllable middle_tunnel_channel_intercom_c_off;
plant automaton tube_1_boom_barrier_1_actuator_up:
  location off:
    initial;
    marked;
    edge tube_1_boom_barrier_1_actuator_up_c_on goto on;
  location on:
    marked false;
    edge tube_1_boom_barrier_1_actuator_up_c_off goto off;
end
plant automaton tube_1_boom_barrier_1_actuator_down:
  location off:
    initial;
    marked;
    edge tube_1_boom_barrier_1_actuator_down_c_on goto on;
  location on:
    marked false;
    edge tube_1_boom_barrier_1_actuator_down_c_off, tube_1_boom_barrier_1_actuator_down_c_off_emergency goto off;
end
plant automaton tube_1_boom_barrier_1_sensor_open:
  location off:
    initial false;
    marked false;
    edge tube_1_boom_barrier_1_sensor_open_u_on goto on;
  location on:
    initial;
    marked;
    edge tube_1_boom_barrier_1_sensor_open_u_off goto off;
end
plant automaton tube_1_boom_barrier_1_sensor_closed:
  location off:
    initial;
    marked;
    edge tube_1_boom_barrier_1_sensor_closed_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_1_boom_barrier_1_sensor_closed_u_off goto off;
end
plant automaton tube_1_boom_barrier_1_physical_relation:
  location:
    initial;
    marked;
    edge tube_1_boom_barrier_1_sensor_open_u_on when tube_1_boom_barrier_1_actuator_up.on and tube_1_boom_barrier_1_sensor_closed.off;
    edge tube_1_boom_barrier_1_sensor_closed_u_off when tube_1_boom_barrier_1_actuator_up.on;
    edge tube_1_boom_barrier_1_sensor_open_u_off when tube_1_boom_barrier_1_actuator_down.on;
    edge tube_1_boom_barrier_1_sensor_closed_u_on when tube_1_boom_barrier_1_actuator_down.on and tube_1_boom_barrier_1_sensor_open.off;
end
plant automaton tube_1_boom_barrier_1_obstacle_detection:
  location off:
    initial;
    marked;
    edge tube_1_boom_barrier_1_obstacle_detection_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_1_boom_barrier_1_obstacle_detection_u_off goto off;
end
plant automaton tube_1_boom_barrier_2_actuator_up:
  location off:
    initial;
    marked;
    edge tube_1_boom_barrier_2_actuator_up_c_on goto on;
  location on:
    marked false;
    edge tube_1_boom_barrier_2_actuator_up_c_off goto off;
end
plant automaton tube_1_boom_barrier_2_actuator_down:
  location off:
    initial;
    marked;
    edge tube_1_boom_barrier_2_actuator_down_c_on goto on;
  location on:
    marked false;
    edge tube_1_boom_barrier_2_actuator_down_c_off, tube_1_boom_barrier_2_actuator_down_c_off_emergency goto off;
end
plant automaton tube_1_boom_barrier_2_sensor_open:
  location off:
    initial false;
    marked false;
    edge tube_1_boom_barrier_2_sensor_open_u_on goto on;
  location on:
    initial;
    marked;
    edge tube_1_boom_barrier_2_sensor_open_u_off goto off;
end
plant automaton tube_1_boom_barrier_2_sensor_closed:
  location off:
    initial;
    marked;
    edge tube_1_boom_barrier_2_sensor_closed_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_1_boom_barrier_2_sensor_closed_u_off goto off;
end
plant automaton tube_1_boom_barrier_2_physical_relation:
  location:
    initial;
    marked;
    edge tube_1_boom_barrier_2_sensor_open_u_on when tube_1_boom_barrier_2_actuator_up.on and tube_1_boom_barrier_2_sensor_closed.off;
    edge tube_1_boom_barrier_2_sensor_closed_u_off when tube_1_boom_barrier_2_actuator_up.on;
    edge tube_1_boom_barrier_2_sensor_open_u_off when tube_1_boom_barrier_2_actuator_down.on;
    edge tube_1_boom_barrier_2_sensor_closed_u_on when tube_1_boom_barrier_2_actuator_down.on and tube_1_boom_barrier_2_sensor_open.off;
end
plant automaton tube_1_boom_barrier_2_obstacle_detection:
  location off:
    initial;
    marked;
    edge tube_1_boom_barrier_2_obstacle_detection_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_1_boom_barrier_2_obstacle_detection_u_off goto off;
end
plant automaton tube_1_traffic_light_1_mode:
  location off:
    initial;
    marked;
    edge tube_1_traffic_light_1_mode_c_flashing goto flashing;
  location flashing:
    edge tube_1_traffic_light_1_mode_c_off goto off;
    edge tube_1_traffic_light_1_mode_c_yellow goto yellow;
  location yellow:
    edge tube_1_traffic_light_1_mode_c_red goto red;
  location red:
    edge tube_1_traffic_light_1_mode_c_flashing goto flashing;
end
plant automaton tube_1_traffic_light_1_release_signal:
  location off:
    initial;
    marked;
    edge tube_1_traffic_light_1_release_signal_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_1_traffic_light_1_release_signal_u_off goto off;
end
plant automaton tube_1_traffic_light_1_timer_release_signal:
  location off:
    initial;
    marked;
    edge tube_1_traffic_light_1_timer_release_signal_c_on goto running;
  location running:
    edge tube_1_traffic_light_1_timer_release_signal_c_reset goto off;
    edge tube_1_traffic_light_1_timer_release_signal_u_timeout goto finished;
  location finished:
    edge tube_1_traffic_light_1_timer_release_signal_c_reset goto off;
end
plant automaton tube_1_traffic_light_1_relation:
  location:
    initial;
    marked;
    edge tube_1_traffic_light_1_release_signal_u_on when tube_1_traffic_light_1_mode.red and tube_1_traffic_light_1_timer_release_signal.finished;
    edge tube_1_traffic_light_1_release_signal_u_off when not tube_1_traffic_light_1_mode.red;
end
plant automaton tube_1_traffic_light_2_mode:
  location off:
    initial;
    marked;
    edge tube_1_traffic_light_2_mode_c_flashing goto flashing;
  location flashing:
    edge tube_1_traffic_light_2_mode_c_off goto off;
    edge tube_1_traffic_light_2_mode_c_yellow goto yellow;
  location yellow:
    edge tube_1_traffic_light_2_mode_c_red goto red;
  location red:
    edge tube_1_traffic_light_2_mode_c_flashing goto flashing;
end
plant automaton tube_1_traffic_light_2_release_signal:
  location off:
    initial;
    marked;
    edge tube_1_traffic_light_2_release_signal_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_1_traffic_light_2_release_signal_u_off goto off;
end
plant automaton tube_1_traffic_light_2_timer_release_signal:
  location off:
    initial;
    marked;
    edge tube_1_traffic_light_2_timer_release_signal_c_on goto running;
  location running:
    edge tube_1_traffic_light_2_timer_release_signal_c_reset goto off;
    edge tube_1_traffic_light_2_timer_release_signal_u_timeout goto finished;
  location finished:
    edge tube_1_traffic_light_2_timer_release_signal_c_reset goto off;
end
plant automaton tube_1_traffic_light_2_relation:
  location:
    initial;
    marked;
    edge tube_1_traffic_light_2_release_signal_u_on when tube_1_traffic_light_2_mode.red and tube_1_traffic_light_2_timer_release_signal.finished;
    edge tube_1_traffic_light_2_release_signal_u_off when not tube_1_traffic_light_2_mode.red;
end
plant automaton tube_1_traffic_light_3_mode:
  location off:
    initial;
    marked;
    edge tube_1_traffic_light_3_mode_c_flashing goto flashing;
  location flashing:
    edge tube_1_traffic_light_3_mode_c_off goto off;
    edge tube_1_traffic_light_3_mode_c_yellow goto yellow;
  location yellow:
    edge tube_1_traffic_light_3_mode_c_red goto red;
  location red:
    edge tube_1_traffic_light_3_mode_c_flashing goto flashing;
end
plant automaton tube_1_traffic_light_3_release_signal:
  location off:
    initial;
    marked;
    edge tube_1_traffic_light_3_release_signal_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_1_traffic_light_3_release_signal_u_off goto off;
end
plant automaton tube_1_traffic_light_3_timer_release_signal:
  location off:
    initial;
    marked;
    edge tube_1_traffic_light_3_timer_release_signal_c_on goto running;
  location running:
    edge tube_1_traffic_light_3_timer_release_signal_c_reset goto off;
    edge tube_1_traffic_light_3_timer_release_signal_u_timeout goto finished;
  location finished:
    edge tube_1_traffic_light_3_timer_release_signal_c_reset goto off;
end
plant automaton tube_1_traffic_light_3_relation:
  location:
    initial;
    marked;
    edge tube_1_traffic_light_3_release_signal_u_on when tube_1_traffic_light_3_mode.red and tube_1_traffic_light_3_timer_release_signal.finished;
    edge tube_1_traffic_light_3_release_signal_u_off when not tube_1_traffic_light_3_mode.red;
end
plant automaton tube_1_j32_mode:
  location off:
    initial;
    marked;
    edge tube_1_j32_mode_c_on goto on;
  location on:
    marked false;
    edge tube_1_j32_mode_c_off goto off;
end
plant automaton tube_1_j32_timer_release_signal:
  location off:
    initial;
    marked;
    edge tube_1_j32_timer_release_signal_c_on goto running;
  location running:
    edge tube_1_j32_timer_release_signal_c_reset goto off;
    edge tube_1_j32_timer_release_signal_u_timeout goto finished;
  location finished:
    edge tube_1_j32_timer_release_signal_c_reset goto off;
end
plant automaton tube_1_matrix_sign_traffic_light:
  location off:
    initial;
    marked;
    edge tube_1_matrix_sign_traffic_light_c_on goto on;
  location on:
    marked false;
    edge tube_1_matrix_sign_traffic_light_c_off goto off;
end
plant automaton tube_1_matrix_sign_free:
  location off:
    initial;
    marked;
    edge tube_1_matrix_sign_free_c_on goto on;
  location on:
    marked false;
    edge tube_1_matrix_sign_free_c_off goto off;
end
plant automaton tube_1_SOS:
  location off:
    initial;
    marked;
    edge tube_1_SOS_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_1_SOS_u_off goto off;
end
plant automaton tube_1_emergency_cabinet_A_sensor_open:
  location off:
    initial;
    marked;
    edge tube_1_emergency_cabinet_A_sensor_open_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_1_emergency_cabinet_A_sensor_open_u_off goto off;
end
plant automaton tube_1_emergency_cabinet_A_emergency_phone:
  location off:
    initial;
    marked;
    edge tube_1_emergency_cabinet_A_emergency_phone_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_1_emergency_cabinet_A_emergency_phone_u_off goto off;
end
plant automaton tube_1_emergency_cabinet_A_hand_extinguisher:
  location off:
    initial;
    marked;
    edge tube_1_emergency_cabinet_A_hand_extinguisher_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_1_emergency_cabinet_A_hand_extinguisher_u_off goto off;
end
plant automaton tube_1_emergency_cabinet_A_fire_hose:
  location off:
    initial;
    marked;
    edge tube_1_emergency_cabinet_A_fire_hose_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_1_emergency_cabinet_A_fire_hose_u_off goto off;
end
plant automaton tube_1_emergency_cabinet_C_sensor_open:
  location off:
    initial;
    marked;
    edge tube_1_emergency_cabinet_C_sensor_open_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_1_emergency_cabinet_C_sensor_open_u_off goto off;
end
plant automaton tube_1_emergency_cabinet_C_emergency_phone:
  location off:
    initial;
    marked;
    edge tube_1_emergency_cabinet_C_emergency_phone_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_1_emergency_cabinet_C_emergency_phone_u_off goto off;
end
plant automaton tube_1_emergency_cabinet_C_hand_extinguisher:
  location off:
    initial;
    marked;
    edge tube_1_emergency_cabinet_C_hand_extinguisher_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_1_emergency_cabinet_C_hand_extinguisher_u_off goto off;
end
plant automaton tube_1_smoke_detection:
  disc int[0..8] mode = 0;
  location:
    initial;
    marked;
    edge tube_1_smoke_detection_u_0 when not(mode = 0) do mode := 0;
    edge tube_1_smoke_detection_u_1 when not(mode = 1) do mode := 1;
    edge tube_1_smoke_detection_u_2 when not(mode = 2) do mode := 2;
    edge tube_1_smoke_detection_u_3 when not(mode = 3) do mode := 3;
    edge tube_1_smoke_detection_u_4 when not(mode = 4) do mode := 4;
    edge tube_1_smoke_detection_u_5 when not(mode = 5) do mode := 5;
    edge tube_1_smoke_detection_u_6 when not(mode = 6) do mode := 6;
    edge tube_1_smoke_detection_u_7 when not(mode = 7) do mode := 7;
    edge tube_1_smoke_detection_u_8 when not(mode = 8) do mode := 8;
end
plant automaton tube_1_ventilation:
  disc int[0..8] mode = 0;
  location:
    initial;
    marked;
    edge tube_1_ventilation_c_0 when not(mode = 0) do mode := 0;
    edge tube_1_ventilation_c_1 when not(mode = 1) do mode := 1;
    edge tube_1_ventilation_c_2 when not(mode = 2) do mode := 2;
    edge tube_1_ventilation_c_3 when not(mode = 3) do mode := 3;
    edge tube_1_ventilation_c_4 when not(mode = 4) do mode := 4;
    edge tube_1_ventilation_c_5 when not(mode = 5) do mode := 5;
    edge tube_1_ventilation_c_6 when not(mode = 6) do mode := 6;
    edge tube_1_ventilation_c_7 when not(mode = 7) do mode := 7;
    edge tube_1_ventilation_c_8 when not(mode = 8) do mode := 8;
end
plant automaton tube_1_ventilation_entrance:
  disc int[0..8] mode = 0;
  location:
    initial;
    marked;
    edge tube_1_ventilation_entrance_c_0 when not(mode = 0) do mode := 0;
    edge tube_1_ventilation_entrance_c_1 when not(mode = 1) do mode := 1;
    edge tube_1_ventilation_entrance_c_2 when not(mode = 2) do mode := 2;
    edge tube_1_ventilation_entrance_c_3 when not(mode = 3) do mode := 3;
    edge tube_1_ventilation_entrance_c_4 when not(mode = 4) do mode := 4;
    edge tube_1_ventilation_entrance_c_5 when not(mode = 5) do mode := 5;
    edge tube_1_ventilation_entrance_c_6 when not(mode = 6) do mode := 6;
    edge tube_1_ventilation_entrance_c_7 when not(mode = 7) do mode := 7;
    edge tube_1_ventilation_entrance_c_8 when not(mode = 8) do mode := 8;
end
plant automaton tube_1_ventilation_direction:
  location along:
    initial;
    marked;
    edge tube_1_ventilation_direction_c_against goto against;
  location against:
    edge tube_1_ventilation_direction_c_along goto along;
end
plant automaton tube_1_lightsensor:
  disc int[0..8] mode = 0;
  location:
    initial;
    marked;
    edge tube_1_lightsensor_u_0 when not(mode = 0) do mode := 0;
    edge tube_1_lightsensor_u_1 when not(mode = 1) do mode := 1;
    edge tube_1_lightsensor_u_2 when not(mode = 2) do mode := 2;
    edge tube_1_lightsensor_u_3 when not(mode = 3) do mode := 3;
    edge tube_1_lightsensor_u_4 when not(mode = 4) do mode := 4;
    edge tube_1_lightsensor_u_5 when not(mode = 5) do mode := 5;
    edge tube_1_lightsensor_u_6 when not(mode = 6) do mode := 6;
    edge tube_1_lightsensor_u_7 when not(mode = 7) do mode := 7;
    edge tube_1_lightsensor_u_8 when not(mode = 8) do mode := 8;
end
plant automaton tube_1_lighting:
  disc int[0..8] mode = 0;
  location:
    initial;
    marked;
    edge tube_1_lighting_c_0 when not(mode = 0) do mode := 0;
    edge tube_1_lighting_c_1 when not(mode = 1) do mode := 1;
    edge tube_1_lighting_c_2 when not(mode = 2) do mode := 2;
    edge tube_1_lighting_c_3 when not(mode = 3) do mode := 3;
    edge tube_1_lighting_c_4 when not(mode = 4) do mode := 4;
    edge tube_1_lighting_c_5 when not(mode = 5) do mode := 5;
    edge tube_1_lighting_c_6 when not(mode = 6) do mode := 6;
    edge tube_1_lighting_c_7 when not(mode = 7) do mode := 7;
    edge tube_1_lighting_c_8 when not(mode = 8) do mode := 8;
end
plant automaton tube_1_channel:
  location off:
    initial;
    marked;
    edge tube_1_channel_c_1_on goto camera_1;
    edge tube_1_channel_c_2_on goto camera_2;
    edge tube_1_channel_c_3_on goto camera_3;
    edge tube_1_channel_c_4_on goto camera_4;
    edge tube_1_channel_c_5_on goto camera_5;
    edge tube_1_channel_c_6_on goto camera_6;
  location camera_1:
    edge tube_1_channel_c_1_off goto off;
  location camera_2:
    edge tube_1_channel_c_2_off goto off;
  location camera_3:
    edge tube_1_channel_c_3_off goto off;
  location camera_4:
    edge tube_1_channel_c_4_off goto off;
  location camera_5:
    edge tube_1_channel_c_5_off goto off;
  location camera_6:
    edge tube_1_channel_c_6_off goto off;
end
plant automaton tube_1_recorder:
  location off:
    initial;
    marked;
    edge tube_1_recorder_c_on goto on;
  location on:
    marked false;
    edge tube_1_recorder_c_off goto off;
end
plant automaton tube_1_escape_door_sensor_open:
  location off:
    initial;
    marked;
    edge tube_1_escape_door_sensor_open_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_1_escape_door_sensor_open_u_off goto off;
end
plant automaton tube_1_escape_door_sound_beacon:
  location off:
    initial;
    marked;
    edge tube_1_escape_door_sound_beacon_c_on goto on;
  location on:
    marked false;
    edge tube_1_escape_door_sound_beacon_c_off goto off;
end
plant automaton tube_1_escape_door_contour_lighting:
  location off:
    initial;
    marked;
    edge tube_1_escape_door_contour_lighting_c_on goto on;
  location on:
    marked false;
    edge tube_1_escape_door_contour_lighting_c_off goto off;
end
plant automaton tube_1_intercom:
  location off:
    initial;
    marked;
    edge tube_1_intercom_c_on goto on;
  location on:
    marked false;
    edge tube_1_intercom_c_off goto off;
end
plant automaton tube_1_switch_timer_audio:
  location off:
    initial;
    marked;
    edge tube_1_switch_timer_audio_c_on goto on_1;
  location on_1:
    edge tube_1_switch_timer_audio_c_off goto off;
    edge tube_1_switch_timer_audio_u_timeout goto on_2;
  location on_2:
    edge tube_1_switch_timer_audio_c_off goto off;
    edge tube_1_switch_timer_audio_u_timeout goto on_1;
end
plant automaton tube_1_mode:
  location operational:
    initial;
    marked;
    edge tube_1_mode_c_emergency goto emergency;
    edge tube_1_mode_c_recovery goto recovery;
    edge tube_1_mode_c_support goto support;
  location emergency:
    edge tube_1_mode_c_recovery goto recovery;
    edge tube_1_mode_c_operational goto operational;
    edge tube_1_mode_c_support goto support;
  location recovery:
    edge tube_1_mode_c_operational goto operational;
    edge tube_1_mode_c_emergency goto emergency;
    edge tube_1_mode_c_support goto support;
  location support:
    edge tube_1_mode_c_operational goto operational;
    edge tube_1_mode_c_emergency goto emergency;
    edge tube_1_mode_c_recovery goto recovery;
end
plant automaton tube_1_standby:
  location off:
    initial;
    marked;
    edge tube_1_standby_c_on goto on;
  location on:
    marked false;
    edge tube_1_standby_c_off goto off;
end
plant automaton tube_1_evacuation:
  location off:
    initial;
    marked;
    edge tube_1_evacuation_c_on goto on;
  location on:
    marked false;
    edge tube_1_evacuation_c_off goto off;
end
plant automaton tube_1_button_operational_button:
  location:
    initial;
    marked;
    edge tube_1_button_operational_button_u_press;
end
plant automaton tube_1_button_operational_observer:
  location released:
    initial;
    marked;
    edge tube_1_button_operational_button_u_press when tube_1_mode.recovery goto pressed;
    edge tube_1_button_operational_button_u_press when not tube_1_mode.recovery;
  location pressed:
    marked;
    edge tube_1_button_operational_observer_c_done when tube_1_mode.operational goto released;
    edge tube_1_button_operational_button_u_press;
end
plant automaton tube_1_button_evacuation_button:
  location:
    initial;
    marked;
    edge tube_1_button_evacuation_button_u_press;
end
plant automaton tube_1_button_evacuation_observer:
  location released:
    initial;
    marked;
    edge tube_1_button_evacuation_button_u_press when tube_1_mode.emergency and tube_1_evacuation.off goto pressed;
    edge tube_1_button_evacuation_button_u_press when not(tube_1_mode.emergency and tube_1_evacuation.off);
  location pressed:
    marked;
    edge tube_1_button_evacuation_observer_c_done when tube_1_evacuation.on goto released;
    edge tube_1_button_evacuation_button_u_press;
end
plant automaton tube_1_button_recovery_button:
  location:
    initial;
    marked;
    edge tube_1_button_recovery_button_u_press;
end
plant automaton tube_1_button_recovery_observer:
  location released:
    initial;
    marked;
    edge tube_1_button_recovery_button_u_press when tube_1_mode.emergency goto pressed;
    edge tube_1_button_recovery_button_u_press when not tube_1_mode.emergency;
  location pressed:
    marked;
    edge tube_1_button_recovery_observer_c_done when tube_1_mode.recovery goto released;
    edge tube_1_button_recovery_button_u_press;
end
plant automaton tube_2_boom_barrier_1_actuator_up:
  location off:
    initial;
    marked;
    edge tube_2_boom_barrier_1_actuator_up_c_on goto on;
  location on:
    marked false;
    edge tube_2_boom_barrier_1_actuator_up_c_off goto off;
end
plant automaton tube_2_boom_barrier_1_actuator_down:
  location off:
    initial;
    marked;
    edge tube_2_boom_barrier_1_actuator_down_c_on goto on;
  location on:
    marked false;
    edge tube_2_boom_barrier_1_actuator_down_c_off, tube_2_boom_barrier_1_actuator_down_c_off_emergency goto off;
end
plant automaton tube_2_boom_barrier_1_sensor_open:
  location off:
    initial false;
    marked false;
    edge tube_2_boom_barrier_1_sensor_open_u_on goto on;
  location on:
    initial;
    marked;
    edge tube_2_boom_barrier_1_sensor_open_u_off goto off;
end
plant automaton tube_2_boom_barrier_1_sensor_closed:
  location off:
    initial;
    marked;
    edge tube_2_boom_barrier_1_sensor_closed_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_2_boom_barrier_1_sensor_closed_u_off goto off;
end
plant automaton tube_2_boom_barrier_1_physical_relation:
  location:
    initial;
    marked;
    edge tube_2_boom_barrier_1_sensor_open_u_on when tube_2_boom_barrier_1_actuator_up.on and tube_2_boom_barrier_1_sensor_closed.off;
    edge tube_2_boom_barrier_1_sensor_closed_u_off when tube_2_boom_barrier_1_actuator_up.on;
    edge tube_2_boom_barrier_1_sensor_open_u_off when tube_2_boom_barrier_1_actuator_down.on;
    edge tube_2_boom_barrier_1_sensor_closed_u_on when tube_2_boom_barrier_1_actuator_down.on and tube_2_boom_barrier_1_sensor_open.off;
end
plant automaton tube_2_boom_barrier_1_obstacle_detection:
  location off:
    initial;
    marked;
    edge tube_2_boom_barrier_1_obstacle_detection_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_2_boom_barrier_1_obstacle_detection_u_off goto off;
end
plant automaton tube_2_boom_barrier_2_actuator_up:
  location off:
    initial;
    marked;
    edge tube_2_boom_barrier_2_actuator_up_c_on goto on;
  location on:
    marked false;
    edge tube_2_boom_barrier_2_actuator_up_c_off goto off;
end
plant automaton tube_2_boom_barrier_2_actuator_down:
  location off:
    initial;
    marked;
    edge tube_2_boom_barrier_2_actuator_down_c_on goto on;
  location on:
    marked false;
    edge tube_2_boom_barrier_2_actuator_down_c_off, tube_2_boom_barrier_2_actuator_down_c_off_emergency goto off;
end
plant automaton tube_2_boom_barrier_2_sensor_open:
  location off:
    initial false;
    marked false;
    edge tube_2_boom_barrier_2_sensor_open_u_on goto on;
  location on:
    initial;
    marked;
    edge tube_2_boom_barrier_2_sensor_open_u_off goto off;
end
plant automaton tube_2_boom_barrier_2_sensor_closed:
  location off:
    initial;
    marked;
    edge tube_2_boom_barrier_2_sensor_closed_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_2_boom_barrier_2_sensor_closed_u_off goto off;
end
plant automaton tube_2_boom_barrier_2_physical_relation:
  location:
    initial;
    marked;
    edge tube_2_boom_barrier_2_sensor_open_u_on when tube_2_boom_barrier_2_actuator_up.on and tube_2_boom_barrier_2_sensor_closed.off;
    edge tube_2_boom_barrier_2_sensor_closed_u_off when tube_2_boom_barrier_2_actuator_up.on;
    edge tube_2_boom_barrier_2_sensor_open_u_off when tube_2_boom_barrier_2_actuator_down.on;
    edge tube_2_boom_barrier_2_sensor_closed_u_on when tube_2_boom_barrier_2_actuator_down.on and tube_2_boom_barrier_2_sensor_open.off;
end
plant automaton tube_2_boom_barrier_2_obstacle_detection:
  location off:
    initial;
    marked;
    edge tube_2_boom_barrier_2_obstacle_detection_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_2_boom_barrier_2_obstacle_detection_u_off goto off;
end
plant automaton tube_2_traffic_light_1_mode:
  location off:
    initial;
    marked;
    edge tube_2_traffic_light_1_mode_c_flashing goto flashing;
  location flashing:
    edge tube_2_traffic_light_1_mode_c_off goto off;
    edge tube_2_traffic_light_1_mode_c_yellow goto yellow;
  location yellow:
    edge tube_2_traffic_light_1_mode_c_red goto red;
  location red:
    edge tube_2_traffic_light_1_mode_c_flashing goto flashing;
end
plant automaton tube_2_traffic_light_1_release_signal:
  location off:
    initial;
    marked;
    edge tube_2_traffic_light_1_release_signal_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_2_traffic_light_1_release_signal_u_off goto off;
end
plant automaton tube_2_traffic_light_1_timer_release_signal:
  location off:
    initial;
    marked;
    edge tube_2_traffic_light_1_timer_release_signal_c_on goto running;
  location running:
    edge tube_2_traffic_light_1_timer_release_signal_c_reset goto off;
    edge tube_2_traffic_light_1_timer_release_signal_u_timeout goto finished;
  location finished:
    edge tube_2_traffic_light_1_timer_release_signal_c_reset goto off;
end
plant automaton tube_2_traffic_light_1_relation:
  location:
    initial;
    marked;
    edge tube_2_traffic_light_1_release_signal_u_on when tube_2_traffic_light_1_mode.red and tube_2_traffic_light_1_timer_release_signal.finished;
    edge tube_2_traffic_light_1_release_signal_u_off when not tube_2_traffic_light_1_mode.red;
end
plant automaton tube_2_traffic_light_2_mode:
  location off:
    initial;
    marked;
    edge tube_2_traffic_light_2_mode_c_flashing goto flashing;
  location flashing:
    edge tube_2_traffic_light_2_mode_c_off goto off;
    edge tube_2_traffic_light_2_mode_c_yellow goto yellow;
  location yellow:
    edge tube_2_traffic_light_2_mode_c_red goto red;
  location red:
    edge tube_2_traffic_light_2_mode_c_flashing goto flashing;
end
plant automaton tube_2_traffic_light_2_release_signal:
  location off:
    initial;
    marked;
    edge tube_2_traffic_light_2_release_signal_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_2_traffic_light_2_release_signal_u_off goto off;
end
plant automaton tube_2_traffic_light_2_timer_release_signal:
  location off:
    initial;
    marked;
    edge tube_2_traffic_light_2_timer_release_signal_c_on goto running;
  location running:
    edge tube_2_traffic_light_2_timer_release_signal_c_reset goto off;
    edge tube_2_traffic_light_2_timer_release_signal_u_timeout goto finished;
  location finished:
    edge tube_2_traffic_light_2_timer_release_signal_c_reset goto off;
end
plant automaton tube_2_traffic_light_2_relation:
  location:
    initial;
    marked;
    edge tube_2_traffic_light_2_release_signal_u_on when tube_2_traffic_light_2_mode.red and tube_2_traffic_light_2_timer_release_signal.finished;
    edge tube_2_traffic_light_2_release_signal_u_off when not tube_2_traffic_light_2_mode.red;
end
plant automaton tube_2_traffic_light_3_mode:
  location off:
    initial;
    marked;
    edge tube_2_traffic_light_3_mode_c_flashing goto flashing;
  location flashing:
    edge tube_2_traffic_light_3_mode_c_off goto off;
    edge tube_2_traffic_light_3_mode_c_yellow goto yellow;
  location yellow:
    edge tube_2_traffic_light_3_mode_c_red goto red;
  location red:
    edge tube_2_traffic_light_3_mode_c_flashing goto flashing;
end
plant automaton tube_2_traffic_light_3_release_signal:
  location off:
    initial;
    marked;
    edge tube_2_traffic_light_3_release_signal_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_2_traffic_light_3_release_signal_u_off goto off;
end
plant automaton tube_2_traffic_light_3_timer_release_signal:
  location off:
    initial;
    marked;
    edge tube_2_traffic_light_3_timer_release_signal_c_on goto running;
  location running:
    edge tube_2_traffic_light_3_timer_release_signal_c_reset goto off;
    edge tube_2_traffic_light_3_timer_release_signal_u_timeout goto finished;
  location finished:
    edge tube_2_traffic_light_3_timer_release_signal_c_reset goto off;
end
plant automaton tube_2_traffic_light_3_relation:
  location:
    initial;
    marked;
    edge tube_2_traffic_light_3_release_signal_u_on when tube_2_traffic_light_3_mode.red and tube_2_traffic_light_3_timer_release_signal.finished;
    edge tube_2_traffic_light_3_release_signal_u_off when not tube_2_traffic_light_3_mode.red;
end
plant automaton tube_2_j32_mode:
  location off:
    initial;
    marked;
    edge tube_2_j32_mode_c_on goto on;
  location on:
    marked false;
    edge tube_2_j32_mode_c_off goto off;
end
plant automaton tube_2_j32_timer_release_signal:
  location off:
    initial;
    marked;
    edge tube_2_j32_timer_release_signal_c_on goto running;
  location running:
    edge tube_2_j32_timer_release_signal_c_reset goto off;
    edge tube_2_j32_timer_release_signal_u_timeout goto finished;
  location finished:
    edge tube_2_j32_timer_release_signal_c_reset goto off;
end
plant automaton tube_2_matrix_sign_traffic_light:
  location off:
    initial;
    marked;
    edge tube_2_matrix_sign_traffic_light_c_on goto on;
  location on:
    marked false;
    edge tube_2_matrix_sign_traffic_light_c_off goto off;
end
plant automaton tube_2_matrix_sign_free:
  location off:
    initial;
    marked;
    edge tube_2_matrix_sign_free_c_on goto on;
  location on:
    marked false;
    edge tube_2_matrix_sign_free_c_off goto off;
end
plant automaton tube_2_SOS:
  location off:
    initial;
    marked;
    edge tube_2_SOS_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_2_SOS_u_off goto off;
end
plant automaton tube_2_emergency_cabinet_A_sensor_open:
  location off:
    initial;
    marked;
    edge tube_2_emergency_cabinet_A_sensor_open_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_2_emergency_cabinet_A_sensor_open_u_off goto off;
end
plant automaton tube_2_emergency_cabinet_A_emergency_phone:
  location off:
    initial;
    marked;
    edge tube_2_emergency_cabinet_A_emergency_phone_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_2_emergency_cabinet_A_emergency_phone_u_off goto off;
end
plant automaton tube_2_emergency_cabinet_A_hand_extinguisher:
  location off:
    initial;
    marked;
    edge tube_2_emergency_cabinet_A_hand_extinguisher_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_2_emergency_cabinet_A_hand_extinguisher_u_off goto off;
end
plant automaton tube_2_emergency_cabinet_A_fire_hose:
  location off:
    initial;
    marked;
    edge tube_2_emergency_cabinet_A_fire_hose_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_2_emergency_cabinet_A_fire_hose_u_off goto off;
end
plant automaton tube_2_emergency_cabinet_C_sensor_open:
  location off:
    initial;
    marked;
    edge tube_2_emergency_cabinet_C_sensor_open_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_2_emergency_cabinet_C_sensor_open_u_off goto off;
end
plant automaton tube_2_emergency_cabinet_C_emergency_phone:
  location off:
    initial;
    marked;
    edge tube_2_emergency_cabinet_C_emergency_phone_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_2_emergency_cabinet_C_emergency_phone_u_off goto off;
end
plant automaton tube_2_emergency_cabinet_C_hand_extinguisher:
  location off:
    initial;
    marked;
    edge tube_2_emergency_cabinet_C_hand_extinguisher_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_2_emergency_cabinet_C_hand_extinguisher_u_off goto off;
end
plant automaton tube_2_smoke_detection:
  disc int[0..8] mode = 0;
  location:
    initial;
    marked;
    edge tube_2_smoke_detection_u_0 when not(mode = 0) do mode := 0;
    edge tube_2_smoke_detection_u_1 when not(mode = 1) do mode := 1;
    edge tube_2_smoke_detection_u_2 when not(mode = 2) do mode := 2;
    edge tube_2_smoke_detection_u_3 when not(mode = 3) do mode := 3;
    edge tube_2_smoke_detection_u_4 when not(mode = 4) do mode := 4;
    edge tube_2_smoke_detection_u_5 when not(mode = 5) do mode := 5;
    edge tube_2_smoke_detection_u_6 when not(mode = 6) do mode := 6;
    edge tube_2_smoke_detection_u_7 when not(mode = 7) do mode := 7;
    edge tube_2_smoke_detection_u_8 when not(mode = 8) do mode := 8;
end
plant automaton tube_2_ventilation:
  disc int[0..8] mode = 0;
  location:
    initial;
    marked;
    edge tube_2_ventilation_c_0 when not(mode = 0) do mode := 0;
    edge tube_2_ventilation_c_1 when not(mode = 1) do mode := 1;
    edge tube_2_ventilation_c_2 when not(mode = 2) do mode := 2;
    edge tube_2_ventilation_c_3 when not(mode = 3) do mode := 3;
    edge tube_2_ventilation_c_4 when not(mode = 4) do mode := 4;
    edge tube_2_ventilation_c_5 when not(mode = 5) do mode := 5;
    edge tube_2_ventilation_c_6 when not(mode = 6) do mode := 6;
    edge tube_2_ventilation_c_7 when not(mode = 7) do mode := 7;
    edge tube_2_ventilation_c_8 when not(mode = 8) do mode := 8;
end
plant automaton tube_2_ventilation_entrance:
  disc int[0..8] mode = 0;
  location:
    initial;
    marked;
    edge tube_2_ventilation_entrance_c_0 when not(mode = 0) do mode := 0;
    edge tube_2_ventilation_entrance_c_1 when not(mode = 1) do mode := 1;
    edge tube_2_ventilation_entrance_c_2 when not(mode = 2) do mode := 2;
    edge tube_2_ventilation_entrance_c_3 when not(mode = 3) do mode := 3;
    edge tube_2_ventilation_entrance_c_4 when not(mode = 4) do mode := 4;
    edge tube_2_ventilation_entrance_c_5 when not(mode = 5) do mode := 5;
    edge tube_2_ventilation_entrance_c_6 when not(mode = 6) do mode := 6;
    edge tube_2_ventilation_entrance_c_7 when not(mode = 7) do mode := 7;
    edge tube_2_ventilation_entrance_c_8 when not(mode = 8) do mode := 8;
end
plant automaton tube_2_ventilation_direction:
  location along:
    initial;
    marked;
    edge tube_2_ventilation_direction_c_against goto against;
  location against:
    edge tube_2_ventilation_direction_c_along goto along;
end
plant automaton tube_2_lightsensor:
  disc int[0..8] mode = 0;
  location:
    initial;
    marked;
    edge tube_2_lightsensor_u_0 when not(mode = 0) do mode := 0;
    edge tube_2_lightsensor_u_1 when not(mode = 1) do mode := 1;
    edge tube_2_lightsensor_u_2 when not(mode = 2) do mode := 2;
    edge tube_2_lightsensor_u_3 when not(mode = 3) do mode := 3;
    edge tube_2_lightsensor_u_4 when not(mode = 4) do mode := 4;
    edge tube_2_lightsensor_u_5 when not(mode = 5) do mode := 5;
    edge tube_2_lightsensor_u_6 when not(mode = 6) do mode := 6;
    edge tube_2_lightsensor_u_7 when not(mode = 7) do mode := 7;
    edge tube_2_lightsensor_u_8 when not(mode = 8) do mode := 8;
end
plant automaton tube_2_lighting:
  disc int[0..8] mode = 0;
  location:
    initial;
    marked;
    edge tube_2_lighting_c_0 when not(mode = 0) do mode := 0;
    edge tube_2_lighting_c_1 when not(mode = 1) do mode := 1;
    edge tube_2_lighting_c_2 when not(mode = 2) do mode := 2;
    edge tube_2_lighting_c_3 when not(mode = 3) do mode := 3;
    edge tube_2_lighting_c_4 when not(mode = 4) do mode := 4;
    edge tube_2_lighting_c_5 when not(mode = 5) do mode := 5;
    edge tube_2_lighting_c_6 when not(mode = 6) do mode := 6;
    edge tube_2_lighting_c_7 when not(mode = 7) do mode := 7;
    edge tube_2_lighting_c_8 when not(mode = 8) do mode := 8;
end
plant automaton tube_2_channel:
  location off:
    initial;
    marked;
    edge tube_2_channel_c_1_on goto camera_1;
    edge tube_2_channel_c_2_on goto camera_2;
    edge tube_2_channel_c_3_on goto camera_3;
    edge tube_2_channel_c_4_on goto camera_4;
    edge tube_2_channel_c_5_on goto camera_5;
    edge tube_2_channel_c_6_on goto camera_6;
  location camera_1:
    edge tube_2_channel_c_1_off goto off;
  location camera_2:
    edge tube_2_channel_c_2_off goto off;
  location camera_3:
    edge tube_2_channel_c_3_off goto off;
  location camera_4:
    edge tube_2_channel_c_4_off goto off;
  location camera_5:
    edge tube_2_channel_c_5_off goto off;
  location camera_6:
    edge tube_2_channel_c_6_off goto off;
end
plant automaton tube_2_recorder:
  location off:
    initial;
    marked;
    edge tube_2_recorder_c_on goto on;
  location on:
    marked false;
    edge tube_2_recorder_c_off goto off;
end
plant automaton tube_2_escape_door_sensor_open:
  location off:
    initial;
    marked;
    edge tube_2_escape_door_sensor_open_u_on goto on;
  location on:
    initial not true;
    marked false;
    edge tube_2_escape_door_sensor_open_u_off goto off;
end
plant automaton tube_2_escape_door_sound_beacon:
  location off:
    initial;
    marked;
    edge tube_2_escape_door_sound_beacon_c_on goto on;
  location on:
    marked false;
    edge tube_2_escape_door_sound_beacon_c_off goto off;
end
plant automaton tube_2_escape_door_contour_lighting:
  location off:
    initial;
    marked;
    edge tube_2_escape_door_contour_lighting_c_on goto on;
  location on:
    marked false;
    edge tube_2_escape_door_contour_lighting_c_off goto off;
end
plant automaton tube_2_intercom:
  location off:
    initial;
    marked;
    edge tube_2_intercom_c_on goto on;
  location on:
    marked false;
    edge tube_2_intercom_c_off goto off;
end
plant automaton tube_2_switch_timer_audio:
  location off:
    initial;
    marked;
    edge tube_2_switch_timer_audio_c_on goto on_1;
  location on_1:
    edge tube_2_switch_timer_audio_c_off goto off;
    edge tube_2_switch_timer_audio_u_timeout goto on_2;
  location on_2:
    edge tube_2_switch_timer_audio_c_off goto off;
    edge tube_2_switch_timer_audio_u_timeout goto on_1;
end
plant automaton tube_2_mode:
  location operational:
    initial;
    marked;
    edge tube_2_mode_c_emergency goto emergency;
    edge tube_2_mode_c_recovery goto recovery;
    edge tube_2_mode_c_support goto support;
  location emergency:
    edge tube_2_mode_c_recovery goto recovery;
    edge tube_2_mode_c_operational goto operational;
    edge tube_2_mode_c_support goto support;
  location recovery:
    edge tube_2_mode_c_operational goto operational;
    edge tube_2_mode_c_emergency goto emergency;
    edge tube_2_mode_c_support goto support;
  location support:
    edge tube_2_mode_c_operational goto operational;
    edge tube_2_mode_c_emergency goto emergency;
    edge tube_2_mode_c_recovery goto recovery;
end
plant automaton tube_2_standby:
  location off:
    initial;
    marked;
    edge tube_2_standby_c_on goto on;
  location on:
    marked false;
    edge tube_2_standby_c_off goto off;
end
plant automaton tube_2_evacuation:
  location off:
    initial;
    marked;
    edge tube_2_evacuation_c_on goto on;
  location on:
    marked false;
    edge tube_2_evacuation_c_off goto off;
end
plant automaton tube_2_button_operational_button:
  location:
    initial;
    marked;
    edge tube_2_button_operational_button_u_press;
end
plant automaton tube_2_button_operational_observer:
  location released:
    initial;
    marked;
    edge tube_2_button_operational_button_u_press when tube_2_mode.recovery goto pressed;
    edge tube_2_button_operational_button_u_press when not tube_2_mode.recovery;
  location pressed:
    marked;
    edge tube_2_button_operational_observer_c_done when tube_2_mode.operational goto released;
    edge tube_2_button_operational_button_u_press;
end
plant automaton tube_2_button_evacuation_button:
  location:
    initial;
    marked;
    edge tube_2_button_evacuation_button_u_press;
end
plant automaton tube_2_button_evacuation_observer:
  location released:
    initial;
    marked;
    edge tube_2_button_evacuation_button_u_press when tube_2_mode.emergency and tube_2_evacuation.off goto pressed;
    edge tube_2_button_evacuation_button_u_press when not(tube_2_mode.emergency and tube_2_evacuation.off);
  location pressed:
    marked;
    edge tube_2_button_evacuation_observer_c_done when tube_2_evacuation.on goto released;
    edge tube_2_button_evacuation_button_u_press;
end
plant automaton tube_2_button_recovery_button:
  location:
    initial;
    marked;
    edge tube_2_button_recovery_button_u_press;
end
plant automaton tube_2_button_recovery_observer:
  location released:
    initial;
    marked;
    edge tube_2_button_recovery_button_u_press when tube_2_mode.emergency goto pressed;
    edge tube_2_button_recovery_button_u_press when not tube_2_mode.emergency;
  location pressed:
    marked;
    edge tube_2_button_recovery_observer_c_done when tube_2_mode.recovery goto released;
    edge tube_2_button_recovery_button_u_press;
end
plant automaton middle_tunnel_channel_pressure:
  location off:
    initial;
    marked;
    edge middle_tunnel_channel_pressure_c_left goto left;
    edge middle_tunnel_channel_pressure_c_right goto right;
  location left:
    edge middle_tunnel_channel_pressure_c_off goto off;
    edge middle_tunnel_channel_pressure_c_right goto right;
  location right:
    edge middle_tunnel_channel_pressure_c_off goto off;
    edge middle_tunnel_channel_pressure_c_left goto left;
end
plant automaton middle_tunnel_channel_lighting:
  location off:
    initial;
    marked;
    edge middle_tunnel_channel_lighting_c_on goto on;
  location on:
    marked false;
    edge middle_tunnel_channel_lighting_c_off goto off;
end
plant automaton middle_tunnel_channel_dynamic_escaperoute_indication:
  location off:
    initial;
    marked;
    edge middle_tunnel_channel_dynamic_escaperoute_indication_c_upward goto upward;
    edge middle_tunnel_channel_dynamic_escaperoute_indication_c_downward goto downward;
  location upward:
    edge middle_tunnel_channel_dynamic_escaperoute_indication_c_off goto off;
    edge middle_tunnel_channel_dynamic_escaperoute_indication_c_downward goto downward;
  location downward:
    edge middle_tunnel_channel_dynamic_escaperoute_indication_c_off goto off;
    edge middle_tunnel_channel_dynamic_escaperoute_indication_c_upward goto upward;
end
plant automaton middle_tunnel_channel_intercom:
  location off:
    initial;
    marked;
    edge middle_tunnel_channel_intercom_c_on goto on;
  location on:
    marked false;
    edge middle_tunnel_channel_intercom_c_off goto off;
end
supervisor automaton sup1:
  alphabet tube_1_switch_timer_audio_c_on, tube_1_switch_timer_audio_c_off, tube_1_mode_c_emergency, tube_1_mode_c_recovery, tube_1_mode_c_support, tube_1_mode_c_operational, tube_1_standby_c_on, tube_1_standby_c_off, tube_1_evacuation_c_on, tube_1_evacuation_c_off, tube_1_button_operational_observer_c_done, tube_1_button_evacuation_observer_c_done, tube_1_button_recovery_observer_c_done, tube_2_switch_timer_audio_c_on, tube_2_switch_timer_audio_c_off, tube_2_mode_c_emergency, tube_2_mode_c_recovery, tube_2_mode_c_support, tube_2_mode_c_operational, tube_2_standby_c_on, tube_2_standby_c_off, tube_2_evacuation_c_on, tube_2_evacuation_c_off, tube_2_button_operational_observer_c_done, tube_2_button_evacuation_observer_c_done, tube_2_button_recovery_observer_c_done, middle_tunnel_channel_pressure_c_left, middle_tunnel_channel_pressure_c_right, middle_tunnel_channel_pressure_c_off, middle_tunnel_channel_lighting_c_on, middle_tunnel_channel_lighting_c_off, middle_tunnel_channel_dynamic_escaperoute_indication_c_upward, middle_tunnel_channel_dynamic_escaperoute_indication_c_downward, middle_tunnel_channel_dynamic_escaperoute_indication_c_off, middle_tunnel_channel_intercom_c_on, middle_tunnel_channel_intercom_c_off;
  location:
    initial;
    marked;
    edge middle_tunnel_channel_dynamic_escaperoute_indication_c_downward when true;
    edge middle_tunnel_channel_dynamic_escaperoute_indication_c_off when true;
    edge middle_tunnel_channel_dynamic_escaperoute_indication_c_upward when true;
    edge middle_tunnel_channel_intercom_c_off when true;
    edge middle_tunnel_channel_intercom_c_on when true;
    edge middle_tunnel_channel_lighting_c_off when true;
    edge middle_tunnel_channel_lighting_c_on when true;
    edge middle_tunnel_channel_pressure_c_left when true;
    edge middle_tunnel_channel_pressure_c_off when true;
    edge middle_tunnel_channel_pressure_c_right when true;
    edge tube_1_button_evacuation_observer_c_done when true;
    edge tube_1_button_operational_observer_c_done when true;
    edge tube_1_button_recovery_observer_c_done when true;
    edge tube_1_evacuation_c_off when true;
    edge tube_1_evacuation_c_on when true;
    edge tube_1_mode_c_emergency when true;
    edge tube_1_mode_c_operational when true;
    edge tube_1_mode_c_recovery when true;
    edge tube_1_mode_c_support when true;
    edge tube_1_standby_c_off when true;
    edge tube_1_standby_c_on when true;
    edge tube_1_switch_timer_audio_c_off when true;
    edge tube_1_switch_timer_audio_c_on when true;
    edge tube_2_button_evacuation_observer_c_done when true;
    edge tube_2_button_operational_observer_c_done when true;
    edge tube_2_button_recovery_observer_c_done when true;
    edge tube_2_evacuation_c_off when true;
    edge tube_2_evacuation_c_on when true;
    edge tube_2_mode_c_emergency when true;
    edge tube_2_mode_c_operational when true;
    edge tube_2_mode_c_recovery when true;
    edge tube_2_mode_c_support when true;
    edge tube_2_standby_c_off when true;
    edge tube_2_standby_c_on when true;
    edge tube_2_switch_timer_audio_c_off when true;
    edge tube_2_switch_timer_audio_c_on when true;
end
supervisor automaton sup2:
  alphabet tube_1_boom_barrier_1_actuator_up_c_on, tube_1_boom_barrier_1_actuator_up_c_off, tube_1_boom_barrier_1_actuator_down_c_on, tube_1_boom_barrier_1_actuator_down_c_off, tube_1_boom_barrier_1_actuator_down_c_off_emergency, tube_1_boom_barrier_2_actuator_up_c_on, tube_1_boom_barrier_2_actuator_up_c_off, tube_1_boom_barrier_2_actuator_down_c_on, tube_1_boom_barrier_2_actuator_down_c_off, tube_1_boom_barrier_2_actuator_down_c_off_emergency, tube_1_traffic_light_1_mode_c_flashing, tube_1_traffic_light_1_mode_c_off, tube_1_traffic_light_1_mode_c_yellow, tube_1_traffic_light_1_mode_c_red, tube_1_traffic_light_1_timer_release_signal_c_on, tube_1_traffic_light_1_timer_release_signal_c_reset, tube_1_traffic_light_2_mode_c_flashing, tube_1_traffic_light_2_mode_c_off, tube_1_traffic_light_2_mode_c_yellow, tube_1_traffic_light_2_mode_c_red, tube_1_traffic_light_2_timer_release_signal_c_on, tube_1_traffic_light_2_timer_release_signal_c_reset, tube_1_traffic_light_3_mode_c_flashing, tube_1_traffic_light_3_mode_c_off, tube_1_traffic_light_3_mode_c_yellow, tube_1_traffic_light_3_mode_c_red, tube_1_traffic_light_3_timer_release_signal_c_on, tube_1_traffic_light_3_timer_release_signal_c_reset, tube_1_j32_mode_c_on, tube_1_j32_mode_c_off, tube_1_matrix_sign_traffic_light_c_on, tube_1_matrix_sign_traffic_light_c_off, tube_1_channel_c_1_on, tube_1_channel_c_2_on, tube_1_channel_c_3_on, tube_1_channel_c_4_on, tube_1_channel_c_5_on, tube_1_channel_c_6_on, tube_1_channel_c_1_off, tube_1_channel_c_2_off, tube_1_channel_c_3_off, tube_1_channel_c_4_off, tube_1_channel_c_5_off, tube_1_channel_c_6_off, tube_1_mode_c_emergency, tube_1_mode_c_recovery, tube_1_mode_c_support, tube_1_mode_c_operational, tube_1_evacuation_c_on, tube_1_evacuation_c_off, tube_1_button_operational_observer_c_done, tube_1_button_evacuation_observer_c_done, tube_1_button_recovery_observer_c_done;
  location:
    initial;
    marked;
    edge tube_1_boom_barrier_1_actuator_down_c_off when true;
    edge tube_1_boom_barrier_1_actuator_down_c_off_emergency when true;
    edge tube_1_boom_barrier_1_actuator_down_c_on when true;
    edge tube_1_boom_barrier_1_actuator_up_c_off when true;
    edge tube_1_boom_barrier_1_actuator_up_c_on when true;
    edge tube_1_boom_barrier_2_actuator_down_c_off when true;
    edge tube_1_boom_barrier_2_actuator_down_c_off_emergency when true;
    edge tube_1_boom_barrier_2_actuator_down_c_on when true;
    edge tube_1_boom_barrier_2_actuator_up_c_off when true;
    edge tube_1_boom_barrier_2_actuator_up_c_on when true;
    edge tube_1_button_evacuation_observer_c_done when true;
    edge tube_1_button_operational_observer_c_done when true;
    edge tube_1_button_recovery_observer_c_done when true;
    edge tube_1_channel_c_1_off when true;
    edge tube_1_channel_c_1_on when true;
    edge tube_1_channel_c_2_off when true;
    edge tube_1_channel_c_2_on when true;
    edge tube_1_channel_c_3_off when true;
    edge tube_1_channel_c_3_on when true;
    edge tube_1_channel_c_4_off when true;
    edge tube_1_channel_c_4_on when true;
    edge tube_1_channel_c_5_off when true;
    edge tube_1_channel_c_5_on when true;
    edge tube_1_channel_c_6_off when true;
    edge tube_1_channel_c_6_on when true;
    edge tube_1_evacuation_c_off when true;
    edge tube_1_evacuation_c_on when true;
    edge tube_1_j32_mode_c_off when true;
    edge tube_1_j32_mode_c_on when true;
    edge tube_1_matrix_sign_traffic_light_c_off when true;
    edge tube_1_matrix_sign_traffic_light_c_on when true;
    edge tube_1_mode_c_emergency when true;
    edge tube_1_mode_c_operational when true;
    edge tube_1_mode_c_recovery when true;
    edge tube_1_mode_c_support when true;
    edge tube_1_traffic_light_1_mode_c_flashing when true;
    edge tube_1_traffic_light_1_mode_c_off when true;
    edge tube_1_traffic_light_1_mode_c_red when true;
    edge tube_1_traffic_light_1_mode_c_yellow when true;
    edge tube_1_traffic_light_1_timer_release_signal_c_on when true;
    edge tube_1_traffic_light_1_timer_release_signal_c_reset when true;
    edge tube_1_traffic_light_2_mode_c_flashing when true;
    edge tube_1_traffic_light_2_mode_c_off when true;
    edge tube_1_traffic_light_2_mode_c_red when true;
    edge tube_1_traffic_light_2_mode_c_yellow when true;
    edge tube_1_traffic_light_2_timer_release_signal_c_on when true;
    edge tube_1_traffic_light_2_timer_release_signal_c_reset when true;
    edge tube_1_traffic_light_3_mode_c_flashing when true;
    edge tube_1_traffic_light_3_mode_c_off when true;
    edge tube_1_traffic_light_3_mode_c_red when true;
    edge tube_1_traffic_light_3_mode_c_yellow when true;
    edge tube_1_traffic_light_3_timer_release_signal_c_on when true;
    edge tube_1_traffic_light_3_timer_release_signal_c_reset when true;
end
supervisor automaton sup3:
  alphabet tube_1_boom_barrier_1_actuator_up_c_on, tube_1_boom_barrier_1_actuator_up_c_off, tube_1_boom_barrier_1_actuator_down_c_on, tube_1_boom_barrier_1_actuator_down_c_off, tube_1_boom_barrier_1_actuator_down_c_off_emergency, tube_1_boom_barrier_2_actuator_up_c_on, tube_1_boom_barrier_2_actuator_up_c_off, tube_1_boom_barrier_2_actuator_down_c_on, tube_1_boom_barrier_2_actuator_down_c_off, tube_1_boom_barrier_2_actuator_down_c_off_emergency, tube_1_channel_c_1_on, tube_1_channel_c_2_on, tube_1_channel_c_3_on, tube_1_channel_c_4_on, tube_1_channel_c_5_on, tube_1_channel_c_6_on, tube_1_channel_c_1_off, tube_1_channel_c_2_off, tube_1_channel_c_3_off, tube_1_channel_c_4_off, tube_1_channel_c_5_off, tube_1_channel_c_6_off;
  location:
    initial;
    marked;
    edge tube_1_boom_barrier_1_actuator_down_c_off when true;
    edge tube_1_boom_barrier_1_actuator_down_c_off_emergency when true;
    edge tube_1_boom_barrier_1_actuator_down_c_on when true;
    edge tube_1_boom_barrier_1_actuator_up_c_off when true;
    edge tube_1_boom_barrier_1_actuator_up_c_on when true;
    edge tube_1_boom_barrier_2_actuator_down_c_off when true;
    edge tube_1_boom_barrier_2_actuator_down_c_off_emergency when true;
    edge tube_1_boom_barrier_2_actuator_down_c_on when true;
    edge tube_1_boom_barrier_2_actuator_up_c_off when true;
    edge tube_1_boom_barrier_2_actuator_up_c_on when true;
    edge tube_1_channel_c_1_off when true;
    edge tube_1_channel_c_1_on when true;
    edge tube_1_channel_c_2_off when true;
    edge tube_1_channel_c_2_on when true;
    edge tube_1_channel_c_3_off when true;
    edge tube_1_channel_c_3_on when true;
    edge tube_1_channel_c_4_off when true;
    edge tube_1_channel_c_4_on when true;
    edge tube_1_channel_c_5_off when true;
    edge tube_1_channel_c_5_on when true;
    edge tube_1_channel_c_6_off when true;
    edge tube_1_channel_c_6_on when true;
end
supervisor automaton sup4:
  alphabet tube_1_boom_barrier_1_actuator_up_c_on, tube_1_boom_barrier_1_actuator_up_c_off, tube_1_boom_barrier_1_actuator_down_c_on, tube_1_boom_barrier_1_actuator_down_c_off, tube_1_boom_barrier_1_actuator_down_c_off_emergency, tube_1_boom_barrier_2_actuator_up_c_on, tube_1_boom_barrier_2_actuator_up_c_off, tube_1_boom_barrier_2_actuator_down_c_on, tube_1_boom_barrier_2_actuator_down_c_off, tube_1_boom_barrier_2_actuator_down_c_off_emergency, tube_1_traffic_light_1_mode_c_flashing, tube_1_traffic_light_1_mode_c_off, tube_1_traffic_light_1_mode_c_yellow, tube_1_traffic_light_1_mode_c_red, tube_1_traffic_light_1_timer_release_signal_c_on, tube_1_traffic_light_1_timer_release_signal_c_reset, tube_1_traffic_light_2_mode_c_flashing, tube_1_traffic_light_2_mode_c_off, tube_1_traffic_light_2_mode_c_yellow, tube_1_traffic_light_2_mode_c_red, tube_1_traffic_light_2_timer_release_signal_c_on, tube_1_traffic_light_2_timer_release_signal_c_reset, tube_1_traffic_light_3_mode_c_flashing, tube_1_traffic_light_3_mode_c_off, tube_1_traffic_light_3_mode_c_yellow, tube_1_traffic_light_3_mode_c_red, tube_1_traffic_light_3_timer_release_signal_c_on, tube_1_traffic_light_3_timer_release_signal_c_reset;
  location:
    initial;
    marked;
    edge tube_1_boom_barrier_1_actuator_down_c_off when true;
    edge tube_1_boom_barrier_1_actuator_down_c_off_emergency when true;
    edge tube_1_boom_barrier_1_actuator_down_c_on when true;
    edge tube_1_boom_barrier_1_actuator_up_c_off when true;
    edge tube_1_boom_barrier_1_actuator_up_c_on when true;
    edge tube_1_boom_barrier_2_actuator_down_c_off when true;
    edge tube_1_boom_barrier_2_actuator_down_c_off_emergency when true;
    edge tube_1_boom_barrier_2_actuator_down_c_on when true;
    edge tube_1_boom_barrier_2_actuator_up_c_off when true;
    edge tube_1_boom_barrier_2_actuator_up_c_on when true;
    edge tube_1_traffic_light_1_mode_c_flashing when true;
    edge tube_1_traffic_light_1_mode_c_off when true;
    edge tube_1_traffic_light_1_mode_c_red when true;
    edge tube_1_traffic_light_1_mode_c_yellow when true;
    edge tube_1_traffic_light_1_timer_release_signal_c_on when true;
    edge tube_1_traffic_light_1_timer_release_signal_c_reset when true;
    edge tube_1_traffic_light_2_mode_c_flashing when true;
    edge tube_1_traffic_light_2_mode_c_off when true;
    edge tube_1_traffic_light_2_mode_c_red when true;
    edge tube_1_traffic_light_2_mode_c_yellow when true;
    edge tube_1_traffic_light_2_timer_release_signal_c_on when true;
    edge tube_1_traffic_light_2_timer_release_signal_c_reset when true;
    edge tube_1_traffic_light_3_mode_c_flashing when true;
    edge tube_1_traffic_light_3_mode_c_off when true;
    edge tube_1_traffic_light_3_mode_c_red when true;
    edge tube_1_traffic_light_3_mode_c_yellow when true;
    edge tube_1_traffic_light_3_timer_release_signal_c_on when true;
    edge tube_1_traffic_light_3_timer_release_signal_c_reset when true;
end
supervisor automaton sup5:
  alphabet tube_1_boom_barrier_1_actuator_up_c_on, tube_1_boom_barrier_1_actuator_up_c_off, tube_1_boom_barrier_1_actuator_down_c_on, tube_1_boom_barrier_1_actuator_down_c_off, tube_1_boom_barrier_1_actuator_down_c_off_emergency;
  location:
    initial;
    marked;
    edge tube_1_boom_barrier_1_actuator_down_c_off when true;
    edge tube_1_boom_barrier_1_actuator_down_c_off_emergency when true;
    edge tube_1_boom_barrier_1_actuator_down_c_on when true;
    edge tube_1_boom_barrier_1_actuator_up_c_off when true;
    edge tube_1_boom_barrier_1_actuator_up_c_on when true;
end
supervisor automaton sup6:
  alphabet tube_1_boom_barrier_1_actuator_up_c_on, tube_1_boom_barrier_1_actuator_up_c_off, tube_1_boom_barrier_1_actuator_down_c_on, tube_1_boom_barrier_1_actuator_down_c_off, tube_1_boom_barrier_1_actuator_down_c_off_emergency;
  location:
    initial;
    marked;
    edge tube_1_boom_barrier_1_actuator_down_c_off when true;
    edge tube_1_boom_barrier_1_actuator_down_c_off_emergency when true;
    edge tube_1_boom_barrier_1_actuator_down_c_on when true;
    edge tube_1_boom_barrier_1_actuator_up_c_off when true;
    edge tube_1_boom_barrier_1_actuator_up_c_on when true;
end
supervisor automaton sup8:
  alphabet tube_1_boom_barrier_2_actuator_up_c_on, tube_1_boom_barrier_2_actuator_up_c_off, tube_1_boom_barrier_2_actuator_down_c_on, tube_1_boom_barrier_2_actuator_down_c_off, tube_1_boom_barrier_2_actuator_down_c_off_emergency;
  location:
    initial;
    marked;
    edge tube_1_boom_barrier_2_actuator_down_c_off when true;
    edge tube_1_boom_barrier_2_actuator_down_c_off_emergency when true;
    edge tube_1_boom_barrier_2_actuator_down_c_on when true;
    edge tube_1_boom_barrier_2_actuator_up_c_off when true;
    edge tube_1_boom_barrier_2_actuator_up_c_on when true;
end
supervisor automaton sup9:
  alphabet tube_1_boom_barrier_2_actuator_up_c_on, tube_1_boom_barrier_2_actuator_up_c_off, tube_1_boom_barrier_2_actuator_down_c_on, tube_1_boom_barrier_2_actuator_down_c_off, tube_1_boom_barrier_2_actuator_down_c_off_emergency;
  location:
    initial;
    marked;
    edge tube_1_boom_barrier_2_actuator_down_c_off when true;
    edge tube_1_boom_barrier_2_actuator_down_c_off_emergency when true;
    edge tube_1_boom_barrier_2_actuator_down_c_on when true;
    edge tube_1_boom_barrier_2_actuator_up_c_off when true;
    edge tube_1_boom_barrier_2_actuator_up_c_on when true;
end
supervisor automaton sup11:
  alphabet tube_1_traffic_light_1_mode_c_flashing, tube_1_traffic_light_1_mode_c_off, tube_1_traffic_light_1_mode_c_yellow, tube_1_traffic_light_1_mode_c_red, tube_1_traffic_light_1_timer_release_signal_c_on, tube_1_traffic_light_1_timer_release_signal_c_reset, tube_1_traffic_light_2_mode_c_flashing, tube_1_traffic_light_2_mode_c_off, tube_1_traffic_light_2_mode_c_yellow, tube_1_traffic_light_2_mode_c_red, tube_1_traffic_light_2_timer_release_signal_c_on, tube_1_traffic_light_2_timer_release_signal_c_reset, tube_1_traffic_light_3_mode_c_flashing, tube_1_traffic_light_3_mode_c_off, tube_1_traffic_light_3_mode_c_yellow, tube_1_traffic_light_3_mode_c_red, tube_1_traffic_light_3_timer_release_signal_c_on, tube_1_traffic_light_3_timer_release_signal_c_reset, tube_1_j32_mode_c_on, tube_1_j32_mode_c_off, tube_1_j32_timer_release_signal_c_on, tube_1_j32_timer_release_signal_c_reset, tube_1_matrix_sign_traffic_light_c_on, tube_1_matrix_sign_traffic_light_c_off;
  location:
    initial;
    marked;
    edge tube_1_j32_mode_c_off when true;
    edge tube_1_j32_mode_c_on when true;
    edge tube_1_j32_timer_release_signal_c_on when true;
    edge tube_1_j32_timer_release_signal_c_reset when true;
    edge tube_1_matrix_sign_traffic_light_c_off when true;
    edge tube_1_matrix_sign_traffic_light_c_on when true;
    edge tube_1_traffic_light_1_mode_c_flashing when true;
    edge tube_1_traffic_light_1_mode_c_off when true;
    edge tube_1_traffic_light_1_mode_c_red when true;
    edge tube_1_traffic_light_1_mode_c_yellow when true;
    edge tube_1_traffic_light_1_timer_release_signal_c_on when true;
    edge tube_1_traffic_light_1_timer_release_signal_c_reset when true;
    edge tube_1_traffic_light_2_mode_c_flashing when true;
    edge tube_1_traffic_light_2_mode_c_off when true;
    edge tube_1_traffic_light_2_mode_c_red when true;
    edge tube_1_traffic_light_2_mode_c_yellow when true;
    edge tube_1_traffic_light_2_timer_release_signal_c_on when true;
    edge tube_1_traffic_light_2_timer_release_signal_c_reset when true;
    edge tube_1_traffic_light_3_mode_c_flashing when true;
    edge tube_1_traffic_light_3_mode_c_off when true;
    edge tube_1_traffic_light_3_mode_c_red when true;
    edge tube_1_traffic_light_3_mode_c_yellow when true;
    edge tube_1_traffic_light_3_timer_release_signal_c_on when true;
    edge tube_1_traffic_light_3_timer_release_signal_c_reset when true;
end
supervisor automaton sup12:
  alphabet tube_1_traffic_light_1_mode_c_flashing, tube_1_traffic_light_1_mode_c_off, tube_1_traffic_light_1_mode_c_yellow, tube_1_traffic_light_1_mode_c_red, tube_1_traffic_light_1_timer_release_signal_c_on, tube_1_traffic_light_1_timer_release_signal_c_reset;
  location:
    initial;
    marked;
    edge tube_1_traffic_light_1_mode_c_flashing when true;
    edge tube_1_traffic_light_1_mode_c_off when true;
    edge tube_1_traffic_light_1_mode_c_red when true;
    edge tube_1_traffic_light_1_mode_c_yellow when true;
    edge tube_1_traffic_light_1_timer_release_signal_c_on when true;
    edge tube_1_traffic_light_1_timer_release_signal_c_reset when true;
end
supervisor automaton sup13:
  alphabet tube_1_traffic_light_2_mode_c_flashing, tube_1_traffic_light_2_mode_c_off, tube_1_traffic_light_2_mode_c_yellow, tube_1_traffic_light_2_mode_c_red, tube_1_traffic_light_2_timer_release_signal_c_on, tube_1_traffic_light_2_timer_release_signal_c_reset;
  location:
    initial;
    marked;
    edge tube_1_traffic_light_2_mode_c_flashing when true;
    edge tube_1_traffic_light_2_mode_c_off when true;
    edge tube_1_traffic_light_2_mode_c_red when true;
    edge tube_1_traffic_light_2_mode_c_yellow when true;
    edge tube_1_traffic_light_2_timer_release_signal_c_on when true;
    edge tube_1_traffic_light_2_timer_release_signal_c_reset when true;
end
supervisor automaton sup14:
  alphabet tube_1_traffic_light_3_mode_c_flashing, tube_1_traffic_light_3_mode_c_off, tube_1_traffic_light_3_mode_c_yellow, tube_1_traffic_light_3_mode_c_red, tube_1_traffic_light_3_timer_release_signal_c_on, tube_1_traffic_light_3_timer_release_signal_c_reset;
  location:
    initial;
    marked;
    edge tube_1_traffic_light_3_mode_c_flashing when true;
    edge tube_1_traffic_light_3_mode_c_off when true;
    edge tube_1_traffic_light_3_mode_c_red when true;
    edge tube_1_traffic_light_3_mode_c_yellow when true;
    edge tube_1_traffic_light_3_timer_release_signal_c_on when true;
    edge tube_1_traffic_light_3_timer_release_signal_c_reset when true;
end
supervisor automaton sup22:
  alphabet tube_1_channel_c_1_on, tube_1_channel_c_2_on, tube_1_channel_c_3_on, tube_1_channel_c_4_on, tube_1_channel_c_5_on, tube_1_channel_c_6_on, tube_1_channel_c_1_off, tube_1_channel_c_2_off, tube_1_channel_c_3_off, tube_1_channel_c_4_off, tube_1_channel_c_5_off, tube_1_channel_c_6_off;
  location:
    initial;
    marked;
    edge tube_1_channel_c_1_off when true;
    edge tube_1_channel_c_1_on when true;
    edge tube_1_channel_c_2_off when true;
    edge tube_1_channel_c_2_on when true;
    edge tube_1_channel_c_3_off when true;
    edge tube_1_channel_c_3_on when true;
    edge tube_1_channel_c_4_off when true;
    edge tube_1_channel_c_4_on when true;
    edge tube_1_channel_c_5_off when true;
    edge tube_1_channel_c_5_on when true;
    edge tube_1_channel_c_6_off when true;
    edge tube_1_channel_c_6_on when true;
end
supervisor automaton sup26:
  alphabet tube_1_ventilation_c_0, tube_1_ventilation_c_1, tube_1_ventilation_c_2, tube_1_ventilation_c_3, tube_1_ventilation_c_4, tube_1_ventilation_c_5, tube_1_ventilation_c_6, tube_1_ventilation_c_7, tube_1_ventilation_c_8, tube_1_ventilation_entrance_c_0, tube_1_ventilation_entrance_c_1, tube_1_ventilation_entrance_c_2, tube_1_ventilation_entrance_c_3, tube_1_ventilation_entrance_c_4, tube_1_ventilation_entrance_c_5, tube_1_ventilation_entrance_c_6, tube_1_ventilation_entrance_c_7, tube_1_ventilation_entrance_c_8, tube_1_mode_c_emergency, tube_1_mode_c_recovery, tube_1_mode_c_support, tube_1_mode_c_operational, tube_1_standby_c_on, tube_1_standby_c_off, tube_1_evacuation_c_on, tube_1_evacuation_c_off, tube_1_button_operational_observer_c_done, tube_1_button_evacuation_observer_c_done, tube_1_button_recovery_observer_c_done;
  location:
    initial;
    marked;
    edge tube_1_button_evacuation_observer_c_done when true;
    edge tube_1_button_operational_observer_c_done when true;
    edge tube_1_button_recovery_observer_c_done when true;
    edge tube_1_evacuation_c_off when true;
    edge tube_1_evacuation_c_on when true;
    edge tube_1_mode_c_emergency when true;
    edge tube_1_mode_c_operational when true;
    edge tube_1_mode_c_recovery when true;
    edge tube_1_mode_c_support when true;
    edge tube_1_standby_c_off when true;
    edge tube_1_standby_c_on when true;
    edge tube_1_ventilation_c_0 when true;
    edge tube_1_ventilation_c_1 when true;
    edge tube_1_ventilation_c_2 when true;
    edge tube_1_ventilation_c_3 when true;
    edge tube_1_ventilation_c_4 when true;
    edge tube_1_ventilation_c_5 when true;
    edge tube_1_ventilation_c_6 when true;
    edge tube_1_ventilation_c_7 when true;
    edge tube_1_ventilation_c_8 when true;
    edge tube_1_ventilation_entrance_c_0 when true;
    edge tube_1_ventilation_entrance_c_1 when true;
    edge tube_1_ventilation_entrance_c_2 when true;
    edge tube_1_ventilation_entrance_c_3 when true;
    edge tube_1_ventilation_entrance_c_4 when true;
    edge tube_1_ventilation_entrance_c_5 when true;
    edge tube_1_ventilation_entrance_c_6 when true;
    edge tube_1_ventilation_entrance_c_7 when true;
    edge tube_1_ventilation_entrance_c_8 when true;
end
supervisor automaton sup27:
  alphabet tube_1_lighting_c_0, tube_1_lighting_c_1, tube_1_lighting_c_2, tube_1_lighting_c_3, tube_1_lighting_c_4, tube_1_lighting_c_5, tube_1_lighting_c_6, tube_1_lighting_c_7, tube_1_lighting_c_8, tube_1_mode_c_emergency, tube_1_mode_c_recovery, tube_1_mode_c_support, tube_1_mode_c_operational, tube_1_evacuation_c_on, tube_1_evacuation_c_off, tube_1_button_operational_observer_c_done, tube_1_button_evacuation_observer_c_done, tube_1_button_recovery_observer_c_done;
  location:
    initial;
    marked;
    edge tube_1_button_evacuation_observer_c_done when true;
    edge tube_1_button_operational_observer_c_done when true;
    edge tube_1_button_recovery_observer_c_done when true;
    edge tube_1_evacuation_c_off when true;
    edge tube_1_evacuation_c_on when true;
    edge tube_1_lighting_c_0 when true;
    edge tube_1_lighting_c_1 when true;
    edge tube_1_lighting_c_2 when true;
    edge tube_1_lighting_c_3 when true;
    edge tube_1_lighting_c_4 when true;
    edge tube_1_lighting_c_5 when true;
    edge tube_1_lighting_c_6 when true;
    edge tube_1_lighting_c_7 when true;
    edge tube_1_lighting_c_8 when true;
    edge tube_1_mode_c_emergency when true;
    edge tube_1_mode_c_operational when true;
    edge tube_1_mode_c_recovery when true;
    edge tube_1_mode_c_support when true;
end
supervisor automaton sup28:
  alphabet tube_1_lighting_c_0, tube_1_lighting_c_1, tube_1_lighting_c_2, tube_1_lighting_c_3, tube_1_lighting_c_4, tube_1_lighting_c_5, tube_1_lighting_c_6, tube_1_lighting_c_7, tube_1_lighting_c_8;
  location:
    initial;
    marked;
    edge tube_1_lighting_c_0 when true;
    edge tube_1_lighting_c_1 when true;
    edge tube_1_lighting_c_2 when true;
    edge tube_1_lighting_c_3 when true;
    edge tube_1_lighting_c_4 when true;
    edge tube_1_lighting_c_5 when true;
    edge tube_1_lighting_c_6 when true;
    edge tube_1_lighting_c_7 when true;
    edge tube_1_lighting_c_8 when true;
end
supervisor automaton sup31:
  alphabet tube_1_matrix_sign_free_c_on, tube_1_matrix_sign_free_c_off, tube_1_ventilation_direction_c_against, tube_1_ventilation_direction_c_along, tube_1_recorder_c_on, tube_1_recorder_c_off, tube_1_escape_door_contour_lighting_c_on, tube_1_escape_door_contour_lighting_c_off, tube_1_mode_c_emergency, tube_1_mode_c_recovery, tube_1_mode_c_support, tube_1_mode_c_operational, tube_1_evacuation_c_on, tube_1_evacuation_c_off, tube_1_button_operational_observer_c_done, tube_1_button_evacuation_observer_c_done, tube_1_button_recovery_observer_c_done;
  location:
    initial;
    marked;
    edge tube_1_button_evacuation_observer_c_done when true;
    edge tube_1_button_operational_observer_c_done when true;
    edge tube_1_button_recovery_observer_c_done when true;
    edge tube_1_escape_door_contour_lighting_c_off when true;
    edge tube_1_escape_door_contour_lighting_c_on when true;
    edge tube_1_evacuation_c_off when true;
    edge tube_1_evacuation_c_on when true;
    edge tube_1_matrix_sign_free_c_off when true;
    edge tube_1_matrix_sign_free_c_on when true;
    edge tube_1_mode_c_emergency when true;
    edge tube_1_mode_c_operational when true;
    edge tube_1_mode_c_recovery when true;
    edge tube_1_mode_c_support when true;
    edge tube_1_recorder_c_off when true;
    edge tube_1_recorder_c_on when true;
    edge tube_1_ventilation_direction_c_against when true;
    edge tube_1_ventilation_direction_c_along when true;
end
supervisor automaton sup36:
  alphabet tube_1_mode_c_emergency, tube_1_mode_c_recovery, tube_1_mode_c_support, tube_1_mode_c_operational, tube_1_evacuation_c_on, tube_1_evacuation_c_off, tube_1_button_operational_observer_c_done, tube_1_button_evacuation_observer_c_done, tube_1_button_recovery_observer_c_done;
  location:
    initial;
    marked;
    edge tube_1_button_evacuation_observer_c_done when true;
    edge tube_1_button_operational_observer_c_done when true;
    edge tube_1_button_recovery_observer_c_done when true;
    edge tube_1_evacuation_c_off when true;
    edge tube_1_evacuation_c_on when true;
    edge tube_1_mode_c_emergency when true;
    edge tube_1_mode_c_operational when true;
    edge tube_1_mode_c_recovery when true;
    edge tube_1_mode_c_support when true;
end
supervisor automaton sup37:
  alphabet tube_1_standby_c_on, tube_1_standby_c_off;
  location:
    initial;
    marked;
    edge tube_1_standby_c_off when true;
    edge tube_1_standby_c_on when true;
end
supervisor automaton sup44:
  alphabet tube_1_ventilation_c_0, tube_1_ventilation_c_1, tube_1_ventilation_c_2, tube_1_ventilation_c_3, tube_1_ventilation_c_4, tube_1_ventilation_c_5, tube_1_ventilation_c_6, tube_1_ventilation_c_7, tube_1_ventilation_c_8, tube_1_ventilation_entrance_c_0, tube_1_ventilation_entrance_c_1, tube_1_ventilation_entrance_c_2, tube_1_ventilation_entrance_c_3, tube_1_ventilation_entrance_c_4, tube_1_ventilation_entrance_c_5, tube_1_ventilation_entrance_c_6, tube_1_ventilation_entrance_c_7, tube_1_ventilation_entrance_c_8;
  location:
    initial;
    marked;
    edge tube_1_ventilation_c_0 when true;
    edge tube_1_ventilation_c_1 when true;
    edge tube_1_ventilation_c_2 when true;
    edge tube_1_ventilation_c_3 when true;
    edge tube_1_ventilation_c_4 when true;
    edge tube_1_ventilation_c_5 when true;
    edge tube_1_ventilation_c_6 when true;
    edge tube_1_ventilation_c_7 when true;
    edge tube_1_ventilation_c_8 when true;
    edge tube_1_ventilation_entrance_c_0 when true;
    edge tube_1_ventilation_entrance_c_1 when true;
    edge tube_1_ventilation_entrance_c_2 when true;
    edge tube_1_ventilation_entrance_c_3 when true;
    edge tube_1_ventilation_entrance_c_4 when true;
    edge tube_1_ventilation_entrance_c_5 when true;
    edge tube_1_ventilation_entrance_c_6 when true;
    edge tube_1_ventilation_entrance_c_7 when true;
    edge tube_1_ventilation_entrance_c_8 when true;
end
supervisor automaton sup49:
  alphabet tube_2_boom_barrier_1_actuator_up_c_on, tube_2_boom_barrier_1_actuator_up_c_off, tube_2_boom_barrier_1_actuator_down_c_on, tube_2_boom_barrier_1_actuator_down_c_off, tube_2_boom_barrier_1_actuator_down_c_off_emergency, tube_2_boom_barrier_2_actuator_up_c_on, tube_2_boom_barrier_2_actuator_up_c_off, tube_2_boom_barrier_2_actuator_down_c_on, tube_2_boom_barrier_2_actuator_down_c_off, tube_2_boom_barrier_2_actuator_down_c_off_emergency, tube_2_traffic_light_1_mode_c_flashing, tube_2_traffic_light_1_mode_c_off, tube_2_traffic_light_1_mode_c_yellow, tube_2_traffic_light_1_mode_c_red, tube_2_traffic_light_1_timer_release_signal_c_on, tube_2_traffic_light_1_timer_release_signal_c_reset, tube_2_traffic_light_2_mode_c_flashing, tube_2_traffic_light_2_mode_c_off, tube_2_traffic_light_2_mode_c_yellow, tube_2_traffic_light_2_mode_c_red, tube_2_traffic_light_2_timer_release_signal_c_on, tube_2_traffic_light_2_timer_release_signal_c_reset, tube_2_traffic_light_3_mode_c_flashing, tube_2_traffic_light_3_mode_c_off, tube_2_traffic_light_3_mode_c_yellow, tube_2_traffic_light_3_mode_c_red, tube_2_traffic_light_3_timer_release_signal_c_on, tube_2_traffic_light_3_timer_release_signal_c_reset, tube_2_j32_mode_c_on, tube_2_j32_mode_c_off, tube_2_matrix_sign_traffic_light_c_on, tube_2_matrix_sign_traffic_light_c_off, tube_2_channel_c_1_on, tube_2_channel_c_2_on, tube_2_channel_c_3_on, tube_2_channel_c_4_on, tube_2_channel_c_5_on, tube_2_channel_c_6_on, tube_2_channel_c_1_off, tube_2_channel_c_2_off, tube_2_channel_c_3_off, tube_2_channel_c_4_off, tube_2_channel_c_5_off, tube_2_channel_c_6_off, tube_2_mode_c_emergency, tube_2_mode_c_recovery, tube_2_mode_c_support, tube_2_mode_c_operational, tube_2_evacuation_c_on, tube_2_evacuation_c_off, tube_2_button_operational_observer_c_done, tube_2_button_evacuation_observer_c_done, tube_2_button_recovery_observer_c_done;
  location:
    initial;
    marked;
    edge tube_2_boom_barrier_1_actuator_down_c_off when true;
    edge tube_2_boom_barrier_1_actuator_down_c_off_emergency when true;
    edge tube_2_boom_barrier_1_actuator_down_c_on when true;
    edge tube_2_boom_barrier_1_actuator_up_c_off when true;
    edge tube_2_boom_barrier_1_actuator_up_c_on when true;
    edge tube_2_boom_barrier_2_actuator_down_c_off when true;
    edge tube_2_boom_barrier_2_actuator_down_c_off_emergency when true;
    edge tube_2_boom_barrier_2_actuator_down_c_on when true;
    edge tube_2_boom_barrier_2_actuator_up_c_off when true;
    edge tube_2_boom_barrier_2_actuator_up_c_on when true;
    edge tube_2_button_evacuation_observer_c_done when true;
    edge tube_2_button_operational_observer_c_done when true;
    edge tube_2_button_recovery_observer_c_done when true;
    edge tube_2_channel_c_1_off when true;
    edge tube_2_channel_c_1_on when true;
    edge tube_2_channel_c_2_off when true;
    edge tube_2_channel_c_2_on when true;
    edge tube_2_channel_c_3_off when true;
    edge tube_2_channel_c_3_on when true;
    edge tube_2_channel_c_4_off when true;
    edge tube_2_channel_c_4_on when true;
    edge tube_2_channel_c_5_off when true;
    edge tube_2_channel_c_5_on when true;
    edge tube_2_channel_c_6_off when true;
    edge tube_2_channel_c_6_on when true;
    edge tube_2_evacuation_c_off when true;
    edge tube_2_evacuation_c_on when true;
    edge tube_2_j32_mode_c_off when true;
    edge tube_2_j32_mode_c_on when true;
    edge tube_2_matrix_sign_traffic_light_c_off when true;
    edge tube_2_matrix_sign_traffic_light_c_on when true;
    edge tube_2_mode_c_emergency when true;
    edge tube_2_mode_c_operational when true;
    edge tube_2_mode_c_recovery when true;
    edge tube_2_mode_c_support when true;
    edge tube_2_traffic_light_1_mode_c_flashing when true;
    edge tube_2_traffic_light_1_mode_c_off when true;
    edge tube_2_traffic_light_1_mode_c_red when true;
    edge tube_2_traffic_light_1_mode_c_yellow when true;
    edge tube_2_traffic_light_1_timer_release_signal_c_on when true;
    edge tube_2_traffic_light_1_timer_release_signal_c_reset when true;
    edge tube_2_traffic_light_2_mode_c_flashing when true;
    edge tube_2_traffic_light_2_mode_c_off when true;
    edge tube_2_traffic_light_2_mode_c_red when true;
    edge tube_2_traffic_light_2_mode_c_yellow when true;
    edge tube_2_traffic_light_2_timer_release_signal_c_on when true;
    edge tube_2_traffic_light_2_timer_release_signal_c_reset when true;
    edge tube_2_traffic_light_3_mode_c_flashing when true;
    edge tube_2_traffic_light_3_mode_c_off when true;
    edge tube_2_traffic_light_3_mode_c_red when true;
    edge tube_2_traffic_light_3_mode_c_yellow when true;
    edge tube_2_traffic_light_3_timer_release_signal_c_on when true;
    edge tube_2_traffic_light_3_timer_release_signal_c_reset when true;
end
supervisor automaton sup50:
  alphabet tube_2_boom_barrier_1_actuator_up_c_on, tube_2_boom_barrier_1_actuator_up_c_off, tube_2_boom_barrier_1_actuator_down_c_on, tube_2_boom_barrier_1_actuator_down_c_off, tube_2_boom_barrier_1_actuator_down_c_off_emergency, tube_2_boom_barrier_2_actuator_up_c_on, tube_2_boom_barrier_2_actuator_up_c_off, tube_2_boom_barrier_2_actuator_down_c_on, tube_2_boom_barrier_2_actuator_down_c_off, tube_2_boom_barrier_2_actuator_down_c_off_emergency, tube_2_channel_c_1_on, tube_2_channel_c_2_on, tube_2_channel_c_3_on, tube_2_channel_c_4_on, tube_2_channel_c_5_on, tube_2_channel_c_6_on, tube_2_channel_c_1_off, tube_2_channel_c_2_off, tube_2_channel_c_3_off, tube_2_channel_c_4_off, tube_2_channel_c_5_off, tube_2_channel_c_6_off;
  location:
    initial;
    marked;
    edge tube_2_boom_barrier_1_actuator_down_c_off when true;
    edge tube_2_boom_barrier_1_actuator_down_c_off_emergency when true;
    edge tube_2_boom_barrier_1_actuator_down_c_on when true;
    edge tube_2_boom_barrier_1_actuator_up_c_off when true;
    edge tube_2_boom_barrier_1_actuator_up_c_on when true;
    edge tube_2_boom_barrier_2_actuator_down_c_off when true;
    edge tube_2_boom_barrier_2_actuator_down_c_off_emergency when true;
    edge tube_2_boom_barrier_2_actuator_down_c_on when true;
    edge tube_2_boom_barrier_2_actuator_up_c_off when true;
    edge tube_2_boom_barrier_2_actuator_up_c_on when true;
    edge tube_2_channel_c_1_off when true;
    edge tube_2_channel_c_1_on when true;
    edge tube_2_channel_c_2_off when true;
    edge tube_2_channel_c_2_on when true;
    edge tube_2_channel_c_3_off when true;
    edge tube_2_channel_c_3_on when true;
    edge tube_2_channel_c_4_off when true;
    edge tube_2_channel_c_4_on when true;
    edge tube_2_channel_c_5_off when true;
    edge tube_2_channel_c_5_on when true;
    edge tube_2_channel_c_6_off when true;
    edge tube_2_channel_c_6_on when true;
end
supervisor automaton sup51:
  alphabet tube_2_boom_barrier_1_actuator_up_c_on, tube_2_boom_barrier_1_actuator_up_c_off, tube_2_boom_barrier_1_actuator_down_c_on, tube_2_boom_barrier_1_actuator_down_c_off, tube_2_boom_barrier_1_actuator_down_c_off_emergency, tube_2_boom_barrier_2_actuator_up_c_on, tube_2_boom_barrier_2_actuator_up_c_off, tube_2_boom_barrier_2_actuator_down_c_on, tube_2_boom_barrier_2_actuator_down_c_off, tube_2_boom_barrier_2_actuator_down_c_off_emergency, tube_2_traffic_light_1_mode_c_flashing, tube_2_traffic_light_1_mode_c_off, tube_2_traffic_light_1_mode_c_yellow, tube_2_traffic_light_1_mode_c_red, tube_2_traffic_light_1_timer_release_signal_c_on, tube_2_traffic_light_1_timer_release_signal_c_reset, tube_2_traffic_light_2_mode_c_flashing, tube_2_traffic_light_2_mode_c_off, tube_2_traffic_light_2_mode_c_yellow, tube_2_traffic_light_2_mode_c_red, tube_2_traffic_light_2_timer_release_signal_c_on, tube_2_traffic_light_2_timer_release_signal_c_reset, tube_2_traffic_light_3_mode_c_flashing, tube_2_traffic_light_3_mode_c_off, tube_2_traffic_light_3_mode_c_yellow, tube_2_traffic_light_3_mode_c_red, tube_2_traffic_light_3_timer_release_signal_c_on, tube_2_traffic_light_3_timer_release_signal_c_reset;
  location:
    initial;
    marked;
    edge tube_2_boom_barrier_1_actuator_down_c_off when true;
    edge tube_2_boom_barrier_1_actuator_down_c_off_emergency when true;
    edge tube_2_boom_barrier_1_actuator_down_c_on when true;
    edge tube_2_boom_barrier_1_actuator_up_c_off when true;
    edge tube_2_boom_barrier_1_actuator_up_c_on when true;
    edge tube_2_boom_barrier_2_actuator_down_c_off when true;
    edge tube_2_boom_barrier_2_actuator_down_c_off_emergency when true;
    edge tube_2_boom_barrier_2_actuator_down_c_on when true;
    edge tube_2_boom_barrier_2_actuator_up_c_off when true;
    edge tube_2_boom_barrier_2_actuator_up_c_on when true;
    edge tube_2_traffic_light_1_mode_c_flashing when true;
    edge tube_2_traffic_light_1_mode_c_off when true;
    edge tube_2_traffic_light_1_mode_c_red when true;
    edge tube_2_traffic_light_1_mode_c_yellow when true;
    edge tube_2_traffic_light_1_timer_release_signal_c_on when true;
    edge tube_2_traffic_light_1_timer_release_signal_c_reset when true;
    edge tube_2_traffic_light_2_mode_c_flashing when true;
    edge tube_2_traffic_light_2_mode_c_off when true;
    edge tube_2_traffic_light_2_mode_c_red when true;
    edge tube_2_traffic_light_2_mode_c_yellow when true;
    edge tube_2_traffic_light_2_timer_release_signal_c_on when true;
    edge tube_2_traffic_light_2_timer_release_signal_c_reset when true;
    edge tube_2_traffic_light_3_mode_c_flashing when true;
    edge tube_2_traffic_light_3_mode_c_off when true;
    edge tube_2_traffic_light_3_mode_c_red when true;
    edge tube_2_traffic_light_3_mode_c_yellow when true;
    edge tube_2_traffic_light_3_timer_release_signal_c_on when true;
    edge tube_2_traffic_light_3_timer_release_signal_c_reset when true;
end
supervisor automaton sup52:
  alphabet tube_2_boom_barrier_1_actuator_up_c_on, tube_2_boom_barrier_1_actuator_up_c_off, tube_2_boom_barrier_1_actuator_down_c_on, tube_2_boom_barrier_1_actuator_down_c_off, tube_2_boom_barrier_1_actuator_down_c_off_emergency;
  location:
    initial;
    marked;
    edge tube_2_boom_barrier_1_actuator_down_c_off when true;
    edge tube_2_boom_barrier_1_actuator_down_c_off_emergency when true;
    edge tube_2_boom_barrier_1_actuator_down_c_on when true;
    edge tube_2_boom_barrier_1_actuator_up_c_off when true;
    edge tube_2_boom_barrier_1_actuator_up_c_on when true;
end
supervisor automaton sup53:
  alphabet tube_2_boom_barrier_1_actuator_up_c_on, tube_2_boom_barrier_1_actuator_up_c_off, tube_2_boom_barrier_1_actuator_down_c_on, tube_2_boom_barrier_1_actuator_down_c_off, tube_2_boom_barrier_1_actuator_down_c_off_emergency;
  location:
    initial;
    marked;
    edge tube_2_boom_barrier_1_actuator_down_c_off when true;
    edge tube_2_boom_barrier_1_actuator_down_c_off_emergency when true;
    edge tube_2_boom_barrier_1_actuator_down_c_on when true;
    edge tube_2_boom_barrier_1_actuator_up_c_off when true;
    edge tube_2_boom_barrier_1_actuator_up_c_on when true;
end
supervisor automaton sup55:
  alphabet tube_2_boom_barrier_2_actuator_up_c_on, tube_2_boom_barrier_2_actuator_up_c_off, tube_2_boom_barrier_2_actuator_down_c_on, tube_2_boom_barrier_2_actuator_down_c_off, tube_2_boom_barrier_2_actuator_down_c_off_emergency;
  location:
    initial;
    marked;
    edge tube_2_boom_barrier_2_actuator_down_c_off when true;
    edge tube_2_boom_barrier_2_actuator_down_c_off_emergency when true;
    edge tube_2_boom_barrier_2_actuator_down_c_on when true;
    edge tube_2_boom_barrier_2_actuator_up_c_off when true;
    edge tube_2_boom_barrier_2_actuator_up_c_on when true;
end
supervisor automaton sup56:
  alphabet tube_2_boom_barrier_2_actuator_up_c_on, tube_2_boom_barrier_2_actuator_up_c_off, tube_2_boom_barrier_2_actuator_down_c_on, tube_2_boom_barrier_2_actuator_down_c_off, tube_2_boom_barrier_2_actuator_down_c_off_emergency;
  location:
    initial;
    marked;
    edge tube_2_boom_barrier_2_actuator_down_c_off when true;
    edge tube_2_boom_barrier_2_actuator_down_c_off_emergency when true;
    edge tube_2_boom_barrier_2_actuator_down_c_on when true;
    edge tube_2_boom_barrier_2_actuator_up_c_off when true;
    edge tube_2_boom_barrier_2_actuator_up_c_on when true;
end
supervisor automaton sup58:
  alphabet tube_2_traffic_light_1_mode_c_flashing, tube_2_traffic_light_1_mode_c_off, tube_2_traffic_light_1_mode_c_yellow, tube_2_traffic_light_1_mode_c_red, tube_2_traffic_light_1_timer_release_signal_c_on, tube_2_traffic_light_1_timer_release_signal_c_reset, tube_2_traffic_light_2_mode_c_flashing, tube_2_traffic_light_2_mode_c_off, tube_2_traffic_light_2_mode_c_yellow, tube_2_traffic_light_2_mode_c_red, tube_2_traffic_light_2_timer_release_signal_c_on, tube_2_traffic_light_2_timer_release_signal_c_reset, tube_2_traffic_light_3_mode_c_flashing, tube_2_traffic_light_3_mode_c_off, tube_2_traffic_light_3_mode_c_yellow, tube_2_traffic_light_3_mode_c_red, tube_2_traffic_light_3_timer_release_signal_c_on, tube_2_traffic_light_3_timer_release_signal_c_reset, tube_2_j32_mode_c_on, tube_2_j32_mode_c_off, tube_2_j32_timer_release_signal_c_on, tube_2_j32_timer_release_signal_c_reset, tube_2_matrix_sign_traffic_light_c_on, tube_2_matrix_sign_traffic_light_c_off;
  location:
    initial;
    marked;
    edge tube_2_j32_mode_c_off when true;
    edge tube_2_j32_mode_c_on when true;
    edge tube_2_j32_timer_release_signal_c_on when true;
    edge tube_2_j32_timer_release_signal_c_reset when true;
    edge tube_2_matrix_sign_traffic_light_c_off when true;
    edge tube_2_matrix_sign_traffic_light_c_on when true;
    edge tube_2_traffic_light_1_mode_c_flashing when true;
    edge tube_2_traffic_light_1_mode_c_off when true;
    edge tube_2_traffic_light_1_mode_c_red when true;
    edge tube_2_traffic_light_1_mode_c_yellow when true;
    edge tube_2_traffic_light_1_timer_release_signal_c_on when true;
    edge tube_2_traffic_light_1_timer_release_signal_c_reset when true;
    edge tube_2_traffic_light_2_mode_c_flashing when true;
    edge tube_2_traffic_light_2_mode_c_off when true;
    edge tube_2_traffic_light_2_mode_c_red when true;
    edge tube_2_traffic_light_2_mode_c_yellow when true;
    edge tube_2_traffic_light_2_timer_release_signal_c_on when true;
    edge tube_2_traffic_light_2_timer_release_signal_c_reset when true;
    edge tube_2_traffic_light_3_mode_c_flashing when true;
    edge tube_2_traffic_light_3_mode_c_off when true;
    edge tube_2_traffic_light_3_mode_c_red when true;
    edge tube_2_traffic_light_3_mode_c_yellow when true;
    edge tube_2_traffic_light_3_timer_release_signal_c_on when true;
    edge tube_2_traffic_light_3_timer_release_signal_c_reset when true;
end
supervisor automaton sup59:
  alphabet tube_2_traffic_light_1_mode_c_flashing, tube_2_traffic_light_1_mode_c_off, tube_2_traffic_light_1_mode_c_yellow, tube_2_traffic_light_1_mode_c_red, tube_2_traffic_light_1_timer_release_signal_c_on, tube_2_traffic_light_1_timer_release_signal_c_reset;
  location:
    initial;
    marked;
    edge tube_2_traffic_light_1_mode_c_flashing when true;
    edge tube_2_traffic_light_1_mode_c_off when true;
    edge tube_2_traffic_light_1_mode_c_red when true;
    edge tube_2_traffic_light_1_mode_c_yellow when true;
    edge tube_2_traffic_light_1_timer_release_signal_c_on when true;
    edge tube_2_traffic_light_1_timer_release_signal_c_reset when true;
end
supervisor automaton sup60:
  alphabet tube_2_traffic_light_2_mode_c_flashing, tube_2_traffic_light_2_mode_c_off, tube_2_traffic_light_2_mode_c_yellow, tube_2_traffic_light_2_mode_c_red, tube_2_traffic_light_2_timer_release_signal_c_on, tube_2_traffic_light_2_timer_release_signal_c_reset;
  location:
    initial;
    marked;
    edge tube_2_traffic_light_2_mode_c_flashing when true;
    edge tube_2_traffic_light_2_mode_c_off when true;
    edge tube_2_traffic_light_2_mode_c_red when true;
    edge tube_2_traffic_light_2_mode_c_yellow when true;
    edge tube_2_traffic_light_2_timer_release_signal_c_on when true;
    edge tube_2_traffic_light_2_timer_release_signal_c_reset when true;
end
supervisor automaton sup61:
  alphabet tube_2_traffic_light_3_mode_c_flashing, tube_2_traffic_light_3_mode_c_off, tube_2_traffic_light_3_mode_c_yellow, tube_2_traffic_light_3_mode_c_red, tube_2_traffic_light_3_timer_release_signal_c_on, tube_2_traffic_light_3_timer_release_signal_c_reset;
  location:
    initial;
    marked;
    edge tube_2_traffic_light_3_mode_c_flashing when true;
    edge tube_2_traffic_light_3_mode_c_off when true;
    edge tube_2_traffic_light_3_mode_c_red when true;
    edge tube_2_traffic_light_3_mode_c_yellow when true;
    edge tube_2_traffic_light_3_timer_release_signal_c_on when true;
    edge tube_2_traffic_light_3_timer_release_signal_c_reset when true;
end
supervisor automaton sup69:
  alphabet tube_2_channel_c_1_on, tube_2_channel_c_2_on, tube_2_channel_c_3_on, tube_2_channel_c_4_on, tube_2_channel_c_5_on, tube_2_channel_c_6_on, tube_2_channel_c_1_off, tube_2_channel_c_2_off, tube_2_channel_c_3_off, tube_2_channel_c_4_off, tube_2_channel_c_5_off, tube_2_channel_c_6_off;
  location:
    initial;
    marked;
    edge tube_2_channel_c_1_off when true;
    edge tube_2_channel_c_1_on when true;
    edge tube_2_channel_c_2_off when true;
    edge tube_2_channel_c_2_on when true;
    edge tube_2_channel_c_3_off when true;
    edge tube_2_channel_c_3_on when true;
    edge tube_2_channel_c_4_off when true;
    edge tube_2_channel_c_4_on when true;
    edge tube_2_channel_c_5_off when true;
    edge tube_2_channel_c_5_on when true;
    edge tube_2_channel_c_6_off when true;
    edge tube_2_channel_c_6_on when true;
end
supervisor automaton sup73:
  alphabet tube_2_ventilation_c_0, tube_2_ventilation_c_1, tube_2_ventilation_c_2, tube_2_ventilation_c_3, tube_2_ventilation_c_4, tube_2_ventilation_c_5, tube_2_ventilation_c_6, tube_2_ventilation_c_7, tube_2_ventilation_c_8, tube_2_ventilation_entrance_c_0, tube_2_ventilation_entrance_c_1, tube_2_ventilation_entrance_c_2, tube_2_ventilation_entrance_c_3, tube_2_ventilation_entrance_c_4, tube_2_ventilation_entrance_c_5, tube_2_ventilation_entrance_c_6, tube_2_ventilation_entrance_c_7, tube_2_ventilation_entrance_c_8, tube_2_switch_timer_audio_c_on, tube_2_switch_timer_audio_c_off, tube_2_mode_c_emergency, tube_2_mode_c_recovery, tube_2_mode_c_support, tube_2_mode_c_operational, tube_2_standby_c_on, tube_2_standby_c_off, tube_2_evacuation_c_on, tube_2_evacuation_c_off, tube_2_button_operational_observer_c_done, tube_2_button_evacuation_observer_c_done, tube_2_button_recovery_observer_c_done, middle_tunnel_channel_pressure_c_left, middle_tunnel_channel_pressure_c_right, middle_tunnel_channel_pressure_c_off, middle_tunnel_channel_lighting_c_on, middle_tunnel_channel_lighting_c_off, middle_tunnel_channel_intercom_c_on, middle_tunnel_channel_intercom_c_off;
  location:
    initial;
    marked;
    edge middle_tunnel_channel_intercom_c_off when true;
    edge middle_tunnel_channel_intercom_c_on when true;
    edge middle_tunnel_channel_lighting_c_off when true;
    edge middle_tunnel_channel_lighting_c_on when true;
    edge middle_tunnel_channel_pressure_c_left when true;
    edge middle_tunnel_channel_pressure_c_off when true;
    edge middle_tunnel_channel_pressure_c_right when true;
    edge tube_2_button_evacuation_observer_c_done when true;
    edge tube_2_button_operational_observer_c_done when true;
    edge tube_2_button_recovery_observer_c_done when true;
    edge tube_2_evacuation_c_off when true;
    edge tube_2_evacuation_c_on when true;
    edge tube_2_mode_c_emergency when true;
    edge tube_2_mode_c_operational when true;
    edge tube_2_mode_c_recovery when true;
    edge tube_2_mode_c_support when true;
    edge tube_2_standby_c_off when true;
    edge tube_2_standby_c_on when true;
    edge tube_2_switch_timer_audio_c_off when true;
    edge tube_2_switch_timer_audio_c_on when true;
    edge tube_2_ventilation_c_0 when true;
    edge tube_2_ventilation_c_1 when true;
    edge tube_2_ventilation_c_2 when true;
    edge tube_2_ventilation_c_3 when true;
    edge tube_2_ventilation_c_4 when true;
    edge tube_2_ventilation_c_5 when true;
    edge tube_2_ventilation_c_6 when true;
    edge tube_2_ventilation_c_7 when true;
    edge tube_2_ventilation_c_8 when true;
    edge tube_2_ventilation_entrance_c_0 when true;
    edge tube_2_ventilation_entrance_c_1 when true;
    edge tube_2_ventilation_entrance_c_2 when true;
    edge tube_2_ventilation_entrance_c_3 when true;
    edge tube_2_ventilation_entrance_c_4 when true;
    edge tube_2_ventilation_entrance_c_5 when true;
    edge tube_2_ventilation_entrance_c_6 when true;
    edge tube_2_ventilation_entrance_c_7 when true;
    edge tube_2_ventilation_entrance_c_8 when true;
end
supervisor automaton sup76:
  alphabet tube_1_escape_door_sound_beacon_c_on, tube_1_escape_door_sound_beacon_c_off, tube_1_intercom_c_on, tube_1_intercom_c_off, tube_1_switch_timer_audio_c_on, tube_1_switch_timer_audio_c_off;
  location:
    initial;
    marked;
    edge tube_1_escape_door_sound_beacon_c_off when true;
    edge tube_1_escape_door_sound_beacon_c_on when true;
    edge tube_1_intercom_c_off when true;
    edge tube_1_intercom_c_on when true;
    edge tube_1_switch_timer_audio_c_off when true;
    edge tube_1_switch_timer_audio_c_on when true;
end
supervisor automaton sup80:
  alphabet tube_2_escape_door_sound_beacon_c_on, tube_2_escape_door_sound_beacon_c_off, tube_2_intercom_c_on, tube_2_intercom_c_off, tube_2_switch_timer_audio_c_on, tube_2_switch_timer_audio_c_off;
  location:
    initial;
    marked;
    edge tube_2_escape_door_sound_beacon_c_off when true;
    edge tube_2_escape_door_sound_beacon_c_on when true;
    edge tube_2_intercom_c_off when true;
    edge tube_2_intercom_c_on when true;
    edge tube_2_switch_timer_audio_c_off when true;
    edge tube_2_switch_timer_audio_c_on when true;
end
supervisor automaton sup91:
  alphabet tube_2_ventilation_c_0, tube_2_ventilation_c_1, tube_2_ventilation_c_2, tube_2_ventilation_c_3, tube_2_ventilation_c_4, tube_2_ventilation_c_5, tube_2_ventilation_c_6, tube_2_ventilation_c_7, tube_2_ventilation_c_8, tube_2_ventilation_entrance_c_0, tube_2_ventilation_entrance_c_1, tube_2_ventilation_entrance_c_2, tube_2_ventilation_entrance_c_3, tube_2_ventilation_entrance_c_4, tube_2_ventilation_entrance_c_5, tube_2_ventilation_entrance_c_6, tube_2_ventilation_entrance_c_7, tube_2_ventilation_entrance_c_8;
  location:
    initial;
    marked;
    edge tube_2_ventilation_c_0 when true;
    edge tube_2_ventilation_c_1 when true;
    edge tube_2_ventilation_c_2 when true;
    edge tube_2_ventilation_c_3 when true;
    edge tube_2_ventilation_c_4 when true;
    edge tube_2_ventilation_c_5 when true;
    edge tube_2_ventilation_c_6 when true;
    edge tube_2_ventilation_c_7 when true;
    edge tube_2_ventilation_c_8 when true;
    edge tube_2_ventilation_entrance_c_0 when true;
    edge tube_2_ventilation_entrance_c_1 when true;
    edge tube_2_ventilation_entrance_c_2 when true;
    edge tube_2_ventilation_entrance_c_3 when true;
    edge tube_2_ventilation_entrance_c_4 when true;
    edge tube_2_ventilation_entrance_c_5 when true;
    edge tube_2_ventilation_entrance_c_6 when true;
    edge tube_2_ventilation_entrance_c_7 when true;
    edge tube_2_ventilation_entrance_c_8 when true;
end
supervisor automaton sup95:
  alphabet tube_2_lighting_c_0, tube_2_lighting_c_1, tube_2_lighting_c_2, tube_2_lighting_c_3, tube_2_lighting_c_4, tube_2_lighting_c_5, tube_2_lighting_c_6, tube_2_lighting_c_7, tube_2_lighting_c_8, tube_2_mode_c_emergency, tube_2_mode_c_recovery, tube_2_mode_c_support, tube_2_mode_c_operational, tube_2_evacuation_c_on, tube_2_evacuation_c_off, tube_2_button_operational_observer_c_done, tube_2_button_evacuation_observer_c_done, tube_2_button_recovery_observer_c_done;
  location:
    initial;
    marked;
    edge tube_2_button_evacuation_observer_c_done when true;
    edge tube_2_button_operational_observer_c_done when true;
    edge tube_2_button_recovery_observer_c_done when true;
    edge tube_2_evacuation_c_off when true;
    edge tube_2_evacuation_c_on when true;
    edge tube_2_lighting_c_0 when true;
    edge tube_2_lighting_c_1 when true;
    edge tube_2_lighting_c_2 when true;
    edge tube_2_lighting_c_3 when true;
    edge tube_2_lighting_c_4 when true;
    edge tube_2_lighting_c_5 when true;
    edge tube_2_lighting_c_6 when true;
    edge tube_2_lighting_c_7 when true;
    edge tube_2_lighting_c_8 when true;
    edge tube_2_mode_c_emergency when true;
    edge tube_2_mode_c_operational when true;
    edge tube_2_mode_c_recovery when true;
    edge tube_2_mode_c_support when true;
end
supervisor automaton sup96:
  alphabet tube_2_lighting_c_0, tube_2_lighting_c_1, tube_2_lighting_c_2, tube_2_lighting_c_3, tube_2_lighting_c_4, tube_2_lighting_c_5, tube_2_lighting_c_6, tube_2_lighting_c_7, tube_2_lighting_c_8;
  location:
    initial;
    marked;
    edge tube_2_lighting_c_0 when true;
    edge tube_2_lighting_c_1 when true;
    edge tube_2_lighting_c_2 when true;
    edge tube_2_lighting_c_3 when true;
    edge tube_2_lighting_c_4 when true;
    edge tube_2_lighting_c_5 when true;
    edge tube_2_lighting_c_6 when true;
    edge tube_2_lighting_c_7 when true;
    edge tube_2_lighting_c_8 when true;
end
supervisor automaton sup99:
  alphabet tube_2_matrix_sign_free_c_on, tube_2_matrix_sign_free_c_off, tube_2_ventilation_direction_c_against, tube_2_ventilation_direction_c_along, tube_2_recorder_c_on, tube_2_recorder_c_off, tube_2_escape_door_contour_lighting_c_on, tube_2_escape_door_contour_lighting_c_off, tube_2_mode_c_emergency, tube_2_mode_c_recovery, tube_2_mode_c_support, tube_2_mode_c_operational, tube_2_evacuation_c_on, tube_2_evacuation_c_off, tube_2_button_operational_observer_c_done, tube_2_button_evacuation_observer_c_done, tube_2_button_recovery_observer_c_done, middle_tunnel_channel_dynamic_escaperoute_indication_c_upward, middle_tunnel_channel_dynamic_escaperoute_indication_c_downward, middle_tunnel_channel_dynamic_escaperoute_indication_c_off;
  location:
    initial;
    marked;
    edge middle_tunnel_channel_dynamic_escaperoute_indication_c_downward when true;
    edge middle_tunnel_channel_dynamic_escaperoute_indication_c_off when true;
    edge middle_tunnel_channel_dynamic_escaperoute_indication_c_upward when true;
    edge tube_2_button_evacuation_observer_c_done when true;
    edge tube_2_button_operational_observer_c_done when true;
    edge tube_2_button_recovery_observer_c_done when true;
    edge tube_2_escape_door_contour_lighting_c_off when true;
    edge tube_2_escape_door_contour_lighting_c_on when true;
    edge tube_2_evacuation_c_off when true;
    edge tube_2_evacuation_c_on when true;
    edge tube_2_matrix_sign_free_c_off when true;
    edge tube_2_matrix_sign_free_c_on when true;
    edge tube_2_mode_c_emergency when true;
    edge tube_2_mode_c_operational when true;
    edge tube_2_mode_c_recovery when true;
    edge tube_2_mode_c_support when true;
    edge tube_2_recorder_c_off when true;
    edge tube_2_recorder_c_on when true;
    edge tube_2_ventilation_direction_c_against when true;
    edge tube_2_ventilation_direction_c_along when true;
end
supervisor automaton sup104:
  alphabet tube_2_mode_c_emergency, tube_2_mode_c_recovery, tube_2_mode_c_support, tube_2_mode_c_operational, tube_2_evacuation_c_on, tube_2_evacuation_c_off, tube_2_button_operational_observer_c_done, tube_2_button_evacuation_observer_c_done, tube_2_button_recovery_observer_c_done;
  location:
    initial;
    marked;
    edge tube_2_button_evacuation_observer_c_done when true;
    edge tube_2_button_operational_observer_c_done when true;
    edge tube_2_button_recovery_observer_c_done when true;
    edge tube_2_evacuation_c_off when true;
    edge tube_2_evacuation_c_on when true;
    edge tube_2_mode_c_emergency when true;
    edge tube_2_mode_c_operational when true;
    edge tube_2_mode_c_recovery when true;
    edge tube_2_mode_c_support when true;
end
supervisor automaton sup105:
  alphabet middle_tunnel_channel_dynamic_escaperoute_indication_c_upward, middle_tunnel_channel_dynamic_escaperoute_indication_c_downward, middle_tunnel_channel_dynamic_escaperoute_indication_c_off;
  location:
    initial;
    marked;
    edge middle_tunnel_channel_dynamic_escaperoute_indication_c_downward when true;
    edge middle_tunnel_channel_dynamic_escaperoute_indication_c_off when true;
    edge middle_tunnel_channel_dynamic_escaperoute_indication_c_upward when true;
end
supervisor automaton sup106:
  alphabet tube_2_standby_c_on, tube_2_standby_c_off, middle_tunnel_channel_pressure_c_left, middle_tunnel_channel_pressure_c_right, middle_tunnel_channel_pressure_c_off, middle_tunnel_channel_lighting_c_on, middle_tunnel_channel_lighting_c_off;
  location:
    initial;
    marked;
    edge middle_tunnel_channel_lighting_c_off when true;
    edge middle_tunnel_channel_lighting_c_on when true;
    edge middle_tunnel_channel_pressure_c_left when true;
    edge middle_tunnel_channel_pressure_c_off when true;
    edge middle_tunnel_channel_pressure_c_right when true;
    edge tube_2_standby_c_off when true;
    edge tube_2_standby_c_on when true;
end
supervisor automaton sup108:
  alphabet middle_tunnel_channel_pressure_c_left, middle_tunnel_channel_pressure_c_right, middle_tunnel_channel_pressure_c_off;
  location:
    initial;
    marked;
    edge middle_tunnel_channel_pressure_c_left when true;
    edge middle_tunnel_channel_pressure_c_off when true;
    edge middle_tunnel_channel_pressure_c_right when true;
end
group hybrid_tube_1:
  alg bool up_1 = tube_1.boom_barrier_1.open;
  alg bool down_1 = tube_1.boom_barrier_1.closed;
  alg bool up_2 = tube_1.boom_barrier_2.open;
  alg bool down_2 = tube_1.boom_barrier_2.closed;
  group hybrid_boom_barrier_1:
    cont height = 300.0;
    const int[300..300] height_up = 300;
    const int[0..0] height_down = 0;
    alg bool up = up_1;
    alg bool down = down_1;
    plant automaton position_boombarrier_observer:
      location:
        initial;
        marked;
        edge tube_1.boom_barrier_1.sensor_open.u_off when height < height_up;
        edge tube_1.boom_barrier_1.sensor_open.u_on when height > height_up;
        edge tube_1.boom_barrier_1.sensor_closed.u_off when height > height_down;
        edge tube_1.boom_barrier_1.sensor_closed.u_on when height < height_down;
    end
    equation height' = if tube_1.boom_barrier_1.actuator_up.on and not up: 100.0 elif tube_1.boom_barrier_1.actuator_down.on and not down: -100.0 else 0.0 end;
  end
  group hybrid_boom_barrier_2:
    cont height = 300.0;
    const int[300..300] height_up = 300;
    const int[0..0] height_down = 0;
    alg bool up = up_2;
    alg bool down = down_2;
    plant automaton position_boombarrier_observer:
      location:
        initial;
        marked;
        edge tube_1.boom_barrier_2.sensor_open.u_off when height < height_up;
        edge tube_1.boom_barrier_2.sensor_open.u_on when height > height_up;
        edge tube_1.boom_barrier_2.sensor_closed.u_off when height > height_down;
        edge tube_1.boom_barrier_2.sensor_closed.u_on when height < height_down;
    end
    equation height' = if tube_1.boom_barrier_2.actuator_up.on and not up: 100.0 elif tube_1.boom_barrier_2.actuator_down.on and not down: -100.0 else 0.0 end;
  end
  group hybrid_traffic_light_1:
    plant automaton timer_yellow:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_flashing:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_red:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_release_signal:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_traffic_light:
      cont t = 0.0;
      const int[6..6] t_flashing = 6;
      const int[6..6] t_yellow = 6;
      const int[6..6] t_red = 6;
      const int[4..4] t_release_signal = 4;
      equation t' = 1.0;
      location main:
        initial;
        marked;
        edge tube_1.traffic_light_1.mode.c_off, tube_1.traffic_light_1.mode.c_yellow, tube_1.traffic_light_1.mode.c_flashing, tube_1.traffic_light_1.mode.c_red do t := 0.0;
        edge tube_1.traffic_light_1.release_signal.u_on do t := 0.0 goto red_released;
      location red_released:
        edge tube_1.traffic_light_1.release_signal.u_off goto main;
    end
    plant automaton mode:
      location main:
        initial;
        marked;
        edge tube_1.traffic_light_1.mode.c_off when timer_flashing.finished;
        edge tube_1.traffic_light_1.mode.c_flashing when tube_1.traffic_light_1.mode.off and tube_1.j32.timer_release_signal.finished or tube_1.traffic_light_1.mode.yellow and timer_yellow.finished or tube_1.traffic_light_1.mode.red and timer_red.finished;
        edge tube_1.traffic_light_1.mode.c_yellow when timer_flashing.finished;
        edge tube_1.traffic_light_1.mode.c_red when timer_yellow.finished;
        edge tube_1.traffic_light_1.release_signal.u_on when timer_release_signal.finished;
    end
    plant automaton timer_flash:
      controllable c_on;
      controllable c_off;
      cont t = 0.0;
      equation t' = 1.0;
      location off:
        initial;
        marked;
        edge c_on when tube_1.traffic_light_1.mode.flashing and t > 0.5 do t := 0.0 goto on;
      location on:
        edge c_off when not tube_1.traffic_light_1.mode.flashing or t > 0.5 do t := 0.0 goto off;
    end
    invariant timer_yellow.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_yellow and tube_1.traffic_light_1.mode.yellow;
    invariant timer_flashing.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_flashing and tube_1.traffic_light_1.mode.flashing;
    invariant timer_red.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_red and tube_1.traffic_light_1.mode.red;
    invariant timer_release_signal.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_release_signal and tube_1.traffic_light_1.mode.red;
    invariant timer_yellow.c_on needs tube_1.traffic_light_1.mode.yellow;
    invariant timer_flashing.c_on needs tube_1.traffic_light_1.mode.flashing;
    invariant timer_red.c_on needs tube_1.traffic_light_1.mode.red;
    invariant timer_release_signal.c_on needs tube_1.traffic_light_1.mode.red;
    invariant timer_yellow.c_reset needs not tube_1.traffic_light_1.mode.yellow;
    invariant timer_flashing.c_reset needs not tube_1.traffic_light_1.mode.flashing;
    invariant timer_red.c_reset needs not tube_1.traffic_light_1.mode.red;
    invariant timer_release_signal.c_reset needs not tube_1.traffic_light_1.mode.red;
  end
  group hybrid_traffic_light_2:
    plant automaton timer_yellow:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_flashing:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_red:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_release_signal:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_traffic_light:
      cont t = 0.0;
      const int[6..6] t_flashing = 6;
      const int[6..6] t_yellow = 6;
      const int[6..6] t_red = 6;
      const int[4..4] t_release_signal = 4;
      equation t' = 1.0;
      location main:
        initial;
        marked;
        edge tube_1.traffic_light_2.mode.c_off, tube_1.traffic_light_2.mode.c_yellow, tube_1.traffic_light_2.mode.c_flashing, tube_1.traffic_light_2.mode.c_red do t := 0.0;
        edge tube_1.traffic_light_2.release_signal.u_on do t := 0.0 goto red_released;
      location red_released:
        edge tube_1.traffic_light_2.release_signal.u_off goto main;
    end
    plant automaton mode:
      location main:
        initial;
        marked;
        edge tube_1.traffic_light_2.mode.c_off when timer_flashing.finished;
        edge tube_1.traffic_light_2.mode.c_flashing when tube_1.traffic_light_2.mode.off and tube_1.j32.timer_release_signal.finished or tube_1.traffic_light_2.mode.yellow and timer_yellow.finished or tube_1.traffic_light_2.mode.red and timer_red.finished;
        edge tube_1.traffic_light_2.mode.c_yellow when timer_flashing.finished;
        edge tube_1.traffic_light_2.mode.c_red when timer_yellow.finished;
        edge tube_1.traffic_light_2.release_signal.u_on when timer_release_signal.finished;
    end
    plant automaton timer_flash:
      controllable c_on;
      controllable c_off;
      cont t = 0.0;
      equation t' = 1.0;
      location off:
        initial;
        marked;
        edge c_on when tube_1.traffic_light_2.mode.flashing and t > 0.5 do t := 0.0 goto on;
      location on:
        edge c_off when not tube_1.traffic_light_2.mode.flashing or t > 0.5 do t := 0.0 goto off;
    end
    invariant timer_yellow.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_yellow and tube_1.traffic_light_2.mode.yellow;
    invariant timer_flashing.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_flashing and tube_1.traffic_light_2.mode.flashing;
    invariant timer_red.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_red and tube_1.traffic_light_2.mode.red;
    invariant timer_release_signal.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_release_signal and tube_1.traffic_light_2.mode.red;
    invariant timer_yellow.c_on needs tube_1.traffic_light_2.mode.yellow;
    invariant timer_flashing.c_on needs tube_1.traffic_light_2.mode.flashing;
    invariant timer_red.c_on needs tube_1.traffic_light_2.mode.red;
    invariant timer_release_signal.c_on needs tube_1.traffic_light_2.mode.red;
    invariant timer_yellow.c_reset needs not tube_1.traffic_light_2.mode.yellow;
    invariant timer_flashing.c_reset needs not tube_1.traffic_light_2.mode.flashing;
    invariant timer_red.c_reset needs not tube_1.traffic_light_2.mode.red;
    invariant timer_release_signal.c_reset needs not tube_1.traffic_light_2.mode.red;
  end
  group hybrid_traffic_light_3:
    plant automaton timer_yellow:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_flashing:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_red:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_release_signal:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_traffic_light:
      cont t = 0.0;
      const int[6..6] t_flashing = 6;
      const int[6..6] t_yellow = 6;
      const int[6..6] t_red = 6;
      const int[4..4] t_release_signal = 4;
      equation t' = 1.0;
      location main:
        initial;
        marked;
        edge tube_1.traffic_light_3.mode.c_off, tube_1.traffic_light_3.mode.c_yellow, tube_1.traffic_light_3.mode.c_flashing, tube_1.traffic_light_3.mode.c_red do t := 0.0;
        edge tube_1.traffic_light_3.release_signal.u_on do t := 0.0 goto red_released;
      location red_released:
        edge tube_1.traffic_light_3.release_signal.u_off goto main;
    end
    plant automaton mode:
      location main:
        initial;
        marked;
        edge tube_1.traffic_light_3.mode.c_off when timer_flashing.finished;
        edge tube_1.traffic_light_3.mode.c_flashing when tube_1.traffic_light_3.mode.off and tube_1.j32.timer_release_signal.finished or tube_1.traffic_light_3.mode.yellow and timer_yellow.finished or tube_1.traffic_light_3.mode.red and timer_red.finished;
        edge tube_1.traffic_light_3.mode.c_yellow when timer_flashing.finished;
        edge tube_1.traffic_light_3.mode.c_red when timer_yellow.finished;
        edge tube_1.traffic_light_3.release_signal.u_on when timer_release_signal.finished;
    end
    plant automaton timer_flash:
      controllable c_on;
      controllable c_off;
      cont t = 0.0;
      equation t' = 1.0;
      location off:
        initial;
        marked;
        edge c_on when tube_1.traffic_light_3.mode.flashing and t > 0.5 do t := 0.0 goto on;
      location on:
        edge c_off when not tube_1.traffic_light_3.mode.flashing or t > 0.5 do t := 0.0 goto off;
    end
    invariant timer_yellow.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_yellow and tube_1.traffic_light_3.mode.yellow;
    invariant timer_flashing.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_flashing and tube_1.traffic_light_3.mode.flashing;
    invariant timer_red.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_red and tube_1.traffic_light_3.mode.red;
    invariant timer_release_signal.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_release_signal and tube_1.traffic_light_3.mode.red;
    invariant timer_yellow.c_on needs tube_1.traffic_light_3.mode.yellow;
    invariant timer_flashing.c_on needs tube_1.traffic_light_3.mode.flashing;
    invariant timer_red.c_on needs tube_1.traffic_light_3.mode.red;
    invariant timer_release_signal.c_on needs tube_1.traffic_light_3.mode.red;
    invariant timer_yellow.c_reset needs not tube_1.traffic_light_3.mode.yellow;
    invariant timer_flashing.c_reset needs not tube_1.traffic_light_3.mode.flashing;
    invariant timer_red.c_reset needs not tube_1.traffic_light_3.mode.red;
    invariant timer_release_signal.c_reset needs not tube_1.traffic_light_3.mode.red;
  end
  group hybrid_j32:
    plant automaton timer:
      cont t = 0.0;
      const int[10..10] t_j32 = 10;
      equation t' = 1.0;
      location:
        initial;
        marked;
        edge tube_1.j32.mode.c_on, tube_1.j32.mode.c_off do t := 0.0;
    end
  end
  plant automaton hybrid_obstacle:
    uncontrollable u_place_obstacle;
    uncontrollable u_remove_obstacle;
    location no_obstacle:
      initial;
      marked;
      edge u_place_obstacle goto obstacle;
      edge tube_1.boom_barrier_1.obstacle_detection.u_off, tube_1.boom_barrier_2.obstacle_detection.u_off;
    location obstacle:
      edge u_remove_obstacle goto no_obstacle;
      edge tube_1.boom_barrier_1.obstacle_detection.u_on, tube_1.boom_barrier_2.obstacle_detection.u_on;
  end
  group smoke:
    group button_add:
      alg bool condition_press = true;
      alg bool condition_done = true;
      plant automaton button:
        uncontrollable u_press;
        location:
          initial;
          marked;
          edge u_press;
      end
      plant automaton observer:
        monitor button.u_press;
        controllable c_done;
        location released:
          initial;
          marked;
          edge button.u_press when condition_press goto pressed;
        location pressed:
          marked;
          edge c_done when condition_done goto released;
      end
    end
    group button_remove:
      alg bool condition_press = true;
      alg bool condition_done = true;
      plant automaton button:
        uncontrollable u_press;
        location:
          initial;
          marked;
          edge u_press;
      end
      plant automaton observer:
        monitor button.u_press;
        controllable c_done;
        location released:
          initial;
          marked;
          edge button.u_press when condition_press goto pressed;
        location pressed:
          marked;
          edge c_done when condition_done goto released;
      end
    end
    plant automaton smoke_level:
      disc int level = 0;
      location:
        initial;
        marked;
        edge button_add.button.u_press when level < 20 do level := level + 1;
        edge button_add.button.u_press when level = 20;
        edge button_remove.button.u_press when level > 0 do level := level - 1;
        edge button_remove.button.u_press when level = 0;
    end
  end
  group smoke_reqs:
    invariant tube_1.smoke_detection.u_0 needs smoke.smoke_level.level < 7;
    invariant tube_1.smoke_detection.u_1 needs smoke.smoke_level.level = 7;
    invariant tube_1.smoke_detection.u_2 needs smoke.smoke_level.level = 8 or smoke.smoke_level.level = 9;
    invariant tube_1.smoke_detection.u_3 needs smoke.smoke_level.level = 10 or smoke.smoke_level.level = 11;
    invariant tube_1.smoke_detection.u_4 needs smoke.smoke_level.level = 12;
    invariant tube_1.smoke_detection.u_5 needs smoke.smoke_level.level = 13 or smoke.smoke_level.level = 14;
    invariant tube_1.smoke_detection.u_6 needs smoke.smoke_level.level = 15 or smoke.smoke_level.level = 16;
    invariant tube_1.smoke_detection.u_7 needs smoke.smoke_level.level = 17 or smoke.smoke_level.level = 18;
    invariant tube_1.smoke_detection.u_8 needs smoke.smoke_level.level > 18;
  end
  group light:
    group button_add:
      alg bool condition_press = true;
      alg bool condition_done = true;
      plant automaton button:
        uncontrollable u_press;
        location:
          initial;
          marked;
          edge u_press;
      end
      plant automaton observer:
        monitor button.u_press;
        controllable c_done;
        location released:
          initial;
          marked;
          edge button.u_press when condition_press goto pressed;
        location pressed:
          marked;
          edge c_done when condition_done goto released;
      end
    end
    group button_remove:
      alg bool condition_press = true;
      alg bool condition_done = true;
      plant automaton button:
        uncontrollable u_press;
        location:
          initial;
          marked;
          edge u_press;
      end
      plant automaton observer:
        monitor button.u_press;
        controllable c_done;
        location released:
          initial;
          marked;
          edge button.u_press when condition_press goto pressed;
        location pressed:
          marked;
          edge c_done when condition_done goto released;
      end
    end
    plant automaton light_level:
      disc int level = 0;
      location:
        initial;
        marked;
        edge button_add.button.u_press when level < 20 do level := level + 1;
        edge button_add.button.u_press when level = 20;
        edge button_remove.button.u_press when level > 0 do level := level - 1;
        edge button_remove.button.u_press when level = 0;
    end
  end
  group light_reqs:
    invariant tube_1.lightsensor.u_0 needs light.light_level.level < 7;
    invariant tube_1.lightsensor.u_1 needs light.light_level.level = 7;
    invariant tube_1.lightsensor.u_2 needs light.light_level.level = 8 or light.light_level.level = 9;
    invariant tube_1.lightsensor.u_3 needs light.light_level.level = 10 or light.light_level.level = 11;
    invariant tube_1.lightsensor.u_4 needs light.light_level.level = 12;
    invariant tube_1.lightsensor.u_5 needs light.light_level.level = 13 or light.light_level.level = 14;
    invariant tube_1.lightsensor.u_6 needs light.light_level.level = 15 or light.light_level.level = 16;
    invariant tube_1.lightsensor.u_7 needs light.light_level.level = 17 or light.light_level.level = 18;
    invariant tube_1.lightsensor.u_8 needs light.light_level.level > 18;
  end
  plant automaton switch_timer:
    const int[3..3] t_tubes = 3;
    const int[3..3] t_safespace = 3;
    cont t = 0.0;
    location off:
      initial;
      marked;
      equation t' = 0.0;
      edge tube_1.switch_timer_audio.c_on do t := 0.0 goto tubes;
    location tubes:
      equation t' = 1.0;
      edge tube_1.switch_timer_audio.c_off goto off;
      edge tube_1.switch_timer_audio.u_timeout when t > t_tubes do t := 0.0 goto safespace;
    location safespace:
      equation t' = 1.0;
      edge tube_1.switch_timer_audio.c_off goto off;
      edge tube_1.switch_timer_audio.u_timeout when t > t_safespace do t := 0.0 goto tubes;
  end
  invariant tube_1.j32.timer_release_signal.u_timeout needs hybrid_j32.timer.t >= hybrid_j32.timer.t_j32 and tube_1.j32.mode.on and tube_1.traffic_light_1.mode.off;
  invariant tube_1.j32.timer_release_signal.u_timeout needs hybrid_j32.timer.t >= hybrid_j32.timer.t_j32 and tube_1.j32.mode.on and tube_1.traffic_light_2.mode.off;
  invariant tube_1.j32.timer_release_signal.u_timeout needs hybrid_j32.timer.t >= hybrid_j32.timer.t_j32 and tube_1.j32.mode.on and tube_1.traffic_light_3.mode.off;
end
group hybrid_tube_2:
  alg bool up_1 = tube_2.boom_barrier_1.open;
  alg bool down_1 = tube_2.boom_barrier_1.closed;
  alg bool up_2 = tube_2.boom_barrier_2.open;
  alg bool down_2 = tube_2.boom_barrier_2.closed;
  group hybrid_boom_barrier_1:
    cont height = 300.0;
    const int[300..300] height_up = 300;
    const int[0..0] height_down = 0;
    alg bool up = up_1;
    alg bool down = down_1;
    plant automaton position_boombarrier_observer:
      location:
        initial;
        marked;
        edge tube_2.boom_barrier_1.sensor_open.u_off when height < height_up;
        edge tube_2.boom_barrier_1.sensor_open.u_on when height > height_up;
        edge tube_2.boom_barrier_1.sensor_closed.u_off when height > height_down;
        edge tube_2.boom_barrier_1.sensor_closed.u_on when height < height_down;
    end
    equation height' = if tube_2.boom_barrier_1.actuator_up.on and not up: 100.0 elif tube_2.boom_barrier_1.actuator_down.on and not down: -100.0 else 0.0 end;
  end
  group hybrid_boom_barrier_2:
    cont height = 300.0;
    const int[300..300] height_up = 300;
    const int[0..0] height_down = 0;
    alg bool up = up_2;
    alg bool down = down_2;
    plant automaton position_boombarrier_observer:
      location:
        initial;
        marked;
        edge tube_2.boom_barrier_2.sensor_open.u_off when height < height_up;
        edge tube_2.boom_barrier_2.sensor_open.u_on when height > height_up;
        edge tube_2.boom_barrier_2.sensor_closed.u_off when height > height_down;
        edge tube_2.boom_barrier_2.sensor_closed.u_on when height < height_down;
    end
    equation height' = if tube_2.boom_barrier_2.actuator_up.on and not up: 100.0 elif tube_2.boom_barrier_2.actuator_down.on and not down: -100.0 else 0.0 end;
  end
  group hybrid_traffic_light_1:
    plant automaton timer_yellow:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_flashing:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_red:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_release_signal:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_traffic_light:
      cont t = 0.0;
      const int[6..6] t_flashing = 6;
      const int[6..6] t_yellow = 6;
      const int[6..6] t_red = 6;
      const int[4..4] t_release_signal = 4;
      equation t' = 1.0;
      location main:
        initial;
        marked;
        edge tube_2.traffic_light_1.mode.c_off, tube_2.traffic_light_1.mode.c_yellow, tube_2.traffic_light_1.mode.c_flashing, tube_2.traffic_light_1.mode.c_red do t := 0.0;
        edge tube_2.traffic_light_1.release_signal.u_on do t := 0.0 goto red_released;
      location red_released:
        edge tube_2.traffic_light_1.release_signal.u_off goto main;
    end
    plant automaton mode:
      location main:
        initial;
        marked;
        edge tube_2.traffic_light_1.mode.c_off when timer_flashing.finished;
        edge tube_2.traffic_light_1.mode.c_flashing when tube_2.traffic_light_1.mode.off and tube_2.j32.timer_release_signal.finished or tube_2.traffic_light_1.mode.yellow and timer_yellow.finished or tube_2.traffic_light_1.mode.red and timer_red.finished;
        edge tube_2.traffic_light_1.mode.c_yellow when timer_flashing.finished;
        edge tube_2.traffic_light_1.mode.c_red when timer_yellow.finished;
        edge tube_2.traffic_light_1.release_signal.u_on when timer_release_signal.finished;
    end
    plant automaton timer_flash:
      controllable c_on;
      controllable c_off;
      cont t = 0.0;
      equation t' = 1.0;
      location off:
        initial;
        marked;
        edge c_on when tube_2.traffic_light_1.mode.flashing and t > 0.5 do t := 0.0 goto on;
      location on:
        edge c_off when not tube_2.traffic_light_1.mode.flashing or t > 0.5 do t := 0.0 goto off;
    end
    invariant timer_yellow.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_yellow and tube_2.traffic_light_1.mode.yellow;
    invariant timer_flashing.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_flashing and tube_2.traffic_light_1.mode.flashing;
    invariant timer_red.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_red and tube_2.traffic_light_1.mode.red;
    invariant timer_release_signal.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_release_signal and tube_2.traffic_light_1.mode.red;
    invariant timer_yellow.c_on needs tube_2.traffic_light_1.mode.yellow;
    invariant timer_flashing.c_on needs tube_2.traffic_light_1.mode.flashing;
    invariant timer_red.c_on needs tube_2.traffic_light_1.mode.red;
    invariant timer_release_signal.c_on needs tube_2.traffic_light_1.mode.red;
    invariant timer_yellow.c_reset needs not tube_2.traffic_light_1.mode.yellow;
    invariant timer_flashing.c_reset needs not tube_2.traffic_light_1.mode.flashing;
    invariant timer_red.c_reset needs not tube_2.traffic_light_1.mode.red;
    invariant timer_release_signal.c_reset needs not tube_2.traffic_light_1.mode.red;
  end
  group hybrid_traffic_light_2:
    plant automaton timer_yellow:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_flashing:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_red:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_release_signal:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_traffic_light:
      cont t = 0.0;
      const int[6..6] t_flashing = 6;
      const int[6..6] t_yellow = 6;
      const int[6..6] t_red = 6;
      const int[4..4] t_release_signal = 4;
      equation t' = 1.0;
      location main:
        initial;
        marked;
        edge tube_2.traffic_light_2.mode.c_off, tube_2.traffic_light_2.mode.c_yellow, tube_2.traffic_light_2.mode.c_flashing, tube_2.traffic_light_2.mode.c_red do t := 0.0;
        edge tube_2.traffic_light_2.release_signal.u_on do t := 0.0 goto red_released;
      location red_released:
        edge tube_2.traffic_light_2.release_signal.u_off goto main;
    end
    plant automaton mode:
      location main:
        initial;
        marked;
        edge tube_2.traffic_light_2.mode.c_off when timer_flashing.finished;
        edge tube_2.traffic_light_2.mode.c_flashing when tube_2.traffic_light_2.mode.off and tube_2.j32.timer_release_signal.finished or tube_2.traffic_light_2.mode.yellow and timer_yellow.finished or tube_2.traffic_light_2.mode.red and timer_red.finished;
        edge tube_2.traffic_light_2.mode.c_yellow when timer_flashing.finished;
        edge tube_2.traffic_light_2.mode.c_red when timer_yellow.finished;
        edge tube_2.traffic_light_2.release_signal.u_on when timer_release_signal.finished;
    end
    plant automaton timer_flash:
      controllable c_on;
      controllable c_off;
      cont t = 0.0;
      equation t' = 1.0;
      location off:
        initial;
        marked;
        edge c_on when tube_2.traffic_light_2.mode.flashing and t > 0.5 do t := 0.0 goto on;
      location on:
        edge c_off when not tube_2.traffic_light_2.mode.flashing or t > 0.5 do t := 0.0 goto off;
    end
    invariant timer_yellow.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_yellow and tube_2.traffic_light_2.mode.yellow;
    invariant timer_flashing.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_flashing and tube_2.traffic_light_2.mode.flashing;
    invariant timer_red.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_red and tube_2.traffic_light_2.mode.red;
    invariant timer_release_signal.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_release_signal and tube_2.traffic_light_2.mode.red;
    invariant timer_yellow.c_on needs tube_2.traffic_light_2.mode.yellow;
    invariant timer_flashing.c_on needs tube_2.traffic_light_2.mode.flashing;
    invariant timer_red.c_on needs tube_2.traffic_light_2.mode.red;
    invariant timer_release_signal.c_on needs tube_2.traffic_light_2.mode.red;
    invariant timer_yellow.c_reset needs not tube_2.traffic_light_2.mode.yellow;
    invariant timer_flashing.c_reset needs not tube_2.traffic_light_2.mode.flashing;
    invariant timer_red.c_reset needs not tube_2.traffic_light_2.mode.red;
    invariant timer_release_signal.c_reset needs not tube_2.traffic_light_2.mode.red;
  end
  group hybrid_traffic_light_3:
    plant automaton timer_yellow:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_flashing:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_red:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_release_signal:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton timer_traffic_light:
      cont t = 0.0;
      const int[6..6] t_flashing = 6;
      const int[6..6] t_yellow = 6;
      const int[6..6] t_red = 6;
      const int[4..4] t_release_signal = 4;
      equation t' = 1.0;
      location main:
        initial;
        marked;
        edge tube_2.traffic_light_3.mode.c_off, tube_2.traffic_light_3.mode.c_yellow, tube_2.traffic_light_3.mode.c_flashing, tube_2.traffic_light_3.mode.c_red do t := 0.0;
        edge tube_2.traffic_light_3.release_signal.u_on do t := 0.0 goto red_released;
      location red_released:
        edge tube_2.traffic_light_3.release_signal.u_off goto main;
    end
    plant automaton mode:
      location main:
        initial;
        marked;
        edge tube_2.traffic_light_3.mode.c_off when timer_flashing.finished;
        edge tube_2.traffic_light_3.mode.c_flashing when tube_2.traffic_light_3.mode.off and tube_2.j32.timer_release_signal.finished or tube_2.traffic_light_3.mode.yellow and timer_yellow.finished or tube_2.traffic_light_3.mode.red and timer_red.finished;
        edge tube_2.traffic_light_3.mode.c_yellow when timer_flashing.finished;
        edge tube_2.traffic_light_3.mode.c_red when timer_yellow.finished;
        edge tube_2.traffic_light_3.release_signal.u_on when timer_release_signal.finished;
    end
    plant automaton timer_flash:
      controllable c_on;
      controllable c_off;
      cont t = 0.0;
      equation t' = 1.0;
      location off:
        initial;
        marked;
        edge c_on when tube_2.traffic_light_3.mode.flashing and t > 0.5 do t := 0.0 goto on;
      location on:
        edge c_off when not tube_2.traffic_light_3.mode.flashing or t > 0.5 do t := 0.0 goto off;
    end
    invariant timer_yellow.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_yellow and tube_2.traffic_light_3.mode.yellow;
    invariant timer_flashing.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_flashing and tube_2.traffic_light_3.mode.flashing;
    invariant timer_red.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_red and tube_2.traffic_light_3.mode.red;
    invariant timer_release_signal.u_timeout needs timer_traffic_light.t >= timer_traffic_light.t_release_signal and tube_2.traffic_light_3.mode.red;
    invariant timer_yellow.c_on needs tube_2.traffic_light_3.mode.yellow;
    invariant timer_flashing.c_on needs tube_2.traffic_light_3.mode.flashing;
    invariant timer_red.c_on needs tube_2.traffic_light_3.mode.red;
    invariant timer_release_signal.c_on needs tube_2.traffic_light_3.mode.red;
    invariant timer_yellow.c_reset needs not tube_2.traffic_light_3.mode.yellow;
    invariant timer_flashing.c_reset needs not tube_2.traffic_light_3.mode.flashing;
    invariant timer_red.c_reset needs not tube_2.traffic_light_3.mode.red;
    invariant timer_release_signal.c_reset needs not tube_2.traffic_light_3.mode.red;
  end
  group hybrid_j32:
    plant automaton timer:
      cont t = 0.0;
      const int[10..10] t_j32 = 10;
      equation t' = 1.0;
      location:
        initial;
        marked;
        edge tube_2.j32.mode.c_on, tube_2.j32.mode.c_off do t := 0.0;
    end
  end
  plant automaton hybrid_obstacle:
    uncontrollable u_place_obstacle;
    uncontrollable u_remove_obstacle;
    location no_obstacle:
      initial;
      marked;
      edge u_place_obstacle goto obstacle;
      edge tube_2.boom_barrier_1.obstacle_detection.u_off, tube_2.boom_barrier_2.obstacle_detection.u_off;
    location obstacle:
      edge u_remove_obstacle goto no_obstacle;
      edge tube_2.boom_barrier_1.obstacle_detection.u_on, tube_2.boom_barrier_2.obstacle_detection.u_on;
  end
  group smoke:
    group button_add:
      alg bool condition_press = true;
      alg bool condition_done = true;
      plant automaton button:
        uncontrollable u_press;
        location:
          initial;
          marked;
          edge u_press;
      end
      plant automaton observer:
        monitor button.u_press;
        controllable c_done;
        location released:
          initial;
          marked;
          edge button.u_press when condition_press goto pressed;
        location pressed:
          marked;
          edge c_done when condition_done goto released;
      end
    end
    group button_remove:
      alg bool condition_press = true;
      alg bool condition_done = true;
      plant automaton button:
        uncontrollable u_press;
        location:
          initial;
          marked;
          edge u_press;
      end
      plant automaton observer:
        monitor button.u_press;
        controllable c_done;
        location released:
          initial;
          marked;
          edge button.u_press when condition_press goto pressed;
        location pressed:
          marked;
          edge c_done when condition_done goto released;
      end
    end
    plant automaton smoke_level:
      disc int level = 0;
      location:
        initial;
        marked;
        edge button_add.button.u_press when level < 20 do level := level + 1;
        edge button_add.button.u_press when level = 20;
        edge button_remove.button.u_press when level > 0 do level := level - 1;
        edge button_remove.button.u_press when level = 0;
    end
  end
  group smoke_reqs:
    invariant tube_2.smoke_detection.u_0 needs smoke.smoke_level.level < 7;
    invariant tube_2.smoke_detection.u_1 needs smoke.smoke_level.level = 7;
    invariant tube_2.smoke_detection.u_2 needs smoke.smoke_level.level = 8 or smoke.smoke_level.level = 9;
    invariant tube_2.smoke_detection.u_3 needs smoke.smoke_level.level = 10 or smoke.smoke_level.level = 11;
    invariant tube_2.smoke_detection.u_4 needs smoke.smoke_level.level = 12;
    invariant tube_2.smoke_detection.u_5 needs smoke.smoke_level.level = 13 or smoke.smoke_level.level = 14;
    invariant tube_2.smoke_detection.u_6 needs smoke.smoke_level.level = 15 or smoke.smoke_level.level = 16;
    invariant tube_2.smoke_detection.u_7 needs smoke.smoke_level.level = 17 or smoke.smoke_level.level = 18;
    invariant tube_2.smoke_detection.u_8 needs smoke.smoke_level.level > 18;
  end
  group light:
    group button_add:
      alg bool condition_press = true;
      alg bool condition_done = true;
      plant automaton button:
        uncontrollable u_press;
        location:
          initial;
          marked;
          edge u_press;
      end
      plant automaton observer:
        monitor button.u_press;
        controllable c_done;
        location released:
          initial;
          marked;
          edge button.u_press when condition_press goto pressed;
        location pressed:
          marked;
          edge c_done when condition_done goto released;
      end
    end
    group button_remove:
      alg bool condition_press = true;
      alg bool condition_done = true;
      plant automaton button:
        uncontrollable u_press;
        location:
          initial;
          marked;
          edge u_press;
      end
      plant automaton observer:
        monitor button.u_press;
        controllable c_done;
        location released:
          initial;
          marked;
          edge button.u_press when condition_press goto pressed;
        location pressed:
          marked;
          edge c_done when condition_done goto released;
      end
    end
    plant automaton light_level:
      disc int level = 0;
      location:
        initial;
        marked;
        edge button_add.button.u_press when level < 20 do level := level + 1;
        edge button_add.button.u_press when level = 20;
        edge button_remove.button.u_press when level > 0 do level := level - 1;
        edge button_remove.button.u_press when level = 0;
    end
  end
  group light_reqs:
    invariant tube_2.lightsensor.u_0 needs light.light_level.level < 7;
    invariant tube_2.lightsensor.u_1 needs light.light_level.level = 7;
    invariant tube_2.lightsensor.u_2 needs light.light_level.level = 8 or light.light_level.level = 9;
    invariant tube_2.lightsensor.u_3 needs light.light_level.level = 10 or light.light_level.level = 11;
    invariant tube_2.lightsensor.u_4 needs light.light_level.level = 12;
    invariant tube_2.lightsensor.u_5 needs light.light_level.level = 13 or light.light_level.level = 14;
    invariant tube_2.lightsensor.u_6 needs light.light_level.level = 15 or light.light_level.level = 16;
    invariant tube_2.lightsensor.u_7 needs light.light_level.level = 17 or light.light_level.level = 18;
    invariant tube_2.lightsensor.u_8 needs light.light_level.level > 18;
  end
  plant automaton switch_timer:
    const int[3..3] t_tubes = 3;
    const int[3..3] t_safespace = 3;
    cont t = 0.0;
    location off:
      initial;
      marked;
      equation t' = 0.0;
      edge tube_1.switch_timer_audio.c_on do t := 0.0 goto tubes;
    location tubes:
      equation t' = 1.0;
      edge tube_1.switch_timer_audio.c_off goto off;
      edge tube_1.switch_timer_audio.u_timeout when t > t_tubes do t := 0.0 goto safespace;
    location safespace:
      equation t' = 1.0;
      edge tube_1.switch_timer_audio.c_off goto off;
      edge tube_1.switch_timer_audio.u_timeout when t > t_safespace do t := 0.0 goto tubes;
  end
  invariant tube_2.j32.timer_release_signal.u_timeout needs hybrid_j32.timer.t >= hybrid_j32.timer.t_j32 and tube_2.j32.mode.on and tube_2.traffic_light_1.mode.off;
  invariant tube_2.j32.timer_release_signal.u_timeout needs hybrid_j32.timer.t >= hybrid_j32.timer.t_j32 and tube_2.j32.mode.on and tube_2.traffic_light_2.mode.off;
  invariant tube_2.j32.timer_release_signal.u_timeout needs hybrid_j32.timer.t >= hybrid_j32.timer.t_j32 and tube_2.j32.mode.on and tube_2.traffic_light_3.mode.off;
end
group tube_1:
  alg bool conditie_camera_1 = not mode.operational and (not traffic_light_1.mode.red or not traffic_light_2.mode.red or not traffic_light_3.mode.red);
  alg bool conditie_camera_2 = boom_barrier_1.actuator_down.on or boom_barrier_2.actuator_down.on;
  alg bool conditie_camera_3 = mode.operational and (emergency_cabinet_A.sensor_open.on or emergency_cabinet_C.sensor_open.on);
  alg bool conditie_camera_4 = SOS.on;
  alg bool conditie_camera_5 = smoke_detection.mode > 4;
  alg bool conditie_camera_6 = escape_door.sensor_open.on;
  group boom_barrier_1:
    alg bool open = sensor_open.on and actuator_up.off and actuator_down.off;
    alg bool closed = sensor_closed.on and actuator_up.off and actuator_down.off;
    plant automaton actuator_up:
      controllable c_on;
      controllable c_off;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial;
        marked OffMarked;
        edge c_on goto on;
      location on:
        marked OnMarked;
        edge c_off goto off;
    end
    plant automaton actuator_down:
      controllable c_on;
      controllable c_off;
      controllable c_off_emergency;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial;
        marked OffMarked;
        edge c_on goto on;
      location on:
        marked OnMarked;
        edge c_off, c_off_emergency goto off;
    end
    plant automaton sensor_open:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = false;
      alg bool OffMarked = false;
      alg bool OnMarked = true;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton sensor_closed:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton physical_relation:
      location:
        initial;
        marked;
        edge sensor_open.u_on when actuator_up.on and sensor_closed.off;
        edge sensor_closed.u_off when actuator_up.on;
        edge sensor_open.u_off when actuator_down.on;
        edge sensor_closed.u_on when actuator_down.on and sensor_open.off;
    end
    plant automaton obstacle_detection:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    requirement invariant actuator_up.c_on needs actuator_down.off;
    requirement invariant actuator_up.c_on needs not open;
    requirement invariant actuator_up.c_off needs sensor_open.on;
    requirement invariant actuator_down.c_on needs actuator_up.off;
    requirement invariant actuator_down.c_on needs not closed;
    requirement invariant actuator_down.c_off needs sensor_closed.on;
    requirement invariant actuator_down.c_on needs obstacle_detection.off;
  end
  group boom_barrier_2:
    alg bool open = sensor_open.on and actuator_up.off and actuator_down.off;
    alg bool closed = sensor_closed.on and actuator_up.off and actuator_down.off;
    plant automaton actuator_up:
      controllable c_on;
      controllable c_off;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial;
        marked OffMarked;
        edge c_on goto on;
      location on:
        marked OnMarked;
        edge c_off goto off;
    end
    plant automaton actuator_down:
      controllable c_on;
      controllable c_off;
      controllable c_off_emergency;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial;
        marked OffMarked;
        edge c_on goto on;
      location on:
        marked OnMarked;
        edge c_off, c_off_emergency goto off;
    end
    plant automaton sensor_open:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = false;
      alg bool OffMarked = false;
      alg bool OnMarked = true;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton sensor_closed:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton physical_relation:
      location:
        initial;
        marked;
        edge sensor_open.u_on when actuator_up.on and sensor_closed.off;
        edge sensor_closed.u_off when actuator_up.on;
        edge sensor_open.u_off when actuator_down.on;
        edge sensor_closed.u_on when actuator_down.on and sensor_open.off;
    end
    plant automaton obstacle_detection:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    requirement invariant actuator_up.c_on needs actuator_down.off;
    requirement invariant actuator_up.c_on needs not open;
    requirement invariant actuator_up.c_off needs sensor_open.on;
    requirement invariant actuator_down.c_on needs actuator_up.off;
    requirement invariant actuator_down.c_on needs not closed;
    requirement invariant actuator_down.c_off needs sensor_closed.on;
    requirement invariant actuator_down.c_on needs obstacle_detection.off;
  end
  group traffic_light_1:
    plant automaton mode:
      controllable c_off;
      controllable c_yellow;
      controllable c_flashing;
      controllable c_red;
      location off:
        initial;
        marked;
        edge c_flashing goto flashing;
      location flashing:
        edge c_off goto off;
        edge c_yellow goto yellow;
      location yellow:
        edge c_red goto red;
      location red:
        edge c_flashing goto flashing;
    end
    plant automaton release_signal:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton timer_release_signal:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton relation:
      location:
        initial;
        marked;
        edge release_signal.u_on when mode.red and timer_release_signal.finished;
        edge release_signal.u_off when not mode.red;
    end
    requirement invariant timer_release_signal.c_on needs mode.red;
    requirement invariant timer_release_signal.c_reset needs not mode.red;
  end
  group traffic_light_2:
    plant automaton mode:
      controllable c_off;
      controllable c_yellow;
      controllable c_flashing;
      controllable c_red;
      location off:
        initial;
        marked;
        edge c_flashing goto flashing;
      location flashing:
        edge c_off goto off;
        edge c_yellow goto yellow;
      location yellow:
        edge c_red goto red;
      location red:
        edge c_flashing goto flashing;
    end
    plant automaton release_signal:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton timer_release_signal:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton relation:
      location:
        initial;
        marked;
        edge release_signal.u_on when mode.red and timer_release_signal.finished;
        edge release_signal.u_off when not mode.red;
    end
    requirement invariant timer_release_signal.c_on needs mode.red;
    requirement invariant timer_release_signal.c_reset needs not mode.red;
  end
  group traffic_light_3:
    plant automaton mode:
      controllable c_off;
      controllable c_yellow;
      controllable c_flashing;
      controllable c_red;
      location off:
        initial;
        marked;
        edge c_flashing goto flashing;
      location flashing:
        edge c_off goto off;
        edge c_yellow goto yellow;
      location yellow:
        edge c_red goto red;
      location red:
        edge c_flashing goto flashing;
    end
    plant automaton release_signal:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton timer_release_signal:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton relation:
      location:
        initial;
        marked;
        edge release_signal.u_on when mode.red and timer_release_signal.finished;
        edge release_signal.u_off when not mode.red;
    end
    requirement invariant timer_release_signal.c_on needs mode.red;
    requirement invariant timer_release_signal.c_reset needs not mode.red;
  end
  group j32:
    plant automaton mode:
      controllable c_on;
      controllable c_off;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial;
        marked OffMarked;
        edge c_on goto on;
      location on:
        marked OnMarked;
        edge c_off goto off;
    end
    plant automaton timer_release_signal:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    requirement invariant timer_release_signal.c_on needs mode.on;
    requirement invariant timer_release_signal.c_reset needs mode.off;
  end
  plant automaton matrix_sign_traffic_light:
    controllable c_on;
    controllable c_off;
    alg bool OffMarked = true;
    alg bool OnMarked = false;
    location off:
      initial;
      marked OffMarked;
      edge c_on goto on;
    location on:
      marked OnMarked;
      edge c_off goto off;
  end
  plant automaton matrix_sign_free:
    controllable c_on;
    controllable c_off;
    alg bool OffMarked = true;
    alg bool OnMarked = false;
    location off:
      initial;
      marked OffMarked;
      edge c_on goto on;
    location on:
      marked OnMarked;
      edge c_off goto off;
  end
  plant automaton SOS:
    uncontrollable u_on;
    uncontrollable u_off;
    alg bool OffInitial = true;
    alg bool OffMarked = true;
    alg bool OnMarked = false;
    location off:
      initial OffInitial;
      marked OffMarked;
      edge u_on goto on;
    location on:
      initial not OffInitial;
      marked OnMarked;
      edge u_off goto off;
  end
  group emergency_cabinet_A:
    plant automaton sensor_open:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton emergency_phone:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton hand_extinguisher:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton fire_hose:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
  end
  group emergency_cabinet_C:
    plant automaton sensor_open:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton emergency_phone:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton hand_extinguisher:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
  end
  plant automaton smoke_detection:
    disc int[0..8] mode = 0;
    uncontrollable u_0;
    uncontrollable u_1;
    uncontrollable u_2;
    uncontrollable u_3;
    uncontrollable u_4;
    uncontrollable u_5;
    uncontrollable u_6;
    uncontrollable u_7;
    uncontrollable u_8;
    location:
      initial;
      marked;
      edge u_0 when not(mode = 0) do mode := 0;
      edge u_1 when not(mode = 1) do mode := 1;
      edge u_2 when not(mode = 2) do mode := 2;
      edge u_3 when not(mode = 3) do mode := 3;
      edge u_4 when not(mode = 4) do mode := 4;
      edge u_5 when not(mode = 5) do mode := 5;
      edge u_6 when not(mode = 6) do mode := 6;
      edge u_7 when not(mode = 7) do mode := 7;
      edge u_8 when not(mode = 8) do mode := 8;
  end
  plant automaton ventilation:
    disc int[0..8] mode = 0;
    controllable c_0;
    controllable c_1;
    controllable c_2;
    controllable c_3;
    controllable c_4;
    controllable c_5;
    controllable c_6;
    controllable c_7;
    controllable c_8;
    location:
      initial;
      marked;
      edge c_0 when not(mode = 0) do mode := 0;
      edge c_1 when not(mode = 1) do mode := 1;
      edge c_2 when not(mode = 2) do mode := 2;
      edge c_3 when not(mode = 3) do mode := 3;
      edge c_4 when not(mode = 4) do mode := 4;
      edge c_5 when not(mode = 5) do mode := 5;
      edge c_6 when not(mode = 6) do mode := 6;
      edge c_7 when not(mode = 7) do mode := 7;
      edge c_8 when not(mode = 8) do mode := 8;
  end
  plant automaton ventilation_entrance:
    disc int[0..8] mode = 0;
    controllable c_0;
    controllable c_1;
    controllable c_2;
    controllable c_3;
    controllable c_4;
    controllable c_5;
    controllable c_6;
    controllable c_7;
    controllable c_8;
    location:
      initial;
      marked;
      edge c_0 when not(mode = 0) do mode := 0;
      edge c_1 when not(mode = 1) do mode := 1;
      edge c_2 when not(mode = 2) do mode := 2;
      edge c_3 when not(mode = 3) do mode := 3;
      edge c_4 when not(mode = 4) do mode := 4;
      edge c_5 when not(mode = 5) do mode := 5;
      edge c_6 when not(mode = 6) do mode := 6;
      edge c_7 when not(mode = 7) do mode := 7;
      edge c_8 when not(mode = 8) do mode := 8;
  end
  plant automaton ventilation_direction:
    controllable c_along;
    controllable c_against;
    location along:
      initial;
      marked;
      edge c_against goto against;
    location against:
      edge c_along goto along;
  end
  plant automaton lightsensor:
    disc int[0..8] mode = 0;
    uncontrollable u_0;
    uncontrollable u_1;
    uncontrollable u_2;
    uncontrollable u_3;
    uncontrollable u_4;
    uncontrollable u_5;
    uncontrollable u_6;
    uncontrollable u_7;
    uncontrollable u_8;
    location:
      initial;
      marked;
      edge u_0 when not(mode = 0) do mode := 0;
      edge u_1 when not(mode = 1) do mode := 1;
      edge u_2 when not(mode = 2) do mode := 2;
      edge u_3 when not(mode = 3) do mode := 3;
      edge u_4 when not(mode = 4) do mode := 4;
      edge u_5 when not(mode = 5) do mode := 5;
      edge u_6 when not(mode = 6) do mode := 6;
      edge u_7 when not(mode = 7) do mode := 7;
      edge u_8 when not(mode = 8) do mode := 8;
  end
  plant automaton lighting:
    disc int[0..8] mode = 0;
    controllable c_0;
    controllable c_1;
    controllable c_2;
    controllable c_3;
    controllable c_4;
    controllable c_5;
    controllable c_6;
    controllable c_7;
    controllable c_8;
    location:
      initial;
      marked;
      edge c_0 when not(mode = 0) do mode := 0;
      edge c_1 when not(mode = 1) do mode := 1;
      edge c_2 when not(mode = 2) do mode := 2;
      edge c_3 when not(mode = 3) do mode := 3;
      edge c_4 when not(mode = 4) do mode := 4;
      edge c_5 when not(mode = 5) do mode := 5;
      edge c_6 when not(mode = 6) do mode := 6;
      edge c_7 when not(mode = 7) do mode := 7;
      edge c_8 when not(mode = 8) do mode := 8;
  end
  plant automaton channel:
    controllable c_1_off;
    controllable c_2_off;
    controllable c_3_off;
    controllable c_4_off;
    controllable c_5_off;
    controllable c_6_off;
    controllable c_1_on;
    controllable c_2_on;
    controllable c_3_on;
    controllable c_4_on;
    controllable c_5_on;
    controllable c_6_on;
    location off:
      initial;
      marked;
      edge c_1_on goto camera_1;
      edge c_2_on goto camera_2;
      edge c_3_on goto camera_3;
      edge c_4_on goto camera_4;
      edge c_5_on goto camera_5;
      edge c_6_on goto camera_6;
    location camera_1:
      edge c_1_off goto off;
    location camera_2:
      edge c_2_off goto off;
    location camera_3:
      edge c_3_off goto off;
    location camera_4:
      edge c_4_off goto off;
    location camera_5:
      edge c_5_off goto off;
    location camera_6:
      edge c_6_off goto off;
  end
  plant automaton recorder:
    controllable c_on;
    controllable c_off;
    alg bool OffMarked = true;
    alg bool OnMarked = false;
    location off:
      initial;
      marked OffMarked;
      edge c_on goto on;
    location on:
      marked OnMarked;
      edge c_off goto off;
  end
  group escape_door:
    plant automaton sensor_open:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton sound_beacon:
      controllable c_on;
      controllable c_off;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial;
        marked OffMarked;
        edge c_on goto on;
      location on:
        marked OnMarked;
        edge c_off goto off;
    end
    plant automaton contour_lighting:
      controllable c_on;
      controllable c_off;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial;
        marked OffMarked;
        edge c_on goto on;
      location on:
        marked OnMarked;
        edge c_off goto off;
    end
  end
  plant automaton intercom:
    controllable c_on;
    controllable c_off;
    alg bool OffMarked = true;
    alg bool OnMarked = false;
    location off:
      initial;
      marked OffMarked;
      edge c_on goto on;
    location on:
      marked OnMarked;
      edge c_off goto off;
  end
  plant automaton switch_timer_audio:
    controllable c_on;
    controllable c_off;
    uncontrollable u_timeout;
    location off:
      initial;
      marked;
      edge c_on goto on_1;
    location on_1:
      edge c_off goto off;
      edge u_timeout goto on_2;
    location on_2:
      edge c_off goto off;
      edge u_timeout goto on_1;
  end
  plant automaton mode:
    controllable c_operational;
    controllable c_emergency;
    controllable c_recovery;
    controllable c_support;
    location operational:
      initial;
      marked;
      edge c_emergency goto emergency;
      edge c_recovery goto recovery;
      edge c_support goto support;
    location emergency:
      edge c_recovery goto recovery;
      edge c_operational goto operational;
      edge c_support goto support;
    location recovery:
      edge c_operational goto operational;
      edge c_emergency goto emergency;
      edge c_support goto support;
    location support:
      edge c_operational goto operational;
      edge c_emergency goto emergency;
      edge c_recovery goto recovery;
  end
  plant automaton standby:
    controllable c_on;
    controllable c_off;
    alg bool OffMarked = true;
    alg bool OnMarked = false;
    location off:
      initial;
      marked OffMarked;
      edge c_on goto on;
    location on:
      marked OnMarked;
      edge c_off goto off;
  end
  plant automaton evacuation:
    controllable c_on;
    controllable c_off;
    alg bool OffMarked = true;
    alg bool OnMarked = false;
    location off:
      initial;
      marked OffMarked;
      edge c_on goto on;
    location on:
      marked OnMarked;
      edge c_off goto off;
  end
  group button_operational:
    alg bool condition_press = mode.recovery;
    alg bool condition_done = mode.operational;
    plant automaton button:
      uncontrollable u_press;
      location:
        initial;
        marked;
        edge u_press;
    end
    plant automaton observer:
      monitor button.u_press;
      controllable c_done;
      location released:
        initial;
        marked;
        edge button.u_press when condition_press goto pressed;
      location pressed:
        marked;
        edge c_done when condition_done goto released;
    end
  end
  group button_evacuation:
    alg bool condition_press = mode.emergency and evacuation.off;
    alg bool condition_done = evacuation.on;
    plant automaton button:
      uncontrollable u_press;
      location:
        initial;
        marked;
        edge u_press;
    end
    plant automaton observer:
      monitor button.u_press;
      controllable c_done;
      location released:
        initial;
        marked;
        edge button.u_press when condition_press goto pressed;
      location pressed:
        marked;
        edge c_done when condition_done goto released;
    end
  end
  group button_recovery:
    alg bool condition_press = mode.emergency;
    alg bool condition_done = mode.recovery;
    plant automaton button:
      uncontrollable u_press;
      location:
        initial;
        marked;
        edge u_press;
    end
    plant automaton observer:
      monitor button.u_press;
      controllable c_done;
      location released:
        initial;
        marked;
        edge button.u_press when condition_press goto pressed;
      location pressed:
        marked;
        edge c_done when condition_done goto released;
    end
  end
  group boom_barrier_1_requirements:
    requirement invariant boom_barrier_1.actuator_down.c_on needs traffic_light_1.release_signal.on;
    requirement invariant boom_barrier_1.actuator_down.c_on needs traffic_light_2.release_signal.on;
    requirement invariant boom_barrier_1.actuator_down.c_on needs traffic_light_3.release_signal.on;
    requirement invariant boom_barrier_1.actuator_down.c_on needs not mode.operational;
    requirement invariant boom_barrier_1.actuator_down.c_off_emergency needs boom_barrier_1.obstacle_detection.on or traffic_light_1.release_signal.off or traffic_light_2.release_signal.off or traffic_light_3.release_signal.off;
    requirement invariant boom_barrier_1.actuator_up.c_on needs mode.operational;
  end
  group boom_barrier_2_requirements:
    requirement invariant boom_barrier_2.actuator_down.c_on needs traffic_light_1.release_signal.on;
    requirement invariant boom_barrier_2.actuator_down.c_on needs traffic_light_2.release_signal.on;
    requirement invariant boom_barrier_2.actuator_down.c_on needs traffic_light_3.release_signal.on;
    requirement invariant boom_barrier_2.actuator_down.c_on needs not mode.operational;
    requirement invariant boom_barrier_2.actuator_down.c_off_emergency needs boom_barrier_2.obstacle_detection.on or traffic_light_1.release_signal.off or traffic_light_2.release_signal.off or traffic_light_3.release_signal.off;
    requirement invariant boom_barrier_2.actuator_up.c_on needs mode.operational;
  end
  group traffic_light_1_requirements:
    requirement invariant traffic_light_1.mode.red and boom_barrier_1.closed disables traffic_light_1.mode.c_flashing;
    requirement invariant traffic_light_1.mode.red and boom_barrier_2.closed disables traffic_light_1.mode.c_flashing;
    requirement invariant j32.mode.off disables traffic_light_1.mode.c_flashing;
    requirement invariant traffic_light_1.mode.off and not j32.timer_release_signal.finished disables traffic_light_1.mode.c_flashing;
    requirement invariant traffic_light_1.mode.c_off needs mode.operational;
    requirement invariant traffic_light_1.mode.c_flashing needs traffic_light_1.mode.red and mode.operational or traffic_light_1.mode.off and not mode.operational;
    requirement invariant traffic_light_1.mode.c_yellow needs not mode.operational;
  end
  group traffic_light_2_requirements:
    requirement invariant traffic_light_2.mode.red and boom_barrier_1.closed disables traffic_light_2.mode.c_flashing;
    requirement invariant traffic_light_2.mode.red and boom_barrier_2.closed disables traffic_light_2.mode.c_flashing;
    requirement invariant j32.mode.off disables traffic_light_2.mode.c_flashing;
    requirement invariant traffic_light_2.mode.off and not j32.timer_release_signal.finished disables traffic_light_2.mode.c_flashing;
    requirement invariant traffic_light_2.mode.c_off needs mode.operational;
    requirement invariant traffic_light_2.mode.c_flashing needs traffic_light_2.mode.red and mode.operational or traffic_light_2.mode.off and not mode.operational;
    requirement invariant traffic_light_2.mode.c_yellow needs not mode.operational;
  end
  group traffic_light_3_requirements:
    requirement invariant traffic_light_3.mode.red and boom_barrier_1.closed disables traffic_light_3.mode.c_flashing;
    requirement invariant traffic_light_3.mode.red and boom_barrier_2.closed disables traffic_light_3.mode.c_flashing;
    requirement invariant j32.mode.off disables traffic_light_3.mode.c_flashing;
    requirement invariant traffic_light_3.mode.off and not j32.timer_release_signal.finished disables traffic_light_3.mode.c_flashing;
    requirement invariant traffic_light_3.mode.c_off needs mode.operational;
    requirement invariant traffic_light_3.mode.c_flashing needs traffic_light_3.mode.red and mode.operational or traffic_light_3.mode.off and not mode.operational;
    requirement invariant traffic_light_3.mode.c_yellow needs not mode.operational;
  end
  group ventilation_1_requirements:
    requirement invariant ventilation_entrance.c_0 needs mode.operational or mode.support;
    requirement invariant ventilation_entrance.c_0 needs smoke_detection.mode = 0 or mode.support;
    requirement invariant ventilation_entrance.c_1 needs mode.operational;
    requirement invariant ventilation_entrance.c_1 needs smoke_detection.mode = 1;
    requirement invariant ventilation_entrance.c_2 needs mode.operational;
    requirement invariant ventilation_entrance.c_2 needs smoke_detection.mode = 2;
    requirement invariant ventilation_entrance.c_3 needs mode.operational;
    requirement invariant ventilation_entrance.c_3 needs smoke_detection.mode = 3;
    requirement invariant ventilation_entrance.c_4 needs mode.operational and smoke_detection.mode = 4 or mode.recovery and smoke_detection.mode < 5;
    requirement invariant ventilation_entrance.c_5 needs mode.operational or mode.recovery;
    requirement invariant ventilation_entrance.c_5 needs smoke_detection.mode = 5;
    requirement invariant ventilation_entrance.c_6 needs mode.operational or mode.recovery;
    requirement invariant ventilation_entrance.c_6 needs smoke_detection.mode = 6;
    requirement invariant ventilation_entrance.c_7 needs mode.operational or mode.recovery;
    requirement invariant ventilation_entrance.c_7 needs smoke_detection.mode = 7;
    requirement invariant ventilation_entrance.c_8 needs (mode.operational or mode.recovery) and smoke_detection.mode = 8 or mode.emergency;
  end
  group ventilation_2_requirements:
    requirement invariant ventilation.c_0 needs mode.operational;
    requirement invariant ventilation.c_0 needs smoke_detection.mode = 0;
    requirement invariant ventilation.c_1 needs mode.operational;
    requirement invariant ventilation.c_1 needs smoke_detection.mode = 1;
    requirement invariant ventilation.c_2 needs mode.operational;
    requirement invariant ventilation.c_2 needs smoke_detection.mode = 2;
    requirement invariant ventilation.c_3 needs mode.operational;
    requirement invariant ventilation.c_3 needs smoke_detection.mode = 3;
    requirement invariant ventilation.c_4 needs mode.operational and smoke_detection.mode = 4 or mode.recovery and smoke_detection.mode < 5;
    requirement invariant ventilation.c_5 needs mode.operational or mode.recovery;
    requirement invariant ventilation.c_5 needs smoke_detection.mode = 5;
    requirement invariant ventilation.c_6 needs (mode.operational or mode.recovery) and smoke_detection.mode = 6 or mode.support and smoke_detection.mode < 7;
    requirement invariant ventilation.c_7 needs mode.operational or mode.recovery or mode.support;
    requirement invariant ventilation.c_7 needs smoke_detection.mode = 7;
    requirement invariant ventilation.c_8 needs smoke_detection.mode = 8 or mode.emergency;
  end
  group lighting_1_requirements:
    requirement invariant lighting.c_0 needs mode.operational;
    requirement invariant lighting.c_0 needs lightsensor.mode = 0;
    requirement invariant lighting.c_1 needs mode.operational;
    requirement invariant lighting.c_1 needs lightsensor.mode = 1;
    requirement invariant lighting.c_2 needs mode.operational;
    requirement invariant lighting.c_2 needs lightsensor.mode = 2;
    requirement invariant lighting.c_3 needs mode.operational;
    requirement invariant lighting.c_3 needs lightsensor.mode = 3;
    requirement invariant lighting.c_4 needs mode.operational and lightsensor.mode = 4 or mode.recovery and lightsensor.mode < 5;
    requirement invariant lighting.c_5 needs mode.operational or mode.recovery;
    requirement invariant lighting.c_5 needs lightsensor.mode = 5;
    requirement invariant lighting.c_6 needs (mode.operational or mode.recovery) and lightsensor.mode = 6 or mode.support and lightsensor.mode < 7;
    requirement invariant lighting.c_7 needs mode.operational or mode.recovery or mode.support;
    requirement invariant lighting.c_7 needs lightsensor.mode = 7;
    requirement invariant lighting.c_8 needs lightsensor.mode = 8 or mode.emergency;
  end
  group escape_door_1_requirements:
    requirement invariant escape_door.contour_lighting.c_on needs evacuation.on;
    requirement invariant escape_door.contour_lighting.c_off needs evacuation.off;
    requirement invariant escape_door.sound_beacon.c_on needs switch_timer_audio.on_2;
    requirement invariant escape_door.sound_beacon.c_on needs intercom.off;
    requirement invariant escape_door.sound_beacon.c_off needs not switch_timer_audio.on_2;
  end
  group intercom_1_requirements:
    requirement invariant intercom.c_on needs switch_timer_audio.on_1;
    requirement invariant intercom.c_on needs escape_door.sound_beacon.off;
    requirement invariant intercom.c_off needs not switch_timer_audio.on_1;
  end
  requirement invariant mode.c_operational needs mode.recovery;
  requirement invariant mode.c_operational needs button_operational.observer.pressed;
  requirement invariant mode.c_emergency needs mode.operational;
  requirement invariant mode.c_emergency needs SOS.on;
  requirement invariant mode.c_emergency needs smoke_detection.mode > 3;
  requirement invariant mode.c_emergency needs emergency_cabinet_A.sensor_open.on or emergency_cabinet_C.sensor_open.on;
  requirement invariant mode.c_emergency needs emergency_cabinet_A.hand_extinguisher.on or emergency_cabinet_A.fire_hose.on or emergency_cabinet_A.emergency_phone.on or emergency_cabinet_C.hand_extinguisher.on or emergency_cabinet_C.emergency_phone.on;
  requirement invariant mode.c_recovery needs mode.emergency or mode.support;
  requirement invariant mode.c_support needs not mode.emergency;
  requirement invariant standby.c_on needs mode.operational;
  requirement invariant standby.c_on needs smoke_detection.mode > 3 or emergency_cabinet_A.hand_extinguisher.on or emergency_cabinet_A.fire_hose.on or emergency_cabinet_C.hand_extinguisher.on;
  requirement invariant standby.c_off needs not mode.operational;
  requirement invariant evacuation.c_on needs button_evacuation.observer.pressed;
  requirement invariant evacuation.c_off needs not mode.emergency;
  requirement invariant j32.mode.c_on needs mode.emergency or mode.support;
  requirement invariant j32.mode.c_off needs traffic_light_1.mode.off;
  requirement invariant j32.mode.c_off needs traffic_light_2.mode.off;
  requirement invariant j32.mode.c_off needs traffic_light_3.mode.off;
  requirement invariant j32.mode.c_off needs mode.operational;
  requirement invariant matrix_sign_traffic_light.c_on needs not mode.operational;
  requirement invariant matrix_sign_traffic_light.c_on needs not traffic_light_1.mode.red;
  requirement invariant matrix_sign_traffic_light.c_on needs not traffic_light_2.mode.red;
  requirement invariant matrix_sign_traffic_light.c_on needs not traffic_light_3.mode.red;
  requirement invariant matrix_sign_traffic_light.c_off needs mode.operational or traffic_light_1.mode.red or traffic_light_2.mode.red or traffic_light_3.mode.red;
  requirement invariant matrix_sign_free.c_on needs not mode.operational;
  requirement invariant matrix_sign_free.c_off needs mode.operational;
  requirement invariant ventilation_direction.c_against needs mode.support;
  requirement invariant ventilation_direction.c_along needs not mode.support;
  requirement invariant channel.c_1_on needs conditie_camera_1;
  requirement invariant channel.c_2_on needs conditie_camera_2;
  requirement invariant channel.c_3_on needs conditie_camera_3;
  requirement invariant channel.c_4_on needs conditie_camera_4;
  requirement invariant channel.c_5_on needs conditie_camera_5;
  requirement invariant channel.c_6_on needs conditie_camera_6;
  requirement invariant channel.c_1_off needs not conditie_camera_1;
  requirement invariant channel.c_2_off needs not conditie_camera_2;
  requirement invariant channel.c_3_off needs not conditie_camera_3;
  requirement invariant channel.c_4_off needs not conditie_camera_4;
  requirement invariant channel.c_5_off needs not conditie_camera_5;
  requirement invariant channel.c_6_off needs not conditie_camera_6;
  requirement invariant recorder.c_on needs mode.emergency or mode.support;
  requirement invariant recorder.c_off needs mode.operational or mode.recovery;
  requirement invariant switch_timer_audio.c_on needs evacuation.on;
  requirement invariant switch_timer_audio.c_off needs evacuation.off;
end
group tube_2:
  alg bool conditie_camera_1 = not mode.operational and (not traffic_light_1.mode.red or not traffic_light_2.mode.red or not traffic_light_3.mode.red);
  alg bool conditie_camera_2 = boom_barrier_1.actuator_down.on or boom_barrier_2.actuator_down.on;
  alg bool conditie_camera_3 = mode.operational and (emergency_cabinet_A.sensor_open.on or emergency_cabinet_C.sensor_open.on);
  alg bool conditie_camera_4 = SOS.on;
  alg bool conditie_camera_5 = smoke_detection.mode > 4;
  alg bool conditie_camera_6 = escape_door.sensor_open.on;
  group boom_barrier_1:
    alg bool open = sensor_open.on and actuator_up.off and actuator_down.off;
    alg bool closed = sensor_closed.on and actuator_up.off and actuator_down.off;
    plant automaton actuator_up:
      controllable c_on;
      controllable c_off;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial;
        marked OffMarked;
        edge c_on goto on;
      location on:
        marked OnMarked;
        edge c_off goto off;
    end
    plant automaton actuator_down:
      controllable c_on;
      controllable c_off;
      controllable c_off_emergency;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial;
        marked OffMarked;
        edge c_on goto on;
      location on:
        marked OnMarked;
        edge c_off, c_off_emergency goto off;
    end
    plant automaton sensor_open:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = false;
      alg bool OffMarked = false;
      alg bool OnMarked = true;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton sensor_closed:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton physical_relation:
      location:
        initial;
        marked;
        edge sensor_open.u_on when actuator_up.on and sensor_closed.off;
        edge sensor_closed.u_off when actuator_up.on;
        edge sensor_open.u_off when actuator_down.on;
        edge sensor_closed.u_on when actuator_down.on and sensor_open.off;
    end
    plant automaton obstacle_detection:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    requirement invariant actuator_up.c_on needs actuator_down.off;
    requirement invariant actuator_up.c_on needs not open;
    requirement invariant actuator_up.c_off needs sensor_open.on;
    requirement invariant actuator_down.c_on needs actuator_up.off;
    requirement invariant actuator_down.c_on needs not closed;
    requirement invariant actuator_down.c_off needs sensor_closed.on;
    requirement invariant actuator_down.c_on needs obstacle_detection.off;
  end
  group boom_barrier_2:
    alg bool open = sensor_open.on and actuator_up.off and actuator_down.off;
    alg bool closed = sensor_closed.on and actuator_up.off and actuator_down.off;
    plant automaton actuator_up:
      controllable c_on;
      controllable c_off;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial;
        marked OffMarked;
        edge c_on goto on;
      location on:
        marked OnMarked;
        edge c_off goto off;
    end
    plant automaton actuator_down:
      controllable c_on;
      controllable c_off;
      controllable c_off_emergency;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial;
        marked OffMarked;
        edge c_on goto on;
      location on:
        marked OnMarked;
        edge c_off, c_off_emergency goto off;
    end
    plant automaton sensor_open:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = false;
      alg bool OffMarked = false;
      alg bool OnMarked = true;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton sensor_closed:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton physical_relation:
      location:
        initial;
        marked;
        edge sensor_open.u_on when actuator_up.on and sensor_closed.off;
        edge sensor_closed.u_off when actuator_up.on;
        edge sensor_open.u_off when actuator_down.on;
        edge sensor_closed.u_on when actuator_down.on and sensor_open.off;
    end
    plant automaton obstacle_detection:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    requirement invariant actuator_up.c_on needs actuator_down.off;
    requirement invariant actuator_up.c_on needs not open;
    requirement invariant actuator_up.c_off needs sensor_open.on;
    requirement invariant actuator_down.c_on needs actuator_up.off;
    requirement invariant actuator_down.c_on needs not closed;
    requirement invariant actuator_down.c_off needs sensor_closed.on;
    requirement invariant actuator_down.c_on needs obstacle_detection.off;
  end
  group traffic_light_1:
    plant automaton mode:
      controllable c_off;
      controllable c_yellow;
      controllable c_flashing;
      controllable c_red;
      location off:
        initial;
        marked;
        edge c_flashing goto flashing;
      location flashing:
        edge c_off goto off;
        edge c_yellow goto yellow;
      location yellow:
        edge c_red goto red;
      location red:
        edge c_flashing goto flashing;
    end
    plant automaton release_signal:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton timer_release_signal:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton relation:
      location:
        initial;
        marked;
        edge release_signal.u_on when mode.red and timer_release_signal.finished;
        edge release_signal.u_off when not mode.red;
    end
    requirement invariant timer_release_signal.c_on needs mode.red;
    requirement invariant timer_release_signal.c_reset needs not mode.red;
  end
  group traffic_light_2:
    plant automaton mode:
      controllable c_off;
      controllable c_yellow;
      controllable c_flashing;
      controllable c_red;
      location off:
        initial;
        marked;
        edge c_flashing goto flashing;
      location flashing:
        edge c_off goto off;
        edge c_yellow goto yellow;
      location yellow:
        edge c_red goto red;
      location red:
        edge c_flashing goto flashing;
    end
    plant automaton release_signal:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton timer_release_signal:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton relation:
      location:
        initial;
        marked;
        edge release_signal.u_on when mode.red and timer_release_signal.finished;
        edge release_signal.u_off when not mode.red;
    end
    requirement invariant timer_release_signal.c_on needs mode.red;
    requirement invariant timer_release_signal.c_reset needs not mode.red;
  end
  group traffic_light_3:
    plant automaton mode:
      controllable c_off;
      controllable c_yellow;
      controllable c_flashing;
      controllable c_red;
      location off:
        initial;
        marked;
        edge c_flashing goto flashing;
      location flashing:
        edge c_off goto off;
        edge c_yellow goto yellow;
      location yellow:
        edge c_red goto red;
      location red:
        edge c_flashing goto flashing;
    end
    plant automaton release_signal:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton timer_release_signal:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    plant automaton relation:
      location:
        initial;
        marked;
        edge release_signal.u_on when mode.red and timer_release_signal.finished;
        edge release_signal.u_off when not mode.red;
    end
    requirement invariant timer_release_signal.c_on needs mode.red;
    requirement invariant timer_release_signal.c_reset needs not mode.red;
  end
  group j32:
    plant automaton mode:
      controllable c_on;
      controllable c_off;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial;
        marked OffMarked;
        edge c_on goto on;
      location on:
        marked OnMarked;
        edge c_off goto off;
    end
    plant automaton timer_release_signal:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      location off:
        initial;
        marked;
        edge c_on goto running;
      location running:
        edge c_reset goto off;
        edge u_timeout goto finished;
      location finished:
        edge c_reset goto off;
    end
    requirement invariant timer_release_signal.c_on needs mode.on;
    requirement invariant timer_release_signal.c_reset needs mode.off;
  end
  plant automaton matrix_sign_traffic_light:
    controllable c_on;
    controllable c_off;
    alg bool OffMarked = true;
    alg bool OnMarked = false;
    location off:
      initial;
      marked OffMarked;
      edge c_on goto on;
    location on:
      marked OnMarked;
      edge c_off goto off;
  end
  plant automaton matrix_sign_free:
    controllable c_on;
    controllable c_off;
    alg bool OffMarked = true;
    alg bool OnMarked = false;
    location off:
      initial;
      marked OffMarked;
      edge c_on goto on;
    location on:
      marked OnMarked;
      edge c_off goto off;
  end
  plant automaton SOS:
    uncontrollable u_on;
    uncontrollable u_off;
    alg bool OffInitial = true;
    alg bool OffMarked = true;
    alg bool OnMarked = false;
    location off:
      initial OffInitial;
      marked OffMarked;
      edge u_on goto on;
    location on:
      initial not OffInitial;
      marked OnMarked;
      edge u_off goto off;
  end
  group emergency_cabinet_A:
    plant automaton sensor_open:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton emergency_phone:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton hand_extinguisher:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton fire_hose:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
  end
  group emergency_cabinet_C:
    plant automaton sensor_open:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton emergency_phone:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton hand_extinguisher:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
  end
  plant automaton smoke_detection:
    disc int[0..8] mode = 0;
    uncontrollable u_0;
    uncontrollable u_1;
    uncontrollable u_2;
    uncontrollable u_3;
    uncontrollable u_4;
    uncontrollable u_5;
    uncontrollable u_6;
    uncontrollable u_7;
    uncontrollable u_8;
    location:
      initial;
      marked;
      edge u_0 when not(mode = 0) do mode := 0;
      edge u_1 when not(mode = 1) do mode := 1;
      edge u_2 when not(mode = 2) do mode := 2;
      edge u_3 when not(mode = 3) do mode := 3;
      edge u_4 when not(mode = 4) do mode := 4;
      edge u_5 when not(mode = 5) do mode := 5;
      edge u_6 when not(mode = 6) do mode := 6;
      edge u_7 when not(mode = 7) do mode := 7;
      edge u_8 when not(mode = 8) do mode := 8;
  end
  plant automaton ventilation:
    disc int[0..8] mode = 0;
    controllable c_0;
    controllable c_1;
    controllable c_2;
    controllable c_3;
    controllable c_4;
    controllable c_5;
    controllable c_6;
    controllable c_7;
    controllable c_8;
    location:
      initial;
      marked;
      edge c_0 when not(mode = 0) do mode := 0;
      edge c_1 when not(mode = 1) do mode := 1;
      edge c_2 when not(mode = 2) do mode := 2;
      edge c_3 when not(mode = 3) do mode := 3;
      edge c_4 when not(mode = 4) do mode := 4;
      edge c_5 when not(mode = 5) do mode := 5;
      edge c_6 when not(mode = 6) do mode := 6;
      edge c_7 when not(mode = 7) do mode := 7;
      edge c_8 when not(mode = 8) do mode := 8;
  end
  plant automaton ventilation_entrance:
    disc int[0..8] mode = 0;
    controllable c_0;
    controllable c_1;
    controllable c_2;
    controllable c_3;
    controllable c_4;
    controllable c_5;
    controllable c_6;
    controllable c_7;
    controllable c_8;
    location:
      initial;
      marked;
      edge c_0 when not(mode = 0) do mode := 0;
      edge c_1 when not(mode = 1) do mode := 1;
      edge c_2 when not(mode = 2) do mode := 2;
      edge c_3 when not(mode = 3) do mode := 3;
      edge c_4 when not(mode = 4) do mode := 4;
      edge c_5 when not(mode = 5) do mode := 5;
      edge c_6 when not(mode = 6) do mode := 6;
      edge c_7 when not(mode = 7) do mode := 7;
      edge c_8 when not(mode = 8) do mode := 8;
  end
  plant automaton ventilation_direction:
    controllable c_along;
    controllable c_against;
    location along:
      initial;
      marked;
      edge c_against goto against;
    location against:
      edge c_along goto along;
  end
  plant automaton lightsensor:
    disc int[0..8] mode = 0;
    uncontrollable u_0;
    uncontrollable u_1;
    uncontrollable u_2;
    uncontrollable u_3;
    uncontrollable u_4;
    uncontrollable u_5;
    uncontrollable u_6;
    uncontrollable u_7;
    uncontrollable u_8;
    location:
      initial;
      marked;
      edge u_0 when not(mode = 0) do mode := 0;
      edge u_1 when not(mode = 1) do mode := 1;
      edge u_2 when not(mode = 2) do mode := 2;
      edge u_3 when not(mode = 3) do mode := 3;
      edge u_4 when not(mode = 4) do mode := 4;
      edge u_5 when not(mode = 5) do mode := 5;
      edge u_6 when not(mode = 6) do mode := 6;
      edge u_7 when not(mode = 7) do mode := 7;
      edge u_8 when not(mode = 8) do mode := 8;
  end
  plant automaton lighting:
    disc int[0..8] mode = 0;
    controllable c_0;
    controllable c_1;
    controllable c_2;
    controllable c_3;
    controllable c_4;
    controllable c_5;
    controllable c_6;
    controllable c_7;
    controllable c_8;
    location:
      initial;
      marked;
      edge c_0 when not(mode = 0) do mode := 0;
      edge c_1 when not(mode = 1) do mode := 1;
      edge c_2 when not(mode = 2) do mode := 2;
      edge c_3 when not(mode = 3) do mode := 3;
      edge c_4 when not(mode = 4) do mode := 4;
      edge c_5 when not(mode = 5) do mode := 5;
      edge c_6 when not(mode = 6) do mode := 6;
      edge c_7 when not(mode = 7) do mode := 7;
      edge c_8 when not(mode = 8) do mode := 8;
  end
  plant automaton channel:
    controllable c_1_off;
    controllable c_2_off;
    controllable c_3_off;
    controllable c_4_off;
    controllable c_5_off;
    controllable c_6_off;
    controllable c_1_on;
    controllable c_2_on;
    controllable c_3_on;
    controllable c_4_on;
    controllable c_5_on;
    controllable c_6_on;
    location off:
      initial;
      marked;
      edge c_1_on goto camera_1;
      edge c_2_on goto camera_2;
      edge c_3_on goto camera_3;
      edge c_4_on goto camera_4;
      edge c_5_on goto camera_5;
      edge c_6_on goto camera_6;
    location camera_1:
      edge c_1_off goto off;
    location camera_2:
      edge c_2_off goto off;
    location camera_3:
      edge c_3_off goto off;
    location camera_4:
      edge c_4_off goto off;
    location camera_5:
      edge c_5_off goto off;
    location camera_6:
      edge c_6_off goto off;
  end
  plant automaton recorder:
    controllable c_on;
    controllable c_off;
    alg bool OffMarked = true;
    alg bool OnMarked = false;
    location off:
      initial;
      marked OffMarked;
      edge c_on goto on;
    location on:
      marked OnMarked;
      edge c_off goto off;
  end
  group escape_door:
    plant automaton sensor_open:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool OffInitial = true;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial OffInitial;
        marked OffMarked;
        edge u_on goto on;
      location on:
        initial not OffInitial;
        marked OnMarked;
        edge u_off goto off;
    end
    plant automaton sound_beacon:
      controllable c_on;
      controllable c_off;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial;
        marked OffMarked;
        edge c_on goto on;
      location on:
        marked OnMarked;
        edge c_off goto off;
    end
    plant automaton contour_lighting:
      controllable c_on;
      controllable c_off;
      alg bool OffMarked = true;
      alg bool OnMarked = false;
      location off:
        initial;
        marked OffMarked;
        edge c_on goto on;
      location on:
        marked OnMarked;
        edge c_off goto off;
    end
  end
  plant automaton intercom:
    controllable c_on;
    controllable c_off;
    alg bool OffMarked = true;
    alg bool OnMarked = false;
    location off:
      initial;
      marked OffMarked;
      edge c_on goto on;
    location on:
      marked OnMarked;
      edge c_off goto off;
  end
  plant automaton switch_timer_audio:
    controllable c_on;
    controllable c_off;
    uncontrollable u_timeout;
    location off:
      initial;
      marked;
      edge c_on goto on_1;
    location on_1:
      edge c_off goto off;
      edge u_timeout goto on_2;
    location on_2:
      edge c_off goto off;
      edge u_timeout goto on_1;
  end
  plant automaton mode:
    controllable c_operational;
    controllable c_emergency;
    controllable c_recovery;
    controllable c_support;
    location operational:
      initial;
      marked;
      edge c_emergency goto emergency;
      edge c_recovery goto recovery;
      edge c_support goto support;
    location emergency:
      edge c_recovery goto recovery;
      edge c_operational goto operational;
      edge c_support goto support;
    location recovery:
      edge c_operational goto operational;
      edge c_emergency goto emergency;
      edge c_support goto support;
    location support:
      edge c_operational goto operational;
      edge c_emergency goto emergency;
      edge c_recovery goto recovery;
  end
  plant automaton standby:
    controllable c_on;
    controllable c_off;
    alg bool OffMarked = true;
    alg bool OnMarked = false;
    location off:
      initial;
      marked OffMarked;
      edge c_on goto on;
    location on:
      marked OnMarked;
      edge c_off goto off;
  end
  plant automaton evacuation:
    controllable c_on;
    controllable c_off;
    alg bool OffMarked = true;
    alg bool OnMarked = false;
    location off:
      initial;
      marked OffMarked;
      edge c_on goto on;
    location on:
      marked OnMarked;
      edge c_off goto off;
  end
  group button_operational:
    alg bool condition_press = mode.recovery;
    alg bool condition_done = mode.operational;
    plant automaton button:
      uncontrollable u_press;
      location:
        initial;
        marked;
        edge u_press;
    end
    plant automaton observer:
      monitor button.u_press;
      controllable c_done;
      location released:
        initial;
        marked;
        edge button.u_press when condition_press goto pressed;
      location pressed:
        marked;
        edge c_done when condition_done goto released;
    end
  end
  group button_evacuation:
    alg bool condition_press = mode.emergency and evacuation.off;
    alg bool condition_done = evacuation.on;
    plant automaton button:
      uncontrollable u_press;
      location:
        initial;
        marked;
        edge u_press;
    end
    plant automaton observer:
      monitor button.u_press;
      controllable c_done;
      location released:
        initial;
        marked;
        edge button.u_press when condition_press goto pressed;
      location pressed:
        marked;
        edge c_done when condition_done goto released;
    end
  end
  group button_recovery:
    alg bool condition_press = mode.emergency;
    alg bool condition_done = mode.recovery;
    plant automaton button:
      uncontrollable u_press;
      location:
        initial;
        marked;
        edge u_press;
    end
    plant automaton observer:
      monitor button.u_press;
      controllable c_done;
      location released:
        initial;
        marked;
        edge button.u_press when condition_press goto pressed;
      location pressed:
        marked;
        edge c_done when condition_done goto released;
    end
  end
  group boom_barrier_1_requirements:
    requirement invariant boom_barrier_1.actuator_down.c_on needs traffic_light_1.release_signal.on;
    requirement invariant boom_barrier_1.actuator_down.c_on needs traffic_light_2.release_signal.on;
    requirement invariant boom_barrier_1.actuator_down.c_on needs traffic_light_3.release_signal.on;
    requirement invariant boom_barrier_1.actuator_down.c_on needs not mode.operational;
    requirement invariant boom_barrier_1.actuator_down.c_off_emergency needs boom_barrier_1.obstacle_detection.on or traffic_light_1.release_signal.off or traffic_light_2.release_signal.off or traffic_light_3.release_signal.off;
    requirement invariant boom_barrier_1.actuator_up.c_on needs mode.operational;
  end
  group boom_barrier_2_requirements:
    requirement invariant boom_barrier_2.actuator_down.c_on needs traffic_light_1.release_signal.on;
    requirement invariant boom_barrier_2.actuator_down.c_on needs traffic_light_2.release_signal.on;
    requirement invariant boom_barrier_2.actuator_down.c_on needs traffic_light_3.release_signal.on;
    requirement invariant boom_barrier_2.actuator_down.c_on needs not mode.operational;
    requirement invariant boom_barrier_2.actuator_down.c_off_emergency needs boom_barrier_2.obstacle_detection.on or traffic_light_1.release_signal.off or traffic_light_2.release_signal.off or traffic_light_3.release_signal.off;
    requirement invariant boom_barrier_2.actuator_up.c_on needs mode.operational;
  end
  group traffic_light_1_requirements:
    requirement invariant traffic_light_1.mode.red and boom_barrier_1.closed disables traffic_light_1.mode.c_flashing;
    requirement invariant traffic_light_1.mode.red and boom_barrier_2.closed disables traffic_light_1.mode.c_flashing;
    requirement invariant j32.mode.off disables traffic_light_1.mode.c_flashing;
    requirement invariant traffic_light_1.mode.off and not j32.timer_release_signal.finished disables traffic_light_1.mode.c_flashing;
    requirement invariant traffic_light_1.mode.c_off needs mode.operational;
    requirement invariant traffic_light_1.mode.c_flashing needs traffic_light_1.mode.red and mode.operational or traffic_light_1.mode.off and not mode.operational;
    requirement invariant traffic_light_1.mode.c_yellow needs not mode.operational;
  end
  group traffic_light_2_requirements:
    requirement invariant traffic_light_2.mode.red and boom_barrier_1.closed disables traffic_light_2.mode.c_flashing;
    requirement invariant traffic_light_2.mode.red and boom_barrier_2.closed disables traffic_light_2.mode.c_flashing;
    requirement invariant j32.mode.off disables traffic_light_2.mode.c_flashing;
    requirement invariant traffic_light_2.mode.off and not j32.timer_release_signal.finished disables traffic_light_2.mode.c_flashing;
    requirement invariant traffic_light_2.mode.c_off needs mode.operational;
    requirement invariant traffic_light_2.mode.c_flashing needs traffic_light_2.mode.red and mode.operational or traffic_light_2.mode.off and not mode.operational;
    requirement invariant traffic_light_2.mode.c_yellow needs not mode.operational;
  end
  group traffic_light_3_requirements:
    requirement invariant traffic_light_3.mode.red and boom_barrier_1.closed disables traffic_light_3.mode.c_flashing;
    requirement invariant traffic_light_3.mode.red and boom_barrier_2.closed disables traffic_light_3.mode.c_flashing;
    requirement invariant j32.mode.off disables traffic_light_3.mode.c_flashing;
    requirement invariant traffic_light_3.mode.off and not j32.timer_release_signal.finished disables traffic_light_3.mode.c_flashing;
    requirement invariant traffic_light_3.mode.c_off needs mode.operational;
    requirement invariant traffic_light_3.mode.c_flashing needs traffic_light_3.mode.red and mode.operational or traffic_light_3.mode.off and not mode.operational;
    requirement invariant traffic_light_3.mode.c_yellow needs not mode.operational;
  end
  group ventilation_1_requirements:
    requirement invariant ventilation_entrance.c_0 needs mode.operational or mode.support;
    requirement invariant ventilation_entrance.c_0 needs smoke_detection.mode = 0 or mode.support;
    requirement invariant ventilation_entrance.c_1 needs mode.operational;
    requirement invariant ventilation_entrance.c_1 needs smoke_detection.mode = 1;
    requirement invariant ventilation_entrance.c_2 needs mode.operational;
    requirement invariant ventilation_entrance.c_2 needs smoke_detection.mode = 2;
    requirement invariant ventilation_entrance.c_3 needs mode.operational;
    requirement invariant ventilation_entrance.c_3 needs smoke_detection.mode = 3;
    requirement invariant ventilation_entrance.c_4 needs mode.operational and smoke_detection.mode = 4 or mode.recovery and smoke_detection.mode < 5;
    requirement invariant ventilation_entrance.c_5 needs mode.operational or mode.recovery;
    requirement invariant ventilation_entrance.c_5 needs smoke_detection.mode = 5;
    requirement invariant ventilation_entrance.c_6 needs mode.operational or mode.recovery;
    requirement invariant ventilation_entrance.c_6 needs smoke_detection.mode = 6;
    requirement invariant ventilation_entrance.c_7 needs mode.operational or mode.recovery;
    requirement invariant ventilation_entrance.c_7 needs smoke_detection.mode = 7;
    requirement invariant ventilation_entrance.c_8 needs (mode.operational or mode.recovery) and smoke_detection.mode = 8 or mode.emergency;
  end
  group ventilation_2_requirements:
    requirement invariant ventilation.c_0 needs mode.operational;
    requirement invariant ventilation.c_0 needs smoke_detection.mode = 0;
    requirement invariant ventilation.c_1 needs mode.operational;
    requirement invariant ventilation.c_1 needs smoke_detection.mode = 1;
    requirement invariant ventilation.c_2 needs mode.operational;
    requirement invariant ventilation.c_2 needs smoke_detection.mode = 2;
    requirement invariant ventilation.c_3 needs mode.operational;
    requirement invariant ventilation.c_3 needs smoke_detection.mode = 3;
    requirement invariant ventilation.c_4 needs mode.operational and smoke_detection.mode = 4 or mode.recovery and smoke_detection.mode < 5;
    requirement invariant ventilation.c_5 needs mode.operational or mode.recovery;
    requirement invariant ventilation.c_5 needs smoke_detection.mode = 5;
    requirement invariant ventilation.c_6 needs (mode.operational or mode.recovery) and smoke_detection.mode = 6 or mode.support and smoke_detection.mode < 7;
    requirement invariant ventilation.c_7 needs mode.operational or mode.recovery or mode.support;
    requirement invariant ventilation.c_7 needs smoke_detection.mode = 7;
    requirement invariant ventilation.c_8 needs smoke_detection.mode = 8 or mode.emergency;
  end
  group lighting_1_requirements:
    requirement invariant lighting.c_0 needs mode.operational;
    requirement invariant lighting.c_0 needs lightsensor.mode = 0;
    requirement invariant lighting.c_1 needs mode.operational;
    requirement invariant lighting.c_1 needs lightsensor.mode = 1;
    requirement invariant lighting.c_2 needs mode.operational;
    requirement invariant lighting.c_2 needs lightsensor.mode = 2;
    requirement invariant lighting.c_3 needs mode.operational;
    requirement invariant lighting.c_3 needs lightsensor.mode = 3;
    requirement invariant lighting.c_4 needs mode.operational and lightsensor.mode = 4 or mode.recovery and lightsensor.mode < 5;
    requirement invariant lighting.c_5 needs mode.operational or mode.recovery;
    requirement invariant lighting.c_5 needs lightsensor.mode = 5;
    requirement invariant lighting.c_6 needs (mode.operational or mode.recovery) and lightsensor.mode = 6 or mode.support and lightsensor.mode < 7;
    requirement invariant lighting.c_7 needs mode.operational or mode.recovery or mode.support;
    requirement invariant lighting.c_7 needs lightsensor.mode = 7;
    requirement invariant lighting.c_8 needs lightsensor.mode = 8 or mode.emergency;
  end
  group escape_door_1_requirements:
    requirement invariant escape_door.contour_lighting.c_on needs evacuation.on;
    requirement invariant escape_door.contour_lighting.c_off needs evacuation.off;
    requirement invariant escape_door.sound_beacon.c_on needs switch_timer_audio.on_2;
    requirement invariant escape_door.sound_beacon.c_on needs intercom.off;
    requirement invariant escape_door.sound_beacon.c_off needs not switch_timer_audio.on_2;
  end
  group intercom_1_requirements:
    requirement invariant intercom.c_on needs switch_timer_audio.on_1;
    requirement invariant intercom.c_on needs escape_door.sound_beacon.off;
    requirement invariant intercom.c_off needs not switch_timer_audio.on_1;
  end
  requirement invariant mode.c_operational needs mode.recovery;
  requirement invariant mode.c_operational needs button_operational.observer.pressed;
  requirement invariant mode.c_emergency needs mode.operational;
  requirement invariant mode.c_emergency needs SOS.on;
  requirement invariant mode.c_emergency needs smoke_detection.mode > 3;
  requirement invariant mode.c_emergency needs emergency_cabinet_A.sensor_open.on or emergency_cabinet_C.sensor_open.on;
  requirement invariant mode.c_emergency needs emergency_cabinet_A.hand_extinguisher.on or emergency_cabinet_A.fire_hose.on or emergency_cabinet_A.emergency_phone.on or emergency_cabinet_C.hand_extinguisher.on or emergency_cabinet_C.emergency_phone.on;
  requirement invariant mode.c_recovery needs mode.emergency or mode.support;
  requirement invariant mode.c_support needs not mode.emergency;
  requirement invariant standby.c_on needs mode.operational;
  requirement invariant standby.c_on needs smoke_detection.mode > 3 or emergency_cabinet_A.hand_extinguisher.on or emergency_cabinet_A.fire_hose.on or emergency_cabinet_C.hand_extinguisher.on;
  requirement invariant standby.c_off needs not mode.operational;
  requirement invariant evacuation.c_on needs button_evacuation.observer.pressed;
  requirement invariant evacuation.c_off needs not mode.emergency;
  requirement invariant j32.mode.c_on needs mode.emergency or mode.support;
  requirement invariant j32.mode.c_off needs traffic_light_1.mode.off;
  requirement invariant j32.mode.c_off needs traffic_light_2.mode.off;
  requirement invariant j32.mode.c_off needs traffic_light_3.mode.off;
  requirement invariant j32.mode.c_off needs mode.operational;
  requirement invariant matrix_sign_traffic_light.c_on needs not mode.operational;
  requirement invariant matrix_sign_traffic_light.c_on needs not traffic_light_1.mode.red;
  requirement invariant matrix_sign_traffic_light.c_on needs not traffic_light_2.mode.red;
  requirement invariant matrix_sign_traffic_light.c_on needs not traffic_light_3.mode.red;
  requirement invariant matrix_sign_traffic_light.c_off needs mode.operational or traffic_light_1.mode.red or traffic_light_2.mode.red or traffic_light_3.mode.red;
  requirement invariant matrix_sign_free.c_on needs not mode.operational;
  requirement invariant matrix_sign_free.c_off needs mode.operational;
  requirement invariant ventilation_direction.c_against needs mode.support;
  requirement invariant ventilation_direction.c_along needs not mode.support;
  requirement invariant channel.c_1_on needs conditie_camera_1;
  requirement invariant channel.c_2_on needs conditie_camera_2;
  requirement invariant channel.c_3_on needs conditie_camera_3;
  requirement invariant channel.c_4_on needs conditie_camera_4;
  requirement invariant channel.c_5_on needs conditie_camera_5;
  requirement invariant channel.c_6_on needs conditie_camera_6;
  requirement invariant channel.c_1_off needs not conditie_camera_1;
  requirement invariant channel.c_2_off needs not conditie_camera_2;
  requirement invariant channel.c_3_off needs not conditie_camera_3;
  requirement invariant channel.c_4_off needs not conditie_camera_4;
  requirement invariant channel.c_5_off needs not conditie_camera_5;
  requirement invariant channel.c_6_off needs not conditie_camera_6;
  requirement invariant recorder.c_on needs mode.emergency or mode.support;
  requirement invariant recorder.c_off needs mode.operational or mode.recovery;
  requirement invariant switch_timer_audio.c_on needs evacuation.on;
  requirement invariant switch_timer_audio.c_off needs evacuation.off;
end
group middle_tunnel_channel:
  plant automaton pressure:
    controllable c_off;
    controllable c_left;
    controllable c_right;
    location off:
      initial;
      marked;
      edge c_left goto left;
      edge c_right goto right;
    location left:
      edge c_off goto off;
      edge c_right goto right;
    location right:
      edge c_off goto off;
      edge c_left goto left;
  end
  plant automaton lighting:
    controllable c_on;
    controllable c_off;
    alg bool OffMarked = true;
    alg bool OnMarked = false;
    location off:
      initial;
      marked OffMarked;
      edge c_on goto on;
    location on:
      marked OnMarked;
      edge c_off goto off;
  end
  plant automaton dynamic_escaperoute_indication:
    controllable c_off;
    controllable c_upward;
    controllable c_downward;
    location off:
      initial;
      marked;
      edge c_upward goto upward;
      edge c_downward goto downward;
    location upward:
      edge c_off goto off;
      edge c_downward goto downward;
    location downward:
      edge c_off goto off;
      edge c_upward goto upward;
  end
  plant automaton intercom:
    controllable c_on;
    controllable c_off;
    alg bool OffMarked = true;
    alg bool OnMarked = false;
    location off:
      initial;
      marked OffMarked;
      edge c_on goto on;
    location on:
      marked OnMarked;
      edge c_off goto off;
  end
  requirement invariant pressure.c_left needs pressure.off;
  requirement invariant pressure.c_right needs pressure.off;
  requirement invariant dynamic_escaperoute_indication.c_upward needs dynamic_escaperoute_indication.off;
  requirement invariant dynamic_escaperoute_indication.c_downward needs dynamic_escaperoute_indication.off;
end
group pressure_1_requirements:
  requirement invariant middle_tunnel_channel.pressure.c_left needs tube_1.standby.on or not tube_1.mode.operational and not tube_1.mode.support;
  requirement invariant middle_tunnel_channel.pressure.c_right needs tube_2.standby.on or not tube_2.mode.operational and not tube_2.mode.support;
  requirement invariant middle_tunnel_channel.pressure.c_off needs tube_1.mode.operational;
  requirement invariant middle_tunnel_channel.pressure.c_off needs tube_2.mode.operational;
  requirement invariant middle_tunnel_channel.pressure.c_off needs tube_1.standby.off;
  requirement invariant middle_tunnel_channel.pressure.c_off needs tube_2.standby.off;
end
requirement invariant tube_1_mode_c_support needs tube_2_mode.emergency;
requirement invariant tube_2_mode_c_support needs tube_1_mode.emergency;
requirement invariant tube_1_mode.emergency disables tube_2_standby_c_on;
requirement invariant tube_1_mode.emergency disables tube_2_mode_c_emergency;
requirement invariant tube_2_mode.emergency disables tube_1_standby_c_on;
requirement invariant tube_2_mode.emergency disables tube_1_mode_c_emergency;
requirement invariant tube_1_evacuation_c_on needs tube_2_mode.support;
requirement invariant tube_2_evacuation_c_on needs tube_1_mode.support;
requirement invariant tube_1_mode_c_recovery needs tube_1_mode.emergency and tube_1_button_recovery_observer.pressed or tube_1_mode.support and tube_2_mode.recovery;
requirement invariant tube_2_mode_c_recovery needs tube_2_mode.emergency and tube_2_button_recovery_observer.pressed or tube_2_mode.support and tube_1_mode.recovery;
requirement invariant middle_tunnel_channel_lighting_c_on needs tube_1_standby.on or tube_1_mode.emergency or tube_2_standby.on or tube_2_mode.emergency;
requirement invariant middle_tunnel_channel_lighting_c_off needs tube_1_standby.off;
requirement invariant middle_tunnel_channel_lighting_c_off needs tube_2_standby.off;
requirement invariant middle_tunnel_channel_lighting_c_off needs tube_1_mode.operational or tube_1_mode.recovery;
requirement invariant middle_tunnel_channel_lighting_c_off needs tube_2_mode.operational or tube_2_mode.recovery;
requirement invariant middle_tunnel_channel_dynamic_escaperoute_indication_c_upward needs tube_1_evacuation.on;
requirement invariant middle_tunnel_channel_dynamic_escaperoute_indication_c_downward needs tube_2_evacuation.on;
requirement invariant middle_tunnel_channel_dynamic_escaperoute_indication_c_off needs tube_1_evacuation.off;
requirement invariant middle_tunnel_channel_dynamic_escaperoute_indication_c_off needs tube_2_evacuation.off;
requirement invariant middle_tunnel_channel_intercom_c_on needs tube_1_evacuation.on and tube_1_switch_timer_audio.on_2 or tube_2_evacuation.on and tube_2_switch_timer_audio.on_2;
requirement invariant middle_tunnel_channel_intercom_c_off needs tube_1_evacuation.off or not tube_1_switch_timer_audio.on_2;
requirement invariant middle_tunnel_channel_intercom_c_off needs tube_2_evacuation.off or not tube_2_switch_timer_audio.on_2;
requirement invariant tube_1_mode_c_operational needs tube_1_mode.recovery;
requirement invariant tube_1_mode_c_operational needs tube_1_button_operational_observer.pressed;
requirement invariant tube_1_mode_c_emergency needs tube_1_mode.operational;
requirement invariant tube_1_mode_c_emergency needs tube_1_SOS.on;
requirement invariant tube_1_mode_c_emergency needs tube_1_smoke_detection.mode > 3;
requirement invariant tube_1_mode_c_emergency needs tube_1_emergency_cabinet_A_sensor_open.on or tube_1_emergency_cabinet_C_sensor_open.on;
requirement invariant tube_1_mode_c_emergency needs tube_1_emergency_cabinet_A_hand_extinguisher.on or tube_1_emergency_cabinet_A_fire_hose.on or tube_1_emergency_cabinet_A_emergency_phone.on or tube_1_emergency_cabinet_C_hand_extinguisher.on or tube_1_emergency_cabinet_C_emergency_phone.on;
requirement invariant tube_1_mode_c_recovery needs tube_1_mode.emergency or tube_1_mode.support;
requirement invariant tube_1_mode_c_support needs not tube_1_mode.emergency;
requirement invariant tube_1_standby_c_on needs tube_1_mode.operational;
requirement invariant tube_1_standby_c_on needs tube_1_smoke_detection.mode > 3 or tube_1_emergency_cabinet_A_hand_extinguisher.on or tube_1_emergency_cabinet_A_fire_hose.on or tube_1_emergency_cabinet_C_hand_extinguisher.on;
requirement invariant tube_1_standby_c_off needs not tube_1_mode.operational;
requirement invariant tube_1_evacuation_c_on needs tube_1_button_evacuation_observer.pressed;
requirement invariant tube_1_evacuation_c_off needs not tube_1_mode.emergency;
requirement invariant tube_1_j32_mode_c_on needs tube_1_mode.emergency or tube_1_mode.support;
requirement invariant tube_1_j32_mode_c_off needs tube_1_traffic_light_1_mode.off;
requirement invariant tube_1_j32_mode_c_off needs tube_1_traffic_light_2_mode.off;
requirement invariant tube_1_j32_mode_c_off needs tube_1_traffic_light_3_mode.off;
requirement invariant tube_1_j32_mode_c_off needs tube_1_mode.operational;
requirement invariant tube_1_matrix_sign_traffic_light_c_on needs not tube_1_mode.operational;
requirement invariant tube_1_matrix_sign_traffic_light_c_on needs not tube_1_traffic_light_1_mode.red;
requirement invariant tube_1_matrix_sign_traffic_light_c_on needs not tube_1_traffic_light_2_mode.red;
requirement invariant tube_1_matrix_sign_traffic_light_c_on needs not tube_1_traffic_light_3_mode.red;
requirement invariant tube_1_matrix_sign_traffic_light_c_off needs tube_1_mode.operational or tube_1_traffic_light_1_mode.red or tube_1_traffic_light_2_mode.red or tube_1_traffic_light_3_mode.red;
requirement invariant tube_1_matrix_sign_free_c_on needs not tube_1_mode.operational;
requirement invariant tube_1_matrix_sign_free_c_off needs tube_1_mode.operational;
requirement invariant tube_1_ventilation_direction_c_against needs tube_1_mode.support;
requirement invariant tube_1_ventilation_direction_c_along needs not tube_1_mode.support;
requirement invariant tube_1_channel_c_1_on needs not tube_1_mode.operational and (not tube_1_traffic_light_1_mode.red or not tube_1_traffic_light_2_mode.red or not tube_1_traffic_light_3_mode.red);
requirement invariant tube_1_channel_c_2_on needs tube_1_boom_barrier_1_actuator_down.on or tube_1_boom_barrier_2_actuator_down.on;
requirement invariant tube_1_channel_c_3_on needs tube_1_mode.operational and (tube_1_emergency_cabinet_A_sensor_open.on or tube_1_emergency_cabinet_C_sensor_open.on);
requirement invariant tube_1_channel_c_4_on needs tube_1_SOS.on;
requirement invariant tube_1_channel_c_5_on needs tube_1_smoke_detection.mode > 4;
requirement invariant tube_1_channel_c_6_on needs tube_1_escape_door_sensor_open.on;
requirement invariant tube_1_channel_c_1_off needs not(not tube_1_mode.operational and (not tube_1_traffic_light_1_mode.red or not tube_1_traffic_light_2_mode.red or not tube_1_traffic_light_3_mode.red));
requirement invariant tube_1_channel_c_2_off needs not(tube_1_boom_barrier_1_actuator_down.on or tube_1_boom_barrier_2_actuator_down.on);
requirement invariant tube_1_channel_c_3_off needs not(tube_1_mode.operational and (tube_1_emergency_cabinet_A_sensor_open.on or tube_1_emergency_cabinet_C_sensor_open.on));
requirement invariant tube_1_channel_c_4_off needs not tube_1_SOS.on;
requirement invariant tube_1_channel_c_5_off needs not(tube_1_smoke_detection.mode > 4);
requirement invariant tube_1_channel_c_6_off needs not tube_1_escape_door_sensor_open.on;
requirement invariant tube_1_recorder_c_on needs tube_1_mode.emergency or tube_1_mode.support;
requirement invariant tube_1_recorder_c_off needs tube_1_mode.operational or tube_1_mode.recovery;
requirement invariant tube_1_switch_timer_audio_c_on needs tube_1_evacuation.on;
requirement invariant tube_1_switch_timer_audio_c_off needs tube_1_evacuation.off;
requirement invariant tube_1_boom_barrier_1_actuator_up_c_on needs tube_1_boom_barrier_1_actuator_down.off;
requirement invariant tube_1_boom_barrier_1_actuator_up_c_on needs not(tube_1_boom_barrier_1_sensor_open.on and tube_1_boom_barrier_1_actuator_up.off and tube_1_boom_barrier_1_actuator_down.off);
requirement invariant tube_1_boom_barrier_1_actuator_up_c_off needs tube_1_boom_barrier_1_sensor_open.on;
requirement invariant tube_1_boom_barrier_1_actuator_down_c_on needs tube_1_boom_barrier_1_actuator_up.off;
requirement invariant tube_1_boom_barrier_1_actuator_down_c_on needs not(tube_1_boom_barrier_1_sensor_closed.on and tube_1_boom_barrier_1_actuator_up.off and tube_1_boom_barrier_1_actuator_down.off);
requirement invariant tube_1_boom_barrier_1_actuator_down_c_off needs tube_1_boom_barrier_1_sensor_closed.on;
requirement invariant tube_1_boom_barrier_1_actuator_down_c_on needs tube_1_boom_barrier_1_obstacle_detection.off;
requirement invariant tube_1_boom_barrier_2_actuator_up_c_on needs tube_1_boom_barrier_2_actuator_down.off;
requirement invariant tube_1_boom_barrier_2_actuator_up_c_on needs not(tube_1_boom_barrier_2_sensor_open.on and tube_1_boom_barrier_2_actuator_up.off and tube_1_boom_barrier_2_actuator_down.off);
requirement invariant tube_1_boom_barrier_2_actuator_up_c_off needs tube_1_boom_barrier_2_sensor_open.on;
requirement invariant tube_1_boom_barrier_2_actuator_down_c_on needs tube_1_boom_barrier_2_actuator_up.off;
requirement invariant tube_1_boom_barrier_2_actuator_down_c_on needs not(tube_1_boom_barrier_2_sensor_closed.on and tube_1_boom_barrier_2_actuator_up.off and tube_1_boom_barrier_2_actuator_down.off);
requirement invariant tube_1_boom_barrier_2_actuator_down_c_off needs tube_1_boom_barrier_2_sensor_closed.on;
requirement invariant tube_1_boom_barrier_2_actuator_down_c_on needs tube_1_boom_barrier_2_obstacle_detection.off;
requirement invariant tube_1_traffic_light_1_timer_release_signal_c_on needs tube_1_traffic_light_1_mode.red;
requirement invariant tube_1_traffic_light_1_timer_release_signal_c_reset needs not tube_1_traffic_light_1_mode.red;
requirement invariant tube_1_traffic_light_2_timer_release_signal_c_on needs tube_1_traffic_light_2_mode.red;
requirement invariant tube_1_traffic_light_2_timer_release_signal_c_reset needs not tube_1_traffic_light_2_mode.red;
requirement invariant tube_1_traffic_light_3_timer_release_signal_c_on needs tube_1_traffic_light_3_mode.red;
requirement invariant tube_1_traffic_light_3_timer_release_signal_c_reset needs not tube_1_traffic_light_3_mode.red;
requirement invariant tube_1_j32_timer_release_signal_c_on needs tube_1_j32_mode.on;
requirement invariant tube_1_j32_timer_release_signal_c_reset needs tube_1_j32_mode.off;
requirement invariant tube_1_boom_barrier_1_actuator_down_c_on needs tube_1_traffic_light_1_release_signal.on;
requirement invariant tube_1_boom_barrier_1_actuator_down_c_on needs tube_1_traffic_light_2_release_signal.on;
requirement invariant tube_1_boom_barrier_1_actuator_down_c_on needs tube_1_traffic_light_3_release_signal.on;
requirement invariant tube_1_boom_barrier_1_actuator_down_c_on needs not tube_1_mode.operational;
requirement invariant tube_1_boom_barrier_1_actuator_down_c_off_emergency needs tube_1_boom_barrier_1_obstacle_detection.on or tube_1_traffic_light_1_release_signal.off or tube_1_traffic_light_2_release_signal.off or tube_1_traffic_light_3_release_signal.off;
requirement invariant tube_1_boom_barrier_1_actuator_up_c_on needs tube_1_mode.operational;
requirement invariant tube_1_boom_barrier_2_actuator_down_c_on needs tube_1_traffic_light_1_release_signal.on;
requirement invariant tube_1_boom_barrier_2_actuator_down_c_on needs tube_1_traffic_light_2_release_signal.on;
requirement invariant tube_1_boom_barrier_2_actuator_down_c_on needs tube_1_traffic_light_3_release_signal.on;
requirement invariant tube_1_boom_barrier_2_actuator_down_c_on needs not tube_1_mode.operational;
requirement invariant tube_1_boom_barrier_2_actuator_down_c_off_emergency needs tube_1_boom_barrier_2_obstacle_detection.on or tube_1_traffic_light_1_release_signal.off or tube_1_traffic_light_2_release_signal.off or tube_1_traffic_light_3_release_signal.off;
requirement invariant tube_1_boom_barrier_2_actuator_up_c_on needs tube_1_mode.operational;
requirement invariant tube_1_traffic_light_1_mode.red and (tube_1_boom_barrier_1_sensor_closed.on and tube_1_boom_barrier_1_actuator_up.off and tube_1_boom_barrier_1_actuator_down.off) disables tube_1_traffic_light_1_mode_c_flashing;
requirement invariant tube_1_traffic_light_1_mode.red and (tube_1_boom_barrier_2_sensor_closed.on and tube_1_boom_barrier_2_actuator_up.off and tube_1_boom_barrier_2_actuator_down.off) disables tube_1_traffic_light_1_mode_c_flashing;
requirement invariant tube_1_j32_mode.off disables tube_1_traffic_light_1_mode_c_flashing;
requirement invariant tube_1_traffic_light_1_mode.off and not tube_1_j32_timer_release_signal.finished disables tube_1_traffic_light_1_mode_c_flashing;
requirement invariant tube_1_traffic_light_1_mode_c_off needs tube_1_mode.operational;
requirement invariant tube_1_traffic_light_1_mode_c_flashing needs tube_1_traffic_light_1_mode.red and tube_1_mode.operational or tube_1_traffic_light_1_mode.off and not tube_1_mode.operational;
requirement invariant tube_1_traffic_light_1_mode_c_yellow needs not tube_1_mode.operational;
requirement invariant tube_1_traffic_light_2_mode.red and (tube_1_boom_barrier_1_sensor_closed.on and tube_1_boom_barrier_1_actuator_up.off and tube_1_boom_barrier_1_actuator_down.off) disables tube_1_traffic_light_2_mode_c_flashing;
requirement invariant tube_1_traffic_light_2_mode.red and (tube_1_boom_barrier_2_sensor_closed.on and tube_1_boom_barrier_2_actuator_up.off and tube_1_boom_barrier_2_actuator_down.off) disables tube_1_traffic_light_2_mode_c_flashing;
requirement invariant tube_1_j32_mode.off disables tube_1_traffic_light_2_mode_c_flashing;
requirement invariant tube_1_traffic_light_2_mode.off and not tube_1_j32_timer_release_signal.finished disables tube_1_traffic_light_2_mode_c_flashing;
requirement invariant tube_1_traffic_light_2_mode_c_off needs tube_1_mode.operational;
requirement invariant tube_1_traffic_light_2_mode_c_flashing needs tube_1_traffic_light_2_mode.red and tube_1_mode.operational or tube_1_traffic_light_2_mode.off and not tube_1_mode.operational;
requirement invariant tube_1_traffic_light_2_mode_c_yellow needs not tube_1_mode.operational;
requirement invariant tube_1_traffic_light_3_mode.red and (tube_1_boom_barrier_1_sensor_closed.on and tube_1_boom_barrier_1_actuator_up.off and tube_1_boom_barrier_1_actuator_down.off) disables tube_1_traffic_light_3_mode_c_flashing;
requirement invariant tube_1_traffic_light_3_mode.red and (tube_1_boom_barrier_2_sensor_closed.on and tube_1_boom_barrier_2_actuator_up.off and tube_1_boom_barrier_2_actuator_down.off) disables tube_1_traffic_light_3_mode_c_flashing;
requirement invariant tube_1_j32_mode.off disables tube_1_traffic_light_3_mode_c_flashing;
requirement invariant tube_1_traffic_light_3_mode.off and not tube_1_j32_timer_release_signal.finished disables tube_1_traffic_light_3_mode_c_flashing;
requirement invariant tube_1_traffic_light_3_mode_c_off needs tube_1_mode.operational;
requirement invariant tube_1_traffic_light_3_mode_c_flashing needs tube_1_traffic_light_3_mode.red and tube_1_mode.operational or tube_1_traffic_light_3_mode.off and not tube_1_mode.operational;
requirement invariant tube_1_traffic_light_3_mode_c_yellow needs not tube_1_mode.operational;
requirement invariant tube_1_ventilation_entrance_c_0 needs tube_1_mode.operational or tube_1_mode.support;
requirement invariant tube_1_ventilation_entrance_c_0 needs tube_1_smoke_detection.mode = 0 or tube_1_mode.support;
requirement invariant tube_1_ventilation_entrance_c_1 needs tube_1_mode.operational;
requirement invariant tube_1_ventilation_entrance_c_1 needs tube_1_smoke_detection.mode = 1;
requirement invariant tube_1_ventilation_entrance_c_2 needs tube_1_mode.operational;
requirement invariant tube_1_ventilation_entrance_c_2 needs tube_1_smoke_detection.mode = 2;
requirement invariant tube_1_ventilation_entrance_c_3 needs tube_1_mode.operational;
requirement invariant tube_1_ventilation_entrance_c_3 needs tube_1_smoke_detection.mode = 3;
requirement invariant tube_1_ventilation_entrance_c_4 needs tube_1_mode.operational and tube_1_smoke_detection.mode = 4 or tube_1_mode.recovery and tube_1_smoke_detection.mode < 5;
requirement invariant tube_1_ventilation_entrance_c_5 needs tube_1_mode.operational or tube_1_mode.recovery;
requirement invariant tube_1_ventilation_entrance_c_5 needs tube_1_smoke_detection.mode = 5;
requirement invariant tube_1_ventilation_entrance_c_6 needs tube_1_mode.operational or tube_1_mode.recovery;
requirement invariant tube_1_ventilation_entrance_c_6 needs tube_1_smoke_detection.mode = 6;
requirement invariant tube_1_ventilation_entrance_c_7 needs tube_1_mode.operational or tube_1_mode.recovery;
requirement invariant tube_1_ventilation_entrance_c_7 needs tube_1_smoke_detection.mode = 7;
requirement invariant tube_1_ventilation_entrance_c_8 needs (tube_1_mode.operational or tube_1_mode.recovery) and tube_1_smoke_detection.mode = 8 or tube_1_mode.emergency;
requirement invariant tube_1_ventilation_c_0 needs tube_1_mode.operational;
requirement invariant tube_1_ventilation_c_0 needs tube_1_smoke_detection.mode = 0;
requirement invariant tube_1_ventilation_c_1 needs tube_1_mode.operational;
requirement invariant tube_1_ventilation_c_1 needs tube_1_smoke_detection.mode = 1;
requirement invariant tube_1_ventilation_c_2 needs tube_1_mode.operational;
requirement invariant tube_1_ventilation_c_2 needs tube_1_smoke_detection.mode = 2;
requirement invariant tube_1_ventilation_c_3 needs tube_1_mode.operational;
requirement invariant tube_1_ventilation_c_3 needs tube_1_smoke_detection.mode = 3;
requirement invariant tube_1_ventilation_c_4 needs tube_1_mode.operational and tube_1_smoke_detection.mode = 4 or tube_1_mode.recovery and tube_1_smoke_detection.mode < 5;
requirement invariant tube_1_ventilation_c_5 needs tube_1_mode.operational or tube_1_mode.recovery;
requirement invariant tube_1_ventilation_c_5 needs tube_1_smoke_detection.mode = 5;
requirement invariant tube_1_ventilation_c_6 needs (tube_1_mode.operational or tube_1_mode.recovery) and tube_1_smoke_detection.mode = 6 or tube_1_mode.support and tube_1_smoke_detection.mode < 7;
requirement invariant tube_1_ventilation_c_7 needs tube_1_mode.operational or tube_1_mode.recovery or tube_1_mode.support;
requirement invariant tube_1_ventilation_c_7 needs tube_1_smoke_detection.mode = 7;
requirement invariant tube_1_ventilation_c_8 needs tube_1_smoke_detection.mode = 8 or tube_1_mode.emergency;
requirement invariant tube_1_lighting_c_0 needs tube_1_mode.operational;
requirement invariant tube_1_lighting_c_0 needs tube_1_lightsensor.mode = 0;
requirement invariant tube_1_lighting_c_1 needs tube_1_mode.operational;
requirement invariant tube_1_lighting_c_1 needs tube_1_lightsensor.mode = 1;
requirement invariant tube_1_lighting_c_2 needs tube_1_mode.operational;
requirement invariant tube_1_lighting_c_2 needs tube_1_lightsensor.mode = 2;
requirement invariant tube_1_lighting_c_3 needs tube_1_mode.operational;
requirement invariant tube_1_lighting_c_3 needs tube_1_lightsensor.mode = 3;
requirement invariant tube_1_lighting_c_4 needs tube_1_mode.operational and tube_1_lightsensor.mode = 4 or tube_1_mode.recovery and tube_1_lightsensor.mode < 5;
requirement invariant tube_1_lighting_c_5 needs tube_1_mode.operational or tube_1_mode.recovery;
requirement invariant tube_1_lighting_c_5 needs tube_1_lightsensor.mode = 5;
requirement invariant tube_1_lighting_c_6 needs (tube_1_mode.operational or tube_1_mode.recovery) and tube_1_lightsensor.mode = 6 or tube_1_mode.support and tube_1_lightsensor.mode < 7;
requirement invariant tube_1_lighting_c_7 needs tube_1_mode.operational or tube_1_mode.recovery or tube_1_mode.support;
requirement invariant tube_1_lighting_c_7 needs tube_1_lightsensor.mode = 7;
requirement invariant tube_1_lighting_c_8 needs tube_1_lightsensor.mode = 8 or tube_1_mode.emergency;
requirement invariant tube_1_escape_door_contour_lighting_c_on needs tube_1_evacuation.on;
requirement invariant tube_1_escape_door_contour_lighting_c_off needs tube_1_evacuation.off;
requirement invariant tube_1_escape_door_sound_beacon_c_on needs tube_1_switch_timer_audio.on_2;
requirement invariant tube_1_escape_door_sound_beacon_c_on needs tube_1_intercom.off;
requirement invariant tube_1_escape_door_sound_beacon_c_off needs not tube_1_switch_timer_audio.on_2;
requirement invariant tube_1_intercom_c_on needs tube_1_switch_timer_audio.on_1;
requirement invariant tube_1_intercom_c_on needs tube_1_escape_door_sound_beacon.off;
requirement invariant tube_1_intercom_c_off needs not tube_1_switch_timer_audio.on_1;
requirement invariant tube_2_mode_c_operational needs tube_2_mode.recovery;
requirement invariant tube_2_mode_c_operational needs tube_2_button_operational_observer.pressed;
requirement invariant tube_2_mode_c_emergency needs tube_2_mode.operational;
requirement invariant tube_2_mode_c_emergency needs tube_2_SOS.on;
requirement invariant tube_2_mode_c_emergency needs tube_2_smoke_detection.mode > 3;
requirement invariant tube_2_mode_c_emergency needs tube_2_emergency_cabinet_A_sensor_open.on or tube_2_emergency_cabinet_C_sensor_open.on;
requirement invariant tube_2_mode_c_emergency needs tube_2_emergency_cabinet_A_hand_extinguisher.on or tube_2_emergency_cabinet_A_fire_hose.on or tube_2_emergency_cabinet_A_emergency_phone.on or tube_2_emergency_cabinet_C_hand_extinguisher.on or tube_2_emergency_cabinet_C_emergency_phone.on;
requirement invariant tube_2_mode_c_recovery needs tube_2_mode.emergency or tube_2_mode.support;
requirement invariant tube_2_mode_c_support needs not tube_2_mode.emergency;
requirement invariant tube_2_standby_c_on needs tube_2_mode.operational;
requirement invariant tube_2_standby_c_on needs tube_2_smoke_detection.mode > 3 or tube_2_emergency_cabinet_A_hand_extinguisher.on or tube_2_emergency_cabinet_A_fire_hose.on or tube_2_emergency_cabinet_C_hand_extinguisher.on;
requirement invariant tube_2_standby_c_off needs not tube_2_mode.operational;
requirement invariant tube_2_evacuation_c_on needs tube_2_button_evacuation_observer.pressed;
requirement invariant tube_2_evacuation_c_off needs not tube_2_mode.emergency;
requirement invariant tube_2_j32_mode_c_on needs tube_2_mode.emergency or tube_2_mode.support;
requirement invariant tube_2_j32_mode_c_off needs tube_2_traffic_light_1_mode.off;
requirement invariant tube_2_j32_mode_c_off needs tube_2_traffic_light_2_mode.off;
requirement invariant tube_2_j32_mode_c_off needs tube_2_traffic_light_3_mode.off;
requirement invariant tube_2_j32_mode_c_off needs tube_2_mode.operational;
requirement invariant tube_2_matrix_sign_traffic_light_c_on needs not tube_2_mode.operational;
requirement invariant tube_2_matrix_sign_traffic_light_c_on needs not tube_2_traffic_light_1_mode.red;
requirement invariant tube_2_matrix_sign_traffic_light_c_on needs not tube_2_traffic_light_2_mode.red;
requirement invariant tube_2_matrix_sign_traffic_light_c_on needs not tube_2_traffic_light_3_mode.red;
requirement invariant tube_2_matrix_sign_traffic_light_c_off needs tube_2_mode.operational or tube_2_traffic_light_1_mode.red or tube_2_traffic_light_2_mode.red or tube_2_traffic_light_3_mode.red;
requirement invariant tube_2_matrix_sign_free_c_on needs not tube_2_mode.operational;
requirement invariant tube_2_matrix_sign_free_c_off needs tube_2_mode.operational;
requirement invariant tube_2_ventilation_direction_c_against needs tube_2_mode.support;
requirement invariant tube_2_ventilation_direction_c_along needs not tube_2_mode.support;
requirement invariant tube_2_channel_c_1_on needs not tube_2_mode.operational and (not tube_2_traffic_light_1_mode.red or not tube_2_traffic_light_2_mode.red or not tube_2_traffic_light_3_mode.red);
requirement invariant tube_2_channel_c_2_on needs tube_2_boom_barrier_1_actuator_down.on or tube_2_boom_barrier_2_actuator_down.on;
requirement invariant tube_2_channel_c_3_on needs tube_2_mode.operational and (tube_2_emergency_cabinet_A_sensor_open.on or tube_2_emergency_cabinet_C_sensor_open.on);
requirement invariant tube_2_channel_c_4_on needs tube_2_SOS.on;
requirement invariant tube_2_channel_c_5_on needs tube_2_smoke_detection.mode > 4;
requirement invariant tube_2_channel_c_6_on needs tube_2_escape_door_sensor_open.on;
requirement invariant tube_2_channel_c_1_off needs not(not tube_2_mode.operational and (not tube_2_traffic_light_1_mode.red or not tube_2_traffic_light_2_mode.red or not tube_2_traffic_light_3_mode.red));
requirement invariant tube_2_channel_c_2_off needs not(tube_2_boom_barrier_1_actuator_down.on or tube_2_boom_barrier_2_actuator_down.on);
requirement invariant tube_2_channel_c_3_off needs not(tube_2_mode.operational and (tube_2_emergency_cabinet_A_sensor_open.on or tube_2_emergency_cabinet_C_sensor_open.on));
requirement invariant tube_2_channel_c_4_off needs not tube_2_SOS.on;
requirement invariant tube_2_channel_c_5_off needs not(tube_2_smoke_detection.mode > 4);
requirement invariant tube_2_channel_c_6_off needs not tube_2_escape_door_sensor_open.on;
requirement invariant tube_2_recorder_c_on needs tube_2_mode.emergency or tube_2_mode.support;
requirement invariant tube_2_recorder_c_off needs tube_2_mode.operational or tube_2_mode.recovery;
requirement invariant tube_2_switch_timer_audio_c_on needs tube_2_evacuation.on;
requirement invariant tube_2_switch_timer_audio_c_off needs tube_2_evacuation.off;
requirement invariant tube_2_boom_barrier_1_actuator_up_c_on needs tube_2_boom_barrier_1_actuator_down.off;
requirement invariant tube_2_boom_barrier_1_actuator_up_c_on needs not(tube_2_boom_barrier_1_sensor_open.on and tube_2_boom_barrier_1_actuator_up.off and tube_2_boom_barrier_1_actuator_down.off);
requirement invariant tube_2_boom_barrier_1_actuator_up_c_off needs tube_2_boom_barrier_1_sensor_open.on;
requirement invariant tube_2_boom_barrier_1_actuator_down_c_on needs tube_2_boom_barrier_1_actuator_up.off;
requirement invariant tube_2_boom_barrier_1_actuator_down_c_on needs not(tube_2_boom_barrier_1_sensor_closed.on and tube_2_boom_barrier_1_actuator_up.off and tube_2_boom_barrier_1_actuator_down.off);
requirement invariant tube_2_boom_barrier_1_actuator_down_c_off needs tube_2_boom_barrier_1_sensor_closed.on;
requirement invariant tube_2_boom_barrier_1_actuator_down_c_on needs tube_2_boom_barrier_1_obstacle_detection.off;
requirement invariant tube_2_boom_barrier_2_actuator_up_c_on needs tube_2_boom_barrier_2_actuator_down.off;
requirement invariant tube_2_boom_barrier_2_actuator_up_c_on needs not(tube_2_boom_barrier_2_sensor_open.on and tube_2_boom_barrier_2_actuator_up.off and tube_2_boom_barrier_2_actuator_down.off);
requirement invariant tube_2_boom_barrier_2_actuator_up_c_off needs tube_2_boom_barrier_2_sensor_open.on;
requirement invariant tube_2_boom_barrier_2_actuator_down_c_on needs tube_2_boom_barrier_2_actuator_up.off;
requirement invariant tube_2_boom_barrier_2_actuator_down_c_on needs not(tube_2_boom_barrier_2_sensor_closed.on and tube_2_boom_barrier_2_actuator_up.off and tube_2_boom_barrier_2_actuator_down.off);
requirement invariant tube_2_boom_barrier_2_actuator_down_c_off needs tube_2_boom_barrier_2_sensor_closed.on;
requirement invariant tube_2_boom_barrier_2_actuator_down_c_on needs tube_2_boom_barrier_2_obstacle_detection.off;
requirement invariant tube_2_traffic_light_1_timer_release_signal_c_on needs tube_2_traffic_light_1_mode.red;
requirement invariant tube_2_traffic_light_1_timer_release_signal_c_reset needs not tube_2_traffic_light_1_mode.red;
requirement invariant tube_2_traffic_light_2_timer_release_signal_c_on needs tube_2_traffic_light_2_mode.red;
requirement invariant tube_2_traffic_light_2_timer_release_signal_c_reset needs not tube_2_traffic_light_2_mode.red;
requirement invariant tube_2_traffic_light_3_timer_release_signal_c_on needs tube_2_traffic_light_3_mode.red;
requirement invariant tube_2_traffic_light_3_timer_release_signal_c_reset needs not tube_2_traffic_light_3_mode.red;
requirement invariant tube_2_j32_timer_release_signal_c_on needs tube_2_j32_mode.on;
requirement invariant tube_2_j32_timer_release_signal_c_reset needs tube_2_j32_mode.off;
requirement invariant tube_2_boom_barrier_1_actuator_down_c_on needs tube_2_traffic_light_1_release_signal.on;
requirement invariant tube_2_boom_barrier_1_actuator_down_c_on needs tube_2_traffic_light_2_release_signal.on;
requirement invariant tube_2_boom_barrier_1_actuator_down_c_on needs tube_2_traffic_light_3_release_signal.on;
requirement invariant tube_2_boom_barrier_1_actuator_down_c_on needs not tube_2_mode.operational;
requirement invariant tube_2_boom_barrier_1_actuator_down_c_off_emergency needs tube_2_boom_barrier_1_obstacle_detection.on or tube_2_traffic_light_1_release_signal.off or tube_2_traffic_light_2_release_signal.off or tube_2_traffic_light_3_release_signal.off;
requirement invariant tube_2_boom_barrier_1_actuator_up_c_on needs tube_2_mode.operational;
requirement invariant tube_2_boom_barrier_2_actuator_down_c_on needs tube_2_traffic_light_1_release_signal.on;
requirement invariant tube_2_boom_barrier_2_actuator_down_c_on needs tube_2_traffic_light_2_release_signal.on;
requirement invariant tube_2_boom_barrier_2_actuator_down_c_on needs tube_2_traffic_light_3_release_signal.on;
requirement invariant tube_2_boom_barrier_2_actuator_down_c_on needs not tube_2_mode.operational;
requirement invariant tube_2_boom_barrier_2_actuator_down_c_off_emergency needs tube_2_boom_barrier_2_obstacle_detection.on or tube_2_traffic_light_1_release_signal.off or tube_2_traffic_light_2_release_signal.off or tube_2_traffic_light_3_release_signal.off;
requirement invariant tube_2_boom_barrier_2_actuator_up_c_on needs tube_2_mode.operational;
requirement invariant tube_2_traffic_light_1_mode.red and (tube_2_boom_barrier_1_sensor_closed.on and tube_2_boom_barrier_1_actuator_up.off and tube_2_boom_barrier_1_actuator_down.off) disables tube_2_traffic_light_1_mode_c_flashing;
requirement invariant tube_2_traffic_light_1_mode.red and (tube_2_boom_barrier_2_sensor_closed.on and tube_2_boom_barrier_2_actuator_up.off and tube_2_boom_barrier_2_actuator_down.off) disables tube_2_traffic_light_1_mode_c_flashing;
requirement invariant tube_2_j32_mode.off disables tube_2_traffic_light_1_mode_c_flashing;
requirement invariant tube_2_traffic_light_1_mode.off and not tube_2_j32_timer_release_signal.finished disables tube_2_traffic_light_1_mode_c_flashing;
requirement invariant tube_2_traffic_light_1_mode_c_off needs tube_2_mode.operational;
requirement invariant tube_2_traffic_light_1_mode_c_flashing needs tube_2_traffic_light_1_mode.red and tube_2_mode.operational or tube_2_traffic_light_1_mode.off and not tube_2_mode.operational;
requirement invariant tube_2_traffic_light_1_mode_c_yellow needs not tube_2_mode.operational;
requirement invariant tube_2_traffic_light_2_mode.red and (tube_2_boom_barrier_1_sensor_closed.on and tube_2_boom_barrier_1_actuator_up.off and tube_2_boom_barrier_1_actuator_down.off) disables tube_2_traffic_light_2_mode_c_flashing;
requirement invariant tube_2_traffic_light_2_mode.red and (tube_2_boom_barrier_2_sensor_closed.on and tube_2_boom_barrier_2_actuator_up.off and tube_2_boom_barrier_2_actuator_down.off) disables tube_2_traffic_light_2_mode_c_flashing;
requirement invariant tube_2_j32_mode.off disables tube_2_traffic_light_2_mode_c_flashing;
requirement invariant tube_2_traffic_light_2_mode.off and not tube_2_j32_timer_release_signal.finished disables tube_2_traffic_light_2_mode_c_flashing;
requirement invariant tube_2_traffic_light_2_mode_c_off needs tube_2_mode.operational;
requirement invariant tube_2_traffic_light_2_mode_c_flashing needs tube_2_traffic_light_2_mode.red and tube_2_mode.operational or tube_2_traffic_light_2_mode.off and not tube_2_mode.operational;
requirement invariant tube_2_traffic_light_2_mode_c_yellow needs not tube_2_mode.operational;
requirement invariant tube_2_traffic_light_3_mode.red and (tube_2_boom_barrier_1_sensor_closed.on and tube_2_boom_barrier_1_actuator_up.off and tube_2_boom_barrier_1_actuator_down.off) disables tube_2_traffic_light_3_mode_c_flashing;
requirement invariant tube_2_traffic_light_3_mode.red and (tube_2_boom_barrier_2_sensor_closed.on and tube_2_boom_barrier_2_actuator_up.off and tube_2_boom_barrier_2_actuator_down.off) disables tube_2_traffic_light_3_mode_c_flashing;
requirement invariant tube_2_j32_mode.off disables tube_2_traffic_light_3_mode_c_flashing;
requirement invariant tube_2_traffic_light_3_mode.off and not tube_2_j32_timer_release_signal.finished disables tube_2_traffic_light_3_mode_c_flashing;
requirement invariant tube_2_traffic_light_3_mode_c_off needs tube_2_mode.operational;
requirement invariant tube_2_traffic_light_3_mode_c_flashing needs tube_2_traffic_light_3_mode.red and tube_2_mode.operational or tube_2_traffic_light_3_mode.off and not tube_2_mode.operational;
requirement invariant tube_2_traffic_light_3_mode_c_yellow needs not tube_2_mode.operational;
requirement invariant tube_2_ventilation_entrance_c_0 needs tube_2_mode.operational or tube_2_mode.support;
requirement invariant tube_2_ventilation_entrance_c_0 needs tube_2_smoke_detection.mode = 0 or tube_2_mode.support;
requirement invariant tube_2_ventilation_entrance_c_1 needs tube_2_mode.operational;
requirement invariant tube_2_ventilation_entrance_c_1 needs tube_2_smoke_detection.mode = 1;
requirement invariant tube_2_ventilation_entrance_c_2 needs tube_2_mode.operational;
requirement invariant tube_2_ventilation_entrance_c_2 needs tube_2_smoke_detection.mode = 2;
requirement invariant tube_2_ventilation_entrance_c_3 needs tube_2_mode.operational;
requirement invariant tube_2_ventilation_entrance_c_3 needs tube_2_smoke_detection.mode = 3;
requirement invariant tube_2_ventilation_entrance_c_4 needs tube_2_mode.operational and tube_2_smoke_detection.mode = 4 or tube_2_mode.recovery and tube_2_smoke_detection.mode < 5;
requirement invariant tube_2_ventilation_entrance_c_5 needs tube_2_mode.operational or tube_2_mode.recovery;
requirement invariant tube_2_ventilation_entrance_c_5 needs tube_2_smoke_detection.mode = 5;
requirement invariant tube_2_ventilation_entrance_c_6 needs tube_2_mode.operational or tube_2_mode.recovery;
requirement invariant tube_2_ventilation_entrance_c_6 needs tube_2_smoke_detection.mode = 6;
requirement invariant tube_2_ventilation_entrance_c_7 needs tube_2_mode.operational or tube_2_mode.recovery;
requirement invariant tube_2_ventilation_entrance_c_7 needs tube_2_smoke_detection.mode = 7;
requirement invariant tube_2_ventilation_entrance_c_8 needs (tube_2_mode.operational or tube_2_mode.recovery) and tube_2_smoke_detection.mode = 8 or tube_2_mode.emergency;
requirement invariant tube_2_ventilation_c_0 needs tube_2_mode.operational;
requirement invariant tube_2_ventilation_c_0 needs tube_2_smoke_detection.mode = 0;
requirement invariant tube_2_ventilation_c_1 needs tube_2_mode.operational;
requirement invariant tube_2_ventilation_c_1 needs tube_2_smoke_detection.mode = 1;
requirement invariant tube_2_ventilation_c_2 needs tube_2_mode.operational;
requirement invariant tube_2_ventilation_c_2 needs tube_2_smoke_detection.mode = 2;
requirement invariant tube_2_ventilation_c_3 needs tube_2_mode.operational;
requirement invariant tube_2_ventilation_c_3 needs tube_2_smoke_detection.mode = 3;
requirement invariant tube_2_ventilation_c_4 needs tube_2_mode.operational and tube_2_smoke_detection.mode = 4 or tube_2_mode.recovery and tube_2_smoke_detection.mode < 5;
requirement invariant tube_2_ventilation_c_5 needs tube_2_mode.operational or tube_2_mode.recovery;
requirement invariant tube_2_ventilation_c_5 needs tube_2_smoke_detection.mode = 5;
requirement invariant tube_2_ventilation_c_6 needs (tube_2_mode.operational or tube_2_mode.recovery) and tube_2_smoke_detection.mode = 6 or tube_2_mode.support and tube_2_smoke_detection.mode < 7;
requirement invariant tube_2_ventilation_c_7 needs tube_2_mode.operational or tube_2_mode.recovery or tube_2_mode.support;
requirement invariant tube_2_ventilation_c_7 needs tube_2_smoke_detection.mode = 7;
requirement invariant tube_2_ventilation_c_8 needs tube_2_smoke_detection.mode = 8 or tube_2_mode.emergency;
requirement invariant tube_2_lighting_c_0 needs tube_2_mode.operational;
requirement invariant tube_2_lighting_c_0 needs tube_2_lightsensor.mode = 0;
requirement invariant tube_2_lighting_c_1 needs tube_2_mode.operational;
requirement invariant tube_2_lighting_c_1 needs tube_2_lightsensor.mode = 1;
requirement invariant tube_2_lighting_c_2 needs tube_2_mode.operational;
requirement invariant tube_2_lighting_c_2 needs tube_2_lightsensor.mode = 2;
requirement invariant tube_2_lighting_c_3 needs tube_2_mode.operational;
requirement invariant tube_2_lighting_c_3 needs tube_2_lightsensor.mode = 3;
requirement invariant tube_2_lighting_c_4 needs tube_2_mode.operational and tube_2_lightsensor.mode = 4 or tube_2_mode.recovery and tube_2_lightsensor.mode < 5;
requirement invariant tube_2_lighting_c_5 needs tube_2_mode.operational or tube_2_mode.recovery;
requirement invariant tube_2_lighting_c_5 needs tube_2_lightsensor.mode = 5;
requirement invariant tube_2_lighting_c_6 needs (tube_2_mode.operational or tube_2_mode.recovery) and tube_2_lightsensor.mode = 6 or tube_2_mode.support and tube_2_lightsensor.mode < 7;
requirement invariant tube_2_lighting_c_7 needs tube_2_mode.operational or tube_2_mode.recovery or tube_2_mode.support;
requirement invariant tube_2_lighting_c_7 needs tube_2_lightsensor.mode = 7;
requirement invariant tube_2_lighting_c_8 needs tube_2_lightsensor.mode = 8 or tube_2_mode.emergency;
requirement invariant tube_2_escape_door_contour_lighting_c_on needs tube_2_evacuation.on;
requirement invariant tube_2_escape_door_contour_lighting_c_off needs tube_2_evacuation.off;
requirement invariant tube_2_escape_door_sound_beacon_c_on needs tube_2_switch_timer_audio.on_2;
requirement invariant tube_2_escape_door_sound_beacon_c_on needs tube_2_intercom.off;
requirement invariant tube_2_escape_door_sound_beacon_c_off needs not tube_2_switch_timer_audio.on_2;
requirement invariant tube_2_intercom_c_on needs tube_2_switch_timer_audio.on_1;
requirement invariant tube_2_intercom_c_on needs tube_2_escape_door_sound_beacon.off;
requirement invariant tube_2_intercom_c_off needs not tube_2_switch_timer_audio.on_1;
requirement invariant middle_tunnel_channel_pressure_c_left needs middle_tunnel_channel_pressure.off;
requirement invariant middle_tunnel_channel_pressure_c_right needs middle_tunnel_channel_pressure.off;
requirement invariant middle_tunnel_channel_dynamic_escaperoute_indication_c_upward needs middle_tunnel_channel_dynamic_escaperoute_indication.off;
requirement invariant middle_tunnel_channel_dynamic_escaperoute_indication_c_downward needs middle_tunnel_channel_dynamic_escaperoute_indication.off;
requirement invariant middle_tunnel_channel_pressure_c_left needs tube_1_standby.on or not tube_1_mode.operational and not tube_1_mode.support;
requirement invariant middle_tunnel_channel_pressure_c_right needs tube_2_standby.on or not tube_2_mode.operational and not tube_2_mode.support;
requirement invariant middle_tunnel_channel_pressure_c_off needs tube_1_mode.operational;
requirement invariant middle_tunnel_channel_pressure_c_off needs tube_2_mode.operational;
requirement invariant middle_tunnel_channel_pressure_c_off needs tube_1_standby.off;
requirement invariant middle_tunnel_channel_pressure_c_off needs tube_2_standby.off;
requirement invariant tube_1.mode.c_support needs tube_2.mode.emergency;
requirement invariant tube_2.mode.c_support needs tube_1.mode.emergency;
requirement invariant tube_1.mode.emergency disables tube_2.standby.c_on;
requirement invariant tube_1.mode.emergency disables tube_2.mode.c_emergency;
requirement invariant tube_2.mode.emergency disables tube_1.standby.c_on;
requirement invariant tube_2.mode.emergency disables tube_1.mode.c_emergency;
requirement invariant tube_1.evacuation.c_on needs tube_2.mode.support;
requirement invariant tube_2.evacuation.c_on needs tube_1.mode.support;
requirement invariant tube_1.mode.c_recovery needs tube_1.mode.emergency and tube_1.button_recovery.observer.pressed or tube_1.mode.support and tube_2.mode.recovery;
requirement invariant tube_2.mode.c_recovery needs tube_2.mode.emergency and tube_2.button_recovery.observer.pressed or tube_2.mode.support and tube_1.mode.recovery;
requirement invariant middle_tunnel_channel.lighting.c_on needs tube_1.standby.on or tube_1.mode.emergency or tube_2.standby.on or tube_2.mode.emergency;
requirement invariant middle_tunnel_channel.lighting.c_off needs tube_1.standby.off;
requirement invariant middle_tunnel_channel.lighting.c_off needs tube_2.standby.off;
requirement invariant middle_tunnel_channel.lighting.c_off needs tube_1.mode.operational or tube_1.mode.recovery;
requirement invariant middle_tunnel_channel.lighting.c_off needs tube_2.mode.operational or tube_2.mode.recovery;
requirement invariant middle_tunnel_channel.dynamic_escaperoute_indication.c_upward needs tube_1.evacuation.on;
requirement invariant middle_tunnel_channel.dynamic_escaperoute_indication.c_downward needs tube_2.evacuation.on;
requirement invariant middle_tunnel_channel.dynamic_escaperoute_indication.c_off needs tube_1.evacuation.off;
requirement invariant middle_tunnel_channel.dynamic_escaperoute_indication.c_off needs tube_2.evacuation.off;
requirement invariant middle_tunnel_channel.intercom.c_on needs tube_1.evacuation.on and tube_1.switch_timer_audio.on_2 or tube_2.evacuation.on and tube_2.switch_timer_audio.on_2;
requirement invariant middle_tunnel_channel.intercom.c_off needs tube_1.evacuation.off or not tube_1.switch_timer_audio.on_2;
requirement invariant middle_tunnel_channel.intercom.c_off needs tube_2.evacuation.off or not tube_2.switch_timer_audio.on_2;
svgout id "mode_operational_1" attr "visibility" value if tube_1.mode.operational and tube_1.standby.off: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "mode_emergency_1" attr "visibility" value if tube_1.mode.emergency and tube_1.evacuation.off: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "mode_standby_1" attr "visibility" value if tube_1.standby.on: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "mode_evacuation_1" attr "visibility" value if tube_1.evacuation.on: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "mode_recovery_1" attr "visibility" value if tube_1.mode.recovery: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "mode_support_1" attr "visibility" value if tube_1.mode.support: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "mode_operational_2" attr "visibility" value if tube_2.mode.operational and tube_2.standby.off: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "mode_emergency_2" attr "visibility" value if tube_2.mode.emergency and tube_2.evacuation.off: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "mode_standby_2" attr "visibility" value if tube_2.standby.on: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "mode_evacuation_2" attr "visibility" value if tube_2.evacuation.on: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "mode_recovery_2" attr "visibility" value if tube_2.mode.recovery: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "mode_support_2" attr "visibility" value if tube_2.mode.support: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgin id "button_operational_1" event tube_1.button_operational.button.u_press file "../4_Basic_Model.svg";
svgin id "button_evacuation_1" event tube_1.button_evacuation.button.u_press file "../4_Basic_Model.svg";
svgin id "button_recovery_1" event tube_1.button_recovery.button.u_press file "../4_Basic_Model.svg";
svgin id "button_operational_2" event tube_2.button_operational.button.u_press file "../4_Basic_Model.svg";
svgin id "button_evacuation_2" event tube_2.button_evacuation.button.u_press file "../4_Basic_Model.svg";
svgin id "button_recovery_2" event tube_2.button_recovery.button.u_press file "../4_Basic_Model.svg";
svgin id "button_obstacle_1" event if hybrid_tube_1.hybrid_obstacle.no_obstacle: hybrid_tube_1.hybrid_obstacle.u_place_obstacle else hybrid_tube_1.hybrid_obstacle.u_remove_obstacle end file "../4_Basic_Model.svg";
svgin id "button_obstacle_2" event if hybrid_tube_2.hybrid_obstacle.no_obstacle: hybrid_tube_2.hybrid_obstacle.u_place_obstacle else hybrid_tube_2.hybrid_obstacle.u_remove_obstacle end file "../4_Basic_Model.svg";
svgout id "obstacle1" attr "visibility" value if hybrid_tube_1.hybrid_obstacle.obstacle: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "obstacle2" attr "visibility" value if hybrid_tube_2.hybrid_obstacle.obstacle: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "height" text value fmt("h: %f", hybrid_tube_1.hybrid_boom_barrier_1.height) file "../4_Basic_Model.svg";
svgout id "height_2" text value fmt("h: %f", hybrid_tube_1.hybrid_boom_barrier_2.height) file "../4_Basic_Model.svg";
svgout id "bb_1_normal_2" attr "visibility" value if hybrid_tube_1.hybrid_boom_barrier_1.height < 250: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "bb_1_normal_3" attr "visibility" value if hybrid_tube_1.hybrid_boom_barrier_1.height < 200: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "bb_1_normal_4" attr "visibility" value if hybrid_tube_1.hybrid_boom_barrier_1.height < 150: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "bb_1_normal_5" attr "visibility" value if hybrid_tube_1.hybrid_boom_barrier_1.height < 100: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "bb_1_normal_6" attr "visibility" value if hybrid_tube_1.hybrid_boom_barrier_1.height < 50: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "bb_1_emergency_2" attr "visibility" value if hybrid_tube_1.hybrid_boom_barrier_2.height < 240: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "bb_1_emergency_3" attr "visibility" value if hybrid_tube_1.hybrid_boom_barrier_2.height < 180: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "bb_1_emergency_4" attr "visibility" value if hybrid_tube_1.hybrid_boom_barrier_2.height < 120: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "bb_1_emergency_5" attr "visibility" value if hybrid_tube_1.hybrid_boom_barrier_2.height < 50: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "bb_2_normal_2" attr "visibility" value if hybrid_tube_2.hybrid_boom_barrier_1.height < 250: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "bb_2_normal_3" attr "visibility" value if hybrid_tube_2.hybrid_boom_barrier_1.height < 200: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "bb_2_normal_4" attr "visibility" value if hybrid_tube_2.hybrid_boom_barrier_1.height < 150: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "bb_2_normal_5" attr "visibility" value if hybrid_tube_2.hybrid_boom_barrier_1.height < 100: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "bb_2_normal_6" attr "visibility" value if hybrid_tube_2.hybrid_boom_barrier_1.height < 50: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "bb_2_emergency_2" attr "visibility" value if hybrid_tube_2.hybrid_boom_barrier_2.height < 240: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "bb_2_emergency_3" attr "visibility" value if hybrid_tube_2.hybrid_boom_barrier_2.height < 180: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "bb_2_emergency_4" attr "visibility" value if hybrid_tube_2.hybrid_boom_barrier_2.height < 120: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "bb_2_emergency_5" attr "visibility" value if hybrid_tube_2.hybrid_boom_barrier_2.height < 50: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "red_1_1" attr "fill" value if tube_1.traffic_light_1.mode.red: "red" else "grey" end file "../4_Basic_Model.svg";
svgout id "yellow_1_1" attr "fill" value if tube_1.traffic_light_1.mode.yellow or tube_1.traffic_light_1.mode.flashing and hybrid_tube_1.hybrid_traffic_light_1.timer_flash.on: "yellow" else "grey" end file "../4_Basic_Model.svg";
svgout id "red_1_2" attr "fill" value if tube_1.traffic_light_2.mode.red: "red" else "grey" end file "../4_Basic_Model.svg";
svgout id "yellow_1_2" attr "fill" value if tube_1.traffic_light_2.mode.yellow or tube_1.traffic_light_2.mode.flashing and hybrid_tube_1.hybrid_traffic_light_2.timer_flash.on: "yellow" else "grey" end file "../4_Basic_Model.svg";
svgout id "red_1_3" attr "fill" value if tube_1.traffic_light_3.mode.red: "red" else "grey" end file "../4_Basic_Model.svg";
svgout id "yellow_1_3" attr "fill" value if tube_1.traffic_light_3.mode.yellow or tube_1.traffic_light_3.mode.flashing and hybrid_tube_1.hybrid_traffic_light_3.timer_flash.on: "yellow" else "grey" end file "../4_Basic_Model.svg";
svgout id "release_signal_1" attr "fill" value if tube_1.traffic_light_1.release_signal.on and tube_1.traffic_light_2.release_signal.on and tube_1.traffic_light_3.release_signal.on: "yellow" else "grey" end file "../4_Basic_Model.svg";
svgout id "light_request_1" attr "fill" value if tube_1.mode.emergency or tube_1.mode.recovery: "red" else "grey" end file "../4_Basic_Model.svg";
svgout id "time_light_1" text value fmt("Traffic light Time: %.2f s", hybrid_tube_1.hybrid_traffic_light_1.timer_traffic_light.t) file "../4_Basic_Model.svg";
svgout id "time_MTM_1" text value fmt("Matrix sign Time: %.2f s", hybrid_tube_1.hybrid_j32.timer.t) file "../4_Basic_Model.svg";
svgout id "red_2_1" attr "fill" value if tube_2.traffic_light_1.mode.red: "red" else "grey" end file "../4_Basic_Model.svg";
svgout id "yellow_2_1" attr "fill" value if tube_2.traffic_light_1.mode.yellow or tube_2.traffic_light_1.mode.flashing and hybrid_tube_2.hybrid_traffic_light_1.timer_flash.on: "yellow" else "grey" end file "../4_Basic_Model.svg";
svgout id "red_2_2" attr "fill" value if tube_2.traffic_light_2.mode.red: "red" else "grey" end file "../4_Basic_Model.svg";
svgout id "yellow_2_2" attr "fill" value if tube_2.traffic_light_2.mode.yellow or tube_2.traffic_light_2.mode.flashing and hybrid_tube_2.hybrid_traffic_light_2.timer_flash.on: "yellow" else "grey" end file "../4_Basic_Model.svg";
svgout id "red_2_3" attr "fill" value if tube_2.traffic_light_3.mode.red: "red" else "grey" end file "../4_Basic_Model.svg";
svgout id "yellow_2_3" attr "fill" value if tube_2.traffic_light_3.mode.yellow or tube_2.traffic_light_3.mode.flashing and hybrid_tube_2.hybrid_traffic_light_3.timer_flash.on: "yellow" else "grey" end file "../4_Basic_Model.svg";
svgout id "release_signal_2" attr "fill" value if tube_2.traffic_light_1.release_signal.on and tube_2.traffic_light_2.release_signal.on and tube_2.traffic_light_3.release_signal.on: "yellow" else "grey" end file "../4_Basic_Model.svg";
svgout id "light_request_2" attr "fill" value if tube_2.mode.emergency or tube_2.mode.recovery: "red" else "grey" end file "../4_Basic_Model.svg";
svgout id "time_light_2" text value fmt("Traffic light Time: %.2f s", hybrid_tube_2.hybrid_traffic_light_1.timer_traffic_light.t) file "../4_Basic_Model.svg";
svgout id "time_MTM_2" text value fmt("Matrix sign Time: %.2f s", hybrid_tube_2.hybrid_j32.timer.t) file "../4_Basic_Model.svg";
svgout id "j32_sign1" attr "fill" value if tube_1.j32.mode.on: "white" else "grey" end file "../4_Basic_Model.svg";
svgout id "j32_sign2" attr "fill" value if tube_2.j32.mode.on: "white" else "grey" end file "../4_Basic_Model.svg";
svgout id "MTM_free_1" attr "visibility" value if tube_1.matrix_sign_free.on: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "MTM_traffic_light_1" attr "visibility" value if tube_1.matrix_sign_traffic_light.on: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "MTM_free_2" attr "visibility" value if tube_2.matrix_sign_free.on: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "MTM_traffic_light_2" attr "visibility" value if tube_2.matrix_sign_traffic_light.on: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgin id "lid_1_A" event tube_1.emergency_cabinet_A.sensor_open.u_on file "../4_Basic_Model.svg";
svgout id "lid_1_A" attr "visibility" value if tube_1.emergency_cabinet_A.sensor_open.off: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgin id "lid_open_1_A" event tube_1.emergency_cabinet_A.sensor_open.u_off file "../4_Basic_Model.svg";
svgout id "lid_open_1_A" attr "visibility" value if tube_1.emergency_cabinet_A.sensor_open.on: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgin id "hand_extinguisher_1_A" event if tube_1.emergency_cabinet_A.hand_extinguisher.off: tube_1.emergency_cabinet_A.hand_extinguisher.u_on else tube_1.emergency_cabinet_A.hand_extinguisher.u_off end file "../4_Basic_Model.svg";
svgout id "hand_extinguisher_1_A_bg" attr "fill" value if tube_1.emergency_cabinet_A.hand_extinguisher.on: "yellow" else "gray" end file "../4_Basic_Model.svg";
svgin id "fire_hose_1_A" event if tube_1.emergency_cabinet_A.fire_hose.off: tube_1.emergency_cabinet_A.fire_hose.u_on else tube_1.emergency_cabinet_A.fire_hose.u_off end file "../4_Basic_Model.svg";
svgout id "fire_hose_1_A_bg" attr "fill" value if tube_1.emergency_cabinet_A.fire_hose.on: "yellow" else "gray" end file "../4_Basic_Model.svg";
svgin id "emergency_phone_1_A" event if tube_1.emergency_cabinet_A.emergency_phone.off: tube_1.emergency_cabinet_A.emergency_phone.u_on else tube_1.emergency_cabinet_A.emergency_phone.u_off end file "../4_Basic_Model.svg";
svgout id "emergency_phone_1_A_bg" attr "fill" value if tube_1.emergency_cabinet_A.emergency_phone.on: "yellow" else "gray" end file "../4_Basic_Model.svg";
svgin id "lid_1_C" event tube_1.emergency_cabinet_C.sensor_open.u_on file "../4_Basic_Model.svg";
svgout id "lid_1_C" attr "visibility" value if tube_1.emergency_cabinet_C.sensor_open.off: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgin id "lid_open_1_C" event tube_1.emergency_cabinet_C.sensor_open.u_off file "../4_Basic_Model.svg";
svgout id "lid_open_1_C" attr "visibility" value if tube_1.emergency_cabinet_C.sensor_open.on: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgin id "hand_extinguisher_1_C" event if tube_1.emergency_cabinet_C.hand_extinguisher.off: tube_1.emergency_cabinet_C.hand_extinguisher.u_on else tube_1.emergency_cabinet_C.hand_extinguisher.u_off end file "../4_Basic_Model.svg";
svgout id "hand_extinguisher_1_C_bg" attr "fill" value if tube_1.emergency_cabinet_C.hand_extinguisher.on: "yellow" else "gray" end file "../4_Basic_Model.svg";
svgin id "emergency_phone_1_C" event if tube_1.emergency_cabinet_C.emergency_phone.off: tube_1.emergency_cabinet_C.emergency_phone.u_on else tube_1.emergency_cabinet_C.emergency_phone.u_off end file "../4_Basic_Model.svg";
svgout id "emergency_phone_1_C_bg" attr "fill" value if tube_1.emergency_cabinet_C.emergency_phone.on: "yellow" else "gray" end file "../4_Basic_Model.svg";
svgin id "lid_2_A" event tube_2.emergency_cabinet_A.sensor_open.u_on file "../4_Basic_Model.svg";
svgout id "lid_2_A" attr "visibility" value if tube_2.emergency_cabinet_A.sensor_open.off: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgin id "lid_open_2_A" event tube_2.emergency_cabinet_A.sensor_open.u_off file "../4_Basic_Model.svg";
svgout id "lid_open_2_A" attr "visibility" value if tube_2.emergency_cabinet_A.sensor_open.on: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgin id "hand_extinguisher_2_A" event if tube_2.emergency_cabinet_A.hand_extinguisher.off: tube_2.emergency_cabinet_A.hand_extinguisher.u_on else tube_2.emergency_cabinet_A.hand_extinguisher.u_off end file "../4_Basic_Model.svg";
svgout id "hand_extinguisher_2_A_bg" attr "fill" value if tube_2.emergency_cabinet_A.hand_extinguisher.on: "yellow" else "gray" end file "../4_Basic_Model.svg";
svgin id "fire_hose_2_A" event if tube_2.emergency_cabinet_A.fire_hose.off: tube_2.emergency_cabinet_A.fire_hose.u_on else tube_2.emergency_cabinet_A.fire_hose.u_off end file "../4_Basic_Model.svg";
svgout id "fire_hose_2_A_bg" attr "fill" value if tube_2.emergency_cabinet_A.fire_hose.on: "yellow" else "gray" end file "../4_Basic_Model.svg";
svgin id "emergency_phone_2_A" event if tube_2.emergency_cabinet_A.emergency_phone.off: tube_2.emergency_cabinet_A.emergency_phone.u_on else tube_2.emergency_cabinet_A.emergency_phone.u_off end file "../4_Basic_Model.svg";
svgout id "emergency_phone_2_A_bg" attr "fill" value if tube_2.emergency_cabinet_A.emergency_phone.on: "yellow" else "gray" end file "../4_Basic_Model.svg";
svgin id "lid_2_C" event tube_2.emergency_cabinet_C.sensor_open.u_on file "../4_Basic_Model.svg";
svgout id "lid_2_C" attr "visibility" value if tube_2.emergency_cabinet_C.sensor_open.off: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgin id "lid_open_2_C" event tube_2.emergency_cabinet_C.sensor_open.u_off file "../4_Basic_Model.svg";
svgout id "lid_open_2_C" attr "visibility" value if tube_2.emergency_cabinet_C.sensor_open.on: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgin id "hand_extinguisher_2_C" event if tube_2.emergency_cabinet_C.hand_extinguisher.off: tube_2.emergency_cabinet_C.hand_extinguisher.u_on else tube_2.emergency_cabinet_C.hand_extinguisher.u_off end file "../4_Basic_Model.svg";
svgout id "hand_extinguisher_2_C_bg" attr "fill" value if tube_2.emergency_cabinet_C.hand_extinguisher.on: "yellow" else "gray" end file "../4_Basic_Model.svg";
svgin id "emergency_phone_2_C" event if tube_2.emergency_cabinet_C.emergency_phone.off: tube_2.emergency_cabinet_C.emergency_phone.u_on else tube_2.emergency_cabinet_C.emergency_phone.u_off end file "../4_Basic_Model.svg";
svgout id "emergency_phone_2_C_bg" attr "fill" value if tube_2.emergency_cabinet_C.emergency_phone.on: "yellow" else "gray" end file "../4_Basic_Model.svg";
svgin id "add_smoke_1" event hybrid_tube_1.smoke.button_add.button.u_press file "../4_Basic_Model.svg";
svgin id "remove_smoke_1" event hybrid_tube_1.smoke.button_remove.button.u_press file "../4_Basic_Model.svg";
svgout id "smoke_level_1" text value fmt("%d", hybrid_tube_1.smoke.smoke_level.level) file "../4_Basic_Model.svg";
svgin id "add_smoke_2" event hybrid_tube_2.smoke.button_add.button.u_press file "../4_Basic_Model.svg";
svgin id "remove_smoke_2" event hybrid_tube_2.smoke.button_remove.button.u_press file "../4_Basic_Model.svg";
svgout id "smoke_level_2" text value fmt("%d", hybrid_tube_2.smoke.smoke_level.level) file "../4_Basic_Model.svg";
svgout id "smoke_1_1" attr "visibility" value if hybrid_tube_1.smoke.smoke_level.level > 0: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_1_2" attr "visibility" value if hybrid_tube_1.smoke.smoke_level.level > 1: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_1_3" attr "visibility" value if hybrid_tube_1.smoke.smoke_level.level > 2: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_1_4" attr "visibility" value if hybrid_tube_1.smoke.smoke_level.level > 3: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_1_5" attr "visibility" value if hybrid_tube_1.smoke.smoke_level.level > 4: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_1_6" attr "visibility" value if hybrid_tube_1.smoke.smoke_level.level > 5: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_1_7" attr "visibility" value if hybrid_tube_1.smoke.smoke_level.level > 6: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_1_8" attr "visibility" value if hybrid_tube_1.smoke.smoke_level.level > 7: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_1_9" attr "visibility" value if hybrid_tube_1.smoke.smoke_level.level > 8: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_1_10" attr "visibility" value if hybrid_tube_1.smoke.smoke_level.level > 9: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_1_11" attr "visibility" value if hybrid_tube_1.smoke.smoke_level.level > 10: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_1_12" attr "visibility" value if hybrid_tube_1.smoke.smoke_level.level > 11: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_1_13" attr "visibility" value if hybrid_tube_1.smoke.smoke_level.level > 12: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_1_14" attr "visibility" value if hybrid_tube_1.smoke.smoke_level.level > 13: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_1_15" attr "visibility" value if hybrid_tube_1.smoke.smoke_level.level > 14: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_1_16" attr "visibility" value if hybrid_tube_1.smoke.smoke_level.level > 15: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_1_17" attr "visibility" value if hybrid_tube_1.smoke.smoke_level.level > 16: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_1_18" attr "visibility" value if hybrid_tube_1.smoke.smoke_level.level > 17: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_1_19" attr "visibility" value if hybrid_tube_1.smoke.smoke_level.level > 18: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_1_20" attr "visibility" value if hybrid_tube_1.smoke.smoke_level.level > 19: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_2_1" attr "visibility" value if hybrid_tube_2.smoke.smoke_level.level > 0: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_2_2" attr "visibility" value if hybrid_tube_2.smoke.smoke_level.level > 1: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_2_3" attr "visibility" value if hybrid_tube_2.smoke.smoke_level.level > 2: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_2_4" attr "visibility" value if hybrid_tube_2.smoke.smoke_level.level > 3: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_2_5" attr "visibility" value if hybrid_tube_2.smoke.smoke_level.level > 4: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_2_6" attr "visibility" value if hybrid_tube_2.smoke.smoke_level.level > 5: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_2_7" attr "visibility" value if hybrid_tube_2.smoke.smoke_level.level > 6: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_2_8" attr "visibility" value if hybrid_tube_2.smoke.smoke_level.level > 7: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_2_9" attr "visibility" value if hybrid_tube_2.smoke.smoke_level.level > 8: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_2_10" attr "visibility" value if hybrid_tube_2.smoke.smoke_level.level > 9: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_2_11" attr "visibility" value if hybrid_tube_2.smoke.smoke_level.level > 10: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_2_12" attr "visibility" value if hybrid_tube_2.smoke.smoke_level.level > 11: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_2_13" attr "visibility" value if hybrid_tube_2.smoke.smoke_level.level > 12: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_2_14" attr "visibility" value if hybrid_tube_2.smoke.smoke_level.level > 13: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_2_15" attr "visibility" value if hybrid_tube_2.smoke.smoke_level.level > 14: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_2_16" attr "visibility" value if hybrid_tube_2.smoke.smoke_level.level > 15: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_2_17" attr "visibility" value if hybrid_tube_2.smoke.smoke_level.level > 16: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_2_18" attr "visibility" value if hybrid_tube_2.smoke.smoke_level.level > 17: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_2_19" attr "visibility" value if hybrid_tube_2.smoke.smoke_level.level > 18: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "smoke_2_20" attr "visibility" value if hybrid_tube_2.smoke.smoke_level.level > 19: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgin id "button_SOS_1" event if tube_1.SOS.off: tube_1.SOS.u_on else tube_1.SOS.u_off end file "../4_Basic_Model.svg";
svgout id "SOS_1_bg" attr "fill" value if tube_1.SOS.on: "yellow" else "grey" end file "../4_Basic_Model.svg";
svgin id "button_SOS_2" event if tube_2.SOS.off: tube_2.SOS.u_on else tube_2.SOS.u_off end file "../4_Basic_Model.svg";
svgout id "SOS_2_bg" attr "fill" value if tube_2.SOS.on: "yellow" else "grey" end file "../4_Basic_Model.svg";
svgout id "ventilation_mode_1" text value fmt("Ventilation mode: %d", tube_1.ventilation_entrance.mode) file "../4_Basic_Model.svg";
svgout id "ventilation_mode_2" text value fmt("Ventilation mode: %d", tube_2.ventilation_entrance.mode) file "../4_Basic_Model.svg";
svgout id "ventilation_mode_1-1" text value fmt("Ventilation mode: %d", tube_1.ventilation.mode) file "../4_Basic_Model.svg";
svgout id "ventilation_mode_2-1" text value fmt("Ventilation mode: %d", tube_2.ventilation.mode) file "../4_Basic_Model.svg";
svgout id "ventilation_direction_along_1" attr "visibility" value if tube_1.ventilation_direction.along and tube_1.ventilation_entrance.mode > 0: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "ventilation_direction_against_1" attr "visibility" value if tube_1.ventilation_direction.against and tube_1.ventilation_entrance.mode > 0: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "ventilation_direction_along_2" attr "visibility" value if tube_2.ventilation_direction.along and tube_2.ventilation_entrance.mode > 0: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "ventilation_direction_against_2" attr "visibility" value if tube_2.ventilation_direction.against and tube_2.ventilation_entrance.mode > 0: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "ventilation_direction_along_1-1" attr "visibility" value if tube_1.ventilation_direction.along and tube_1.ventilation.mode > 0: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "ventilation_direction_against_1-1" attr "visibility" value if tube_1.ventilation_direction.against and tube_1.ventilation.mode > 0: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "ventilation_direction_along_2-1" attr "visibility" value if tube_2.ventilation_direction.along and tube_2.ventilation.mode > 0: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "ventilation_direction_against_2-1" attr "visibility" value if tube_2.ventilation_direction.against and tube_2.ventilation.mode > 0: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgin id "add_light_1" event hybrid_tube_1.light.button_add.button.u_press file "../4_Basic_Model.svg";
svgin id "remove_light_1" event hybrid_tube_1.light.button_remove.button.u_press file "../4_Basic_Model.svg";
svgout id "light_level_1" text value fmt("%d", hybrid_tube_1.light.light_level.level) file "../4_Basic_Model.svg";
svgin id "add_light_2" event hybrid_tube_2.light.button_add.button.u_press file "../4_Basic_Model.svg";
svgin id "remove_light_2" event hybrid_tube_2.light.button_remove.button.u_press file "../4_Basic_Model.svg";
svgout id "light_level_2" text value fmt("%d", hybrid_tube_2.light.light_level.level) file "../4_Basic_Model.svg";
svgout id "lighting_mode_1" text value fmt("Lighting mode: %d", tube_1.lighting.mode) file "../4_Basic_Model.svg";
svgout id "lighting_mode_2" text value fmt("Lighting mode: %d", tube_2.lighting.mode) file "../4_Basic_Model.svg";
svgout id "camera_1_1" attr "visibility" value if tube_1.channel.camera_1: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "camera_1_2" attr "visibility" value if tube_1.channel.camera_2: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "camera_1_3" attr "visibility" value if tube_1.channel.camera_3: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "camera_1_4" attr "visibility" value if tube_1.channel.camera_4: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "camera_1_5" attr "visibility" value if tube_1.channel.camera_5: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "camera_1_6" attr "visibility" value if tube_1.channel.camera_6: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "camera_2_1" attr "visibility" value if tube_2.channel.camera_1: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "camera_2_2" attr "visibility" value if tube_2.channel.camera_2: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "camera_2_3" attr "visibility" value if tube_2.channel.camera_3: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "camera_2_4" attr "visibility" value if tube_2.channel.camera_4: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "camera_2_5" attr "visibility" value if tube_2.channel.camera_5: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "camera_2_6" attr "visibility" value if tube_2.channel.camera_6: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "recorder_1" attr "fill" value if tube_1.recorder.on: "yellow" else "grey" end file "../4_Basic_Model.svg";
svgout id "recorder_2" attr "fill" value if tube_2.recorder.on: "yellow" else "grey" end file "../4_Basic_Model.svg";
svgout id "sound_beacon_1" attr "visibility" value if tube_1.escape_door.sound_beacon.on: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "sound_beacon_2" attr "visibility" value if tube_2.escape_door.sound_beacon.on: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "contour_lighting_1" attr "visibility" value if tube_1.escape_door.contour_lighting.on: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "contour_lighting_2" attr "visibility" value if tube_2.escape_door.contour_lighting.on: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "intercom_1" attr "visibility" value if tube_1.intercom.on: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "intercom_2" attr "visibility" value if tube_2.intercom.on: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "safespace_lightbulb" attr "visibility" value if middle_tunnel_channel.lighting.on: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "safespace_darkness" attr "visibility" value if middle_tunnel_channel.lighting.off: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "safespace_audio" attr "visibility" value if middle_tunnel_channel.intercom.on: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "escape_route_left" attr "visibility" value if middle_tunnel_channel.dynamic_escaperoute_indication.downward: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "escape_route_right" attr "visibility" value if middle_tunnel_channel.dynamic_escaperoute_indication.upward: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "airpressure_up" attr "visibility" value if middle_tunnel_channel.pressure.left: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgout id "airpressure_down" attr "visibility" value if middle_tunnel_channel.pressure.right: "visible" else "hidden" end file "../4_Basic_Model.svg";
svgin id "escape_door_1" event if tube_1.escape_door.sensor_open.off: tube_1.escape_door.sensor_open.u_on else tube_1.escape_door.sensor_open.u_off end file "../4_Basic_Model.svg";
svgout id "escape_door_1" attr "fill" value if tube_1.escape_door.sensor_open.on: "white" else "black" end file "../4_Basic_Model.svg";
svgin id "escape_door_2" event if tube_2.escape_door.sensor_open.off: tube_2.escape_door.sensor_open.u_on else tube_2.escape_door.sensor_open.u_off end file "../4_Basic_Model.svg";
svgout id "escape_door_2" attr "fill" value if tube_2.escape_door.sensor_open.on: "white" else "black" end file "../4_Basic_Model.svg";
